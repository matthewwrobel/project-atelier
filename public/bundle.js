/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={949:function(e){var t=this;function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}e.exports={formatDate:function(e){var t,r,o=(t=e.split("-"),r=3,function(e){if(Array.isArray(e))return e}(t)||function(e,t){var n=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=n){var r,o,i=[],a=!0,l=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){l=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(l)throw o}}return i}}(t,r)||function(e,t){if(e){if("string"==typeof e)return n(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?n(e,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];return"01"===a?a="January":"02"===a?a="February":"03"===a?a="March":"04"===a?a="April":"05"===a?a="May":"06"===a?a="June":"07"===a?a="July":"08"===a?a="August":"09"===a?a="September":"10"===a?a="October":"11"===a?a="November":"12"===a&&(a="December"),a+" "+o[2]+", "+i},fetchReviews:function(){return $.ajax({url:"reviews/?product_id=".concat(t.props.product_id,"&page=1&count=100&sort=relevant"),method:"GET"})},computeAverageRating:function(e){if(0!==e.length){var t=0,n=0;for(var r in e){var o=e[r];n+=r*o,t+=Number.parseInt(o)}var i=n/t;return[i.toFixed(1),(Math.round(4*i)/4).toFixed(2)]}},computeRatingBreakdown:function(e){var t=[],n=0;for(var r in e){var o=e[r];n+=Number.parseInt(o)}for(var i=1;i<=5;i++){o=e[i]||0;var a=Number.parseInt(o)/n*100;t.push([a,o])}return t},computeRecommendedPercentage:function(e){if(0===Object.keys(e).length)return"0%";var t=Number.parseInt(e.true)||0;return(t/(t+(Number.parseInt(e.false)||0))*100).toFixed(0)+"%"},formatCharacteristics:function(e){var t=[];for(var n in e){var r={};r.name=n,r.value=e[n].value,r.id=e[n].id,t.push(r)}return t},sortReviews:function(e,t){if(0===e.length)return[];var n=e.slice();if("helpfulness"===t)return n.sort((function(e,t){return t.helpfulness-e.helpfulness}));if("date"===t)return n.sort((function(e,t){return new Date(t.date)-new Date(e.date)}));if("relevance"===t){n.sort((function(e,t){return new Date(t.date)-new Date(e.date)}));for(var r=[],o=[],i=n[0].date,a=0;a<n.length;a++)n[a].date===i?o.push(n[a]):(r.push(o),(o=[]).push(n[a]),i=n[a].date);for(r.push(o),a=0;a<r.length;a++)r[a].sort((function(e,t){return t.helpfulness-e.helpfulness}));return r.flat()}return e},applyStarFilters:function(e,t){if(0===t.length)return e;for(var n=[],r=0;r<e.length;r++)-1!==t.indexOf(e[r].rating)&&n.push(e[r]);return n},applyKeyword:function(e,t){return e.filter((function(e){return null===e.response&&(e.response=""),e.summary.includes(t)||e.body.includes(t)||e.reviewer_name.includes(t)||e.response.includes(t)}))},formatReviewTile:function(e,t,n,r){var o="",i=!1,a=!1,l=0,u=!0,s=!1;e.length>60&&(e=e.slice(0,61)+"..."),t.length>250&&(o=t.slice(),t=t.slice(0,251)+"...",i=!0),0!==n.length&&(a=!0),-1!==JSON.parse(sessionStorage.getItem("helpfulReviews")).indexOf(r)&&(l=1,u=!1),-1!==JSON.parse(sessionStorage.getItem("reportedReviews")).indexOf(r)&&(s=!0);var c=JSON.parse(localStorage.getItem("helpfulReviews"));return c&&-1!==c.indexOf(r)&&(u=!1),[e,t,o,i,a,l,u,s]},productCharacteristics:{Size:{1:"A size too small",2:"½ a size too small",3:"Perfect",4:"½ a size too big",5:"A size too wide"},Width:{1:"Too narrow",2:"Slightly narrow",3:"Perfect",4:"Slightly wide",5:"Too wide"},Comfort:{1:"Uncomfortable",2:"Slightly uncomfortable",3:"Ok",4:"Comfortable",5:"Perfect"},Quality:{1:"Poor",2:"Below average",3:"What I expected",4:"Pretty great",5:"Perfect"},Length:{1:"Runs short",2:"Runs slightly short",3:"Perfect",4:"Runs slightly long",5:"Runs long"},Fit:{1:"Runs tight",2:"Runs slightly tight",3:"Perfect",4:"Runs slightly long",5:"Runs long"}}}},215:e=>{e.exports={getRelatedItems:function(e){return new Promise((function(t){fetch("/products/".concat(e,"/related")).then((function(e){return e.json()})).then((function(n){var r=parseInt(e),o=n.filter((function(e){return e!==r}));t(o)}))}))},getProductInfo:function(e){return new Promise((function(t){fetch("/products/".concat(e)).then((function(e){return e.json()})).then((function(e){return t(e)}))}))},getProductStyles:function(e){return new Promise((function(t){fetch("/products/".concat(e,"/styles")).then((function(e){return e.json()})).then((function(e){return t(e)}))}))},getProductRatings:function(e){return new Promise((function(t){fetch("/reviews/meta?product_id=".concat(e)).then((function(e){return e.json()})).then((function(e){return t(e)}))}))},findDefaultStyle:function(e){var t=!1;return new Promise((function(n){e.forEach((function(e){!0===e["default?"]&&(t=!0,n(e))})),t||n(e[0])}))},defineMainProduct:function(e,t,n){var r,o;return o="NaN"===n?"0.00":n,r=t.sale_price?t.sale_price:t.original_price,{thumbnailUrl:t.photos[0].thumbnail_url?t.photos[0].thumbnail_url:"https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png?format=webp&v=1530129081",category:e.category,name:e.name,price:r,rating:o,id:e.id}},findComparisonFeatures:function(e,t){var n=[];return e.forEach((function(e){null===e.value&&(e.value="--"),e.compValue="--",e.product="main",n.push(e)})),t.forEach((function(e){null===e.value&&(e.value="--");var t=n.findIndex((function(t){return t.feature===e.feature}));-1!==t?(n[t].compValue=e.value,e.product="comp"):(e.compValue="--",e.product="comp",n.push(e))})),n},preventScroll:function(){var e=document.getElementsByTagName("body")[0];""===e.style.overflow?e.style.overflow="hidden":"hidden"===e.style.overflow&&(e.style.overflow="")}}},184:(e,t)=>{var n;!function(){"use strict";var r={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var i=typeof n;if("string"===i||"number"===i)e.push(n);else if(Array.isArray(n)){if(n.length){var a=o.apply(null,n);a&&e.push(a)}}else if("object"===i)if(n.toString===Object.prototype.toString)for(var l in n)r.call(n,l)&&n[l]&&e.push(l);else e.push(n.toString())}}return e.join(" ")}e.exports?(o.default=o,e.exports=o):void 0===(n=function(){return o}.apply(t,[]))||(e.exports=n)}()},755:function(e,t){var n;!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(r,o){"use strict";var i=[],a=Object.getPrototypeOf,l=i.slice,u=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},s=i.push,c=i.indexOf,f={},d=f.toString,p=f.hasOwnProperty,h=p.toString,m=h.call(Object),y={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType&&"function"!=typeof e.item},g=function(e){return null!=e&&e===e.window},b=r.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function S(e,t,n){var r,o,i=(n=n||b).createElement("script");if(i.text=e,t)for(r in w)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function E(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?f[d.call(e)]||"object":typeof e}var k="3.6.0",x=function(e,t){return new x.fn.init(e,t)};function C(e){var t=!!e&&"length"in e&&e.length,n=E(e);return!v(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}x.fn=x.prototype={jquery:k,constructor:x,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:s,sort:i.sort,splice:i.splice},x.extend=x.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},l=1,u=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[l]||{},l++),"object"==typeof a||v(a)||(a={}),l===u&&(a=this,l--);l<u;l++)if(null!=(e=arguments[l]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(s&&r&&(x.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||x.isPlainObject(n)?n:{},o=!1,a[t]=x.extend(s,i,r)):void 0!==r&&(a[t]=r));return a},x.extend({expando:"jQuery"+(k+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=a(e))&&("function"!=typeof(n=p.call(t,"constructor")&&t.constructor)||h.call(n)!==m))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){S(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(C(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?x.merge(n,"string"==typeof e?[e]:e):s.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:c.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(C(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return u(a)},guid:1,support:y}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=i[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){f["[object "+t+"]"]=t.toLowerCase()}));var O=function(e){var t,n,r,o,i,a,l,u,s,c,f,d,p,h,m,y,v,g,b,w="sizzle"+1*new Date,S=e.document,E=0,k=0,x=ue(),C=ue(),O=ue(),_=ue(),R=function(e,t){return e===t&&(f=!0),0},P={}.hasOwnProperty,T=[],N=T.pop,j=T.push,A=T.push,I=T.slice,L=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},M="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",D="[\\x20\\t\\r\\n\\f]",z="(?:\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",B="\\[[\\x20\\t\\r\\n\\f]*("+z+")(?:"+D+"*([*^$|!~]?=)"+D+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+z+"))|)"+D+"*\\]",q=":("+z+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",F=new RegExp(D+"+","g"),H=new RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$","g"),U=new RegExp("^[\\x20\\t\\r\\n\\f]*,[\\x20\\t\\r\\n\\f]*"),W=new RegExp("^[\\x20\\t\\r\\n\\f]*([>+~]|[\\x20\\t\\r\\n\\f])[\\x20\\t\\r\\n\\f]*"),Q=new RegExp(D+"|>"),V=new RegExp(q),$=new RegExp("^"+z+"$"),Y={ID:new RegExp("^#("+z+")"),CLASS:new RegExp("^\\.("+z+")"),TAG:new RegExp("^("+z+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\([\\x20\\t\\r\\n\\f]*(even|odd|(([+-]|)(\\d*)n|)[\\x20\\t\\r\\n\\f]*(?:([+-]|)[\\x20\\t\\r\\n\\f]*(\\d+)|))[\\x20\\t\\r\\n\\f]*\\)|)","i"),bool:new RegExp("^(?:"+M+")$","i"),needsContext:new RegExp("^[\\x20\\t\\r\\n\\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\([\\x20\\t\\r\\n\\f]*((?:-\\d)?\\d*)[\\x20\\t\\r\\n\\f]*\\)|)(?=[^-]|$)","i")},J=/HTML$/i,X=/^(?:input|select|textarea|button)$/i,K=/^h\d$/i,G=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}[\\x20\\t\\r\\n\\f]?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,oe=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){d()},ae=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{A.apply(T=I.call(S.childNodes),S.childNodes),T[S.childNodes.length].nodeType}catch(e){A={apply:T.length?function(e,t){j.apply(e,I.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function le(e,t,r,o){var i,l,s,c,f,h,v,g=t&&t.ownerDocument,S=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==S&&9!==S&&11!==S)return r;if(!o&&(d(t),t=t||p,m)){if(11!==S&&(f=Z.exec(e)))if(i=f[1]){if(9===S){if(!(s=t.getElementById(i)))return r;if(s.id===i)return r.push(s),r}else if(g&&(s=g.getElementById(i))&&b(t,s)&&s.id===i)return r.push(s),r}else{if(f[2])return A.apply(r,t.getElementsByTagName(e)),r;if((i=f[3])&&n.getElementsByClassName&&t.getElementsByClassName)return A.apply(r,t.getElementsByClassName(i)),r}if(n.qsa&&!_[e+" "]&&(!y||!y.test(e))&&(1!==S||"object"!==t.nodeName.toLowerCase())){if(v=e,g=t,1===S&&(Q.test(e)||W.test(e))){for((g=ee.test(e)&&ve(t.parentNode)||t)===t&&n.scope||((c=t.getAttribute("id"))?c=c.replace(re,oe):t.setAttribute("id",c=w)),l=(h=a(e)).length;l--;)h[l]=(c?"#"+c:":scope")+" "+be(h[l]);v=h.join(",")}try{return A.apply(r,g.querySelectorAll(v)),r}catch(t){_(e,!0)}finally{c===w&&t.removeAttribute("id")}}}return u(e.replace(H,"$1"),t,r,o)}function ue(){var e=[];return function t(n,o){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=o}}function se(e){return e[w]=!0,e}function ce(e){var t=p.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function fe(e,t){for(var n=e.split("|"),o=n.length;o--;)r.attrHandle[n[o]]=t}function de(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function pe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&ae(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ye(e){return se((function(t){return t=+t,se((function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))}))}))}function ve(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=le.support={},i=le.isXML=function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!J.test(t||n&&n.nodeName||"HTML")},d=le.setDocument=function(e){var t,o,a=e?e.ownerDocument||e:S;return a!=p&&9===a.nodeType&&a.documentElement?(h=(p=a).documentElement,m=!i(p),S!=p&&(o=p.defaultView)&&o.top!==o&&(o.addEventListener?o.addEventListener("unload",ie,!1):o.attachEvent&&o.attachEvent("onunload",ie)),n.scope=ce((function(e){return h.appendChild(e).appendChild(p.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=ce((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ce((function(e){return e.appendChild(p.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=G.test(p.getElementsByClassName),n.getById=ce((function(e){return h.appendChild(e).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],y=[],(n.qsa=G.test(p.querySelectorAll))&&(ce((function(e){var t;h.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&y.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll("[selected]").length||y.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|"+M+")"),e.querySelectorAll("[id~="+w+"-]").length||y.push("~="),(t=p.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||y.push("\\[[\\x20\\t\\r\\n\\f]*name[\\x20\\t\\r\\n\\f]*=[\\x20\\t\\r\\n\\f]*(?:''|\"\")"),e.querySelectorAll(":checked").length||y.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||y.push(".#.+[+~]"),e.querySelectorAll("\\\f"),y.push("[\\r\\n\\f]")})),ce((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=p.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&y.push("name[\\x20\\t\\r\\n\\f]*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&y.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&y.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),y.push(",.*:")}))),(n.matchesSelector=G.test(g=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ce((function(e){n.disconnectedMatch=g.call(e,"*"),g.call(e,"[s!='']:x"),v.push("!=",q)})),y=y.length&&new RegExp(y.join("|")),v=v.length&&new RegExp(v.join("|")),t=G.test(h.compareDocumentPosition),b=t||G.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},R=t?function(e,t){if(e===t)return f=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e==p||e.ownerDocument==S&&b(S,e)?-1:t==p||t.ownerDocument==S&&b(S,t)?1:c?L(c,e)-L(c,t):0:4&r?-1:1)}:function(e,t){if(e===t)return f=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,a=[e],l=[t];if(!o||!i)return e==p?-1:t==p?1:o?-1:i?1:c?L(c,e)-L(c,t):0;if(o===i)return de(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;a[r]===l[r];)r++;return r?de(a[r],l[r]):a[r]==S?-1:l[r]==S?1:0},p):p},le.matches=function(e,t){return le(e,null,null,t)},le.matchesSelector=function(e,t){if(d(e),n.matchesSelector&&m&&!_[t+" "]&&(!v||!v.test(t))&&(!y||!y.test(t)))try{var r=g.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){_(t,!0)}return le(t,p,null,[e]).length>0},le.contains=function(e,t){return(e.ownerDocument||e)!=p&&d(e),b(e,t)},le.attr=function(e,t){(e.ownerDocument||e)!=p&&d(e);var o=r.attrHandle[t.toLowerCase()],i=o&&P.call(r.attrHandle,t.toLowerCase())?o(e,t,!m):void 0;return void 0!==i?i:n.attributes||!m?e.getAttribute(t):(i=e.getAttributeNode(t))&&i.specified?i.value:null},le.escape=function(e){return(e+"").replace(re,oe)},le.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},le.uniqueSort=function(e){var t,r=[],o=0,i=0;if(f=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(R),f){for(;t=e[i++];)t===e[i]&&(o=r.push(i));for(;o--;)e.splice(r[o],1)}return c=null,e},o=le.getText=function(e){var t,n="",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r++];)n+=o(t);return n},(r=le.selectors={cacheLength:50,createPseudo:se,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||le.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&le.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=a(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=x[e+" "];return t||(t=new RegExp("(^|[\\x20\\t\\r\\n\\f])"+e+"("+D+"|$)"))&&x(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var o=le.attr(r,e);return null==o?"!="===t:!t||(o+="","="===t?o===n:"!="===t?o!==n:"^="===t?n&&0===o.indexOf(n):"*="===t?n&&o.indexOf(n)>-1:"$="===t?n&&o.slice(-n.length)===n:"~="===t?(" "+o.replace(F," ")+" ").indexOf(n)>-1:"|="===t&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),l="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var s,c,f,d,p,h,m=i!==a?"nextSibling":"previousSibling",y=t.parentNode,v=l&&t.nodeName.toLowerCase(),g=!u&&!l,b=!1;if(y){if(i){for(;m;){for(d=t;d=d[m];)if(l?d.nodeName.toLowerCase()===v:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?y.firstChild:y.lastChild],a&&g){for(b=(p=(s=(c=(f=(d=y)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===E&&s[1])&&s[2],d=p&&y.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[E,p,b];break}}else if(g&&(b=p=(s=(c=(f=(d=t)[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]||[])[0]===E&&s[1]),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((l?d.nodeName.toLowerCase()!==v:1!==d.nodeType)||!++b||(g&&((c=(f=d[w]||(d[w]={}))[d.uniqueID]||(f[d.uniqueID]={}))[e]=[E,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,t){var n,o=r.pseudos[e]||r.setFilters[e.toLowerCase()]||le.error("unsupported pseudo: "+e);return o[w]?o(t):o.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?se((function(e,n){for(var r,i=o(e,t),a=i.length;a--;)e[r=L(e,i[a])]=!(n[r]=i[a])})):function(e){return o(e,0,n)}):o}},pseudos:{not:se((function(e){var t=[],n=[],r=l(e.replace(H,"$1"));return r[w]?se((function(e,t,n,o){for(var i,a=r(e,null,o,[]),l=e.length;l--;)(i=a[l])&&(e[l]=!(t[l]=i))})):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}})),has:se((function(e){return function(t){return le(e,t).length>0}})),contains:se((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||o(t)).indexOf(e)>-1}})),lang:se((function(e){return $.test(e||"")||le.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return K.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ye((function(){return[0]})),last:ye((function(e,t){return[t-1]})),eq:ye((function(e,t,n){return[n<0?n+t:n]})),even:ye((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ye((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ye((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:ye((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=pe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ge(){}function be(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function we(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,l=k++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var s,c,f,d=[E,l];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(c=(f=t[w]||(t[w]={}))[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===E&&s[1]===l)return d[2]=s[2];if(c[i]=d,d[2]=e(t,n,u))return!0}return!1}}function Se(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function Ee(e,t,n,r,o){for(var i,a=[],l=0,u=e.length,s=null!=t;l<u;l++)(i=e[l])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(l)));return a}function ke(e,t,n,r,o,i){return r&&!r[w]&&(r=ke(r)),o&&!o[w]&&(o=ke(o,i)),se((function(i,a,l,u){var s,c,f,d=[],p=[],h=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)le(e,t[r],n);return n}(t||"*",l.nodeType?[l]:l,[]),y=!e||!i&&t?m:Ee(m,d,e,l,u),v=n?o||(i?e:h||r)?[]:a:y;if(n&&n(y,v,l,u),r)for(s=Ee(v,p),r(s,[],l,u),c=s.length;c--;)(f=s[c])&&(v[p[c]]=!(y[p[c]]=f));if(i){if(o||e){if(o){for(s=[],c=v.length;c--;)(f=v[c])&&s.push(y[c]=f);o(null,v=[],s,u)}for(c=v.length;c--;)(f=v[c])&&(s=o?L(i,f):d[c])>-1&&(i[s]=!(a[s]=f))}}else v=Ee(v===a?v.splice(h,v.length):v),o?o(null,a,v,u):A.apply(a,v)}))}function xe(e){for(var t,n,o,i=e.length,a=r.relative[e[0].type],l=a||r.relative[" "],u=a?1:0,c=we((function(e){return e===t}),l,!0),f=we((function(e){return L(t,e)>-1}),l,!0),d=[function(e,n,r){var o=!a&&(r||n!==s)||((t=n).nodeType?c(e,n,r):f(e,n,r));return t=null,o}];u<i;u++)if(n=r.relative[e[u].type])d=[we(Se(d),n)];else{if((n=r.filter[e[u].type].apply(null,e[u].matches))[w]){for(o=++u;o<i&&!r.relative[e[o].type];o++);return ke(u>1&&Se(d),u>1&&be(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(H,"$1"),n,u<o&&xe(e.slice(u,o)),o<i&&xe(e=e.slice(o)),o<i&&be(e))}d.push(n)}return Se(d)}return ge.prototype=r.filters=r.pseudos,r.setFilters=new ge,a=le.tokenize=function(e,t){var n,o,i,a,l,u,s,c=C[e+" "];if(c)return t?0:c.slice(0);for(l=e,u=[],s=r.preFilter;l;){for(a in n&&!(o=U.exec(l))||(o&&(l=l.slice(o[0].length)||l),u.push(i=[])),n=!1,(o=W.exec(l))&&(n=o.shift(),i.push({value:n,type:o[0].replace(H," ")}),l=l.slice(n.length)),r.filter)!(o=Y[a].exec(l))||s[a]&&!(o=s[a](o))||(n=o.shift(),i.push({value:n,type:a,matches:o}),l=l.slice(n.length));if(!n)break}return t?l.length:l?le.error(e):C(e,u).slice(0)},l=le.compile=function(e,t){var n,o=[],i=[],l=O[e+" "];if(!l){for(t||(t=a(e)),n=t.length;n--;)(l=xe(t[n]))[w]?o.push(l):i.push(l);(l=O(e,function(e,t){var n=t.length>0,o=e.length>0,i=function(i,a,l,u,c){var f,h,y,v=0,g="0",b=i&&[],w=[],S=s,k=i||o&&r.find.TAG("*",c),x=E+=null==S?1:Math.random()||.1,C=k.length;for(c&&(s=a==p||a||c);g!==C&&null!=(f=k[g]);g++){if(o&&f){for(h=0,a||f.ownerDocument==p||(d(f),l=!m);y=e[h++];)if(y(f,a||p,l)){u.push(f);break}c&&(E=x)}n&&((f=!y&&f)&&v--,i&&b.push(f))}if(v+=g,n&&g!==v){for(h=0;y=t[h++];)y(b,w,a,l);if(i){if(v>0)for(;g--;)b[g]||w[g]||(w[g]=N.call(u));w=Ee(w)}A.apply(u,w),c&&!i&&w.length>0&&v+t.length>1&&le.uniqueSort(u)}return c&&(E=x,s=S),b};return n?se(i):i}(i,o))).selector=e}return l},u=le.select=function(e,t,n,o){var i,u,s,c,f,d="function"==typeof e&&e,p=!o&&a(e=d.selector||e);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(s=u[0]).type&&9===t.nodeType&&m&&r.relative[u[1].type]){if(!(t=(r.find.ID(s.matches[0].replace(te,ne),t)||[])[0]))return n;d&&(t=t.parentNode),e=e.slice(u.shift().value.length)}for(i=Y.needsContext.test(e)?0:u.length;i--&&(s=u[i],!r.relative[c=s.type]);)if((f=r.find[c])&&(o=f(s.matches[0].replace(te,ne),ee.test(u[0].type)&&ve(t.parentNode)||t))){if(u.splice(i,1),!(e=o.length&&be(u)))return A.apply(n,o),n;break}}return(d||l(e,p))(o,t,!m,n,!t||ee.test(e)&&ve(t.parentNode)||t),n},n.sortStable=w.split("").sort(R).join("")===w,n.detectDuplicates=!!f,d(),n.sortDetached=ce((function(e){return 1&e.compareDocumentPosition(p.createElement("fieldset"))})),ce((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||fe("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ce((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||fe("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ce((function(e){return null==e.getAttribute("disabled")}))||fe(M,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),le}(r);x.find=O,x.expr=O.selectors,x.expr[":"]=x.expr.pseudos,x.uniqueSort=x.unique=O.uniqueSort,x.text=O.getText,x.isXMLDoc=O.isXML,x.contains=O.contains,x.escapeSelector=O.escape;var _=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&x(e).is(n))break;r.push(e)}return r},R=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},P=x.expr.match.needsContext;function T(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function j(e,t,n){return v(t)?x.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return c.call(t,e)>-1!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<r;t++)if(x.contains(o[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)x.find(e,o[t],n);return r>1?x.uniqueSort(n):n},filter:function(e){return this.pushStack(j(this,e||[],!1))},not:function(e){return this.pushStack(j(this,e||[],!0))},is:function(e){return!!j(this,"string"==typeof e&&P.test(e)?x(e):e||[],!1).length}});var A,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||A,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:I.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:b,!0)),N.test(r[1])&&x.isPlainObject(t))for(r in t)v(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=b.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,A=x(b);var L=/^(?:parents|prev(?:Until|All))/,M={children:!0,contents:!0,next:!0,prev:!0};function D(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&x(e);if(!P.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?x.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?c.call(x(e),this[0]):c.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,"parentNode")},parentsUntil:function(e,t,n){return _(e,"parentNode",n)},next:function(e){return D(e,"nextSibling")},prev:function(e){return D(e,"previousSibling")},nextAll:function(e){return _(e,"nextSibling")},prevAll:function(e){return _(e,"previousSibling")},nextUntil:function(e,t,n){return _(e,"nextSibling",n)},prevUntil:function(e,t,n){return _(e,"previousSibling",n)},siblings:function(e){return R((e.parentNode||{}).firstChild,e)},children:function(e){return R(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(T(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,r){var o=x.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=x.filter(r,o)),this.length>1&&(M[e]||x.uniqueSort(o),L.test(e)&&o.reverse()),this.pushStack(o)}}));var z=/[^\x20\t\r\n\f]+/g;function B(e){return e}function q(e){throw e}function F(e,t,n,r){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return x.each(e.match(z)||[],(function(e,n){t[n]=!0})),t}(e):x.extend({},e);var t,n,r,o,i=[],a=[],l=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;l=-1)for(n=a.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},s={add:function(){return i&&(n&&!t&&(l=i.length-1,a.push(n)),function t(n){x.each(n,(function(n,r){v(r)?e.unique&&s.has(r)||i.push(r):r&&r.length&&"string"!==E(r)&&t(r)}))}(arguments),n&&!t&&u()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;(n=x.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--})),this},has:function(e){return e?x.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return s.fireWith(this,arguments),this},fired:function(){return!!r}};return s},x.extend({Deferred:function(e){var t=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],n="pending",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(n){x.each(t,(function(t,r){var o=v(e[r[4]])&&e[r[4]];i[r[1]]((function(){var e=o&&o.apply(this,arguments);e&&v(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)}))})),e=null})).promise()},then:function(e,n,o){var i=0;function a(e,t,n,o){return function(){var l=this,u=arguments,s=function(){var r,s;if(!(e<i)){if((r=n.apply(l,u))===t.promise())throw new TypeError("Thenable self-resolution");s=r&&("object"==typeof r||"function"==typeof r)&&r.then,v(s)?o?s.call(r,a(i,t,B,o),a(i,t,q,o)):(i++,s.call(r,a(i,t,B,o),a(i,t,q,o),a(i,t,B,t.notifyWith))):(n!==B&&(l=void 0,u=[r]),(o||t.resolveWith)(l,u))}},c=o?s:function(){try{s()}catch(r){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(r,c.stackTrace),e+1>=i&&(n!==q&&(l=void 0,u=[r]),t.rejectWith(l,u))}};e?c():(x.Deferred.getStackHook&&(c.stackTrace=x.Deferred.getStackHook()),r.setTimeout(c))}}return x.Deferred((function(r){t[0][3].add(a(0,r,v(o)?o:B,r.notifyWith)),t[1][3].add(a(0,r,v(e)?e:B)),t[2][3].add(a(0,r,v(n)?n:q))})).promise()},promise:function(e){return null!=e?x.extend(e,o):o}},i={};return x.each(t,(function(e,r){var a=r[2],l=r[5];o[r[1]]=a.add,l&&a.add((function(){n=l}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),i[r[0]]=function(){return i[r[0]+"With"](this===i?void 0:this,arguments),this},i[r[0]+"With"]=a.fireWith})),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=l.call(arguments),i=x.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?l.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(F(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||v(o[n]&&o[n].then)))return i.then();for(;n--;)F(o[n],a(n),i.reject);return i.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&H.test(e.name)&&r.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},x.readyException=function(e){r.setTimeout((function(){throw e}))};var U=x.Deferred();function W(){b.removeEventListener("DOMContentLoaded",W),r.removeEventListener("load",W),x.ready()}x.fn.ready=function(e){return U.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0,!0!==e&&--x.readyWait>0||U.resolveWith(b,[x]))}}),x.ready.then=U.then,"complete"===b.readyState||"loading"!==b.readyState&&!b.documentElement.doScroll?r.setTimeout(x.ready):(b.addEventListener("DOMContentLoaded",W),r.addEventListener("load",W));var Q=function(e,t,n,r,o,i,a){var l=0,u=e.length,s=null==n;if("object"===E(n))for(l in o=!0,n)Q(e,t,l,n[l],!0,i,a);else if(void 0!==r&&(o=!0,v(r)||(a=!0),s&&(a?(t.call(e,r),t=null):(s=t,t=function(e,t,n){return s.call(x(e),n)})),t))for(;l<u;l++)t(e[l],n,a?r:r.call(e[l],l,t(e[l],n)));return o?e:s?t.call(e):u?t(e[0],n):i},V=/^-ms-/,$=/-([a-z])/g;function Y(e,t){return t.toUpperCase()}function J(e){return e.replace(V,"ms-").replace($,Y)}var X=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=x.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},X(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[J(t)]=n;else for(r in t)o[J(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][J(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(J):(t=J(t))in r?[t]:t.match(z)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||x.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var G=new K,Z=new K,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return Z.hasData(e)||G.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return G.access(e,t,n)},_removeData:function(e,t){G.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Z.get(i),1===i.nodeType&&!G.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=J(r.slice(5)),ne(i,r,o[r]));G.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each((function(){Z.set(this,e)})):Q(this,(function(t){var n;if(i&&void 0===t)return void 0!==(n=Z.get(i,e))||void 0!==(n=ne(i,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=G.get(e,t),n&&(!r||Array.isArray(n)?r=G.access(e,t,x.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=x.queue(e,t),r=n.length,o=n.shift(),i=x._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,(function(){x.dequeue(e,t)}),i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return G.get(e,n)||G.access(e,n,{empty:x.Callbacks("once memory").add((function(){G.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=x.Deferred(),i=this,a=this.length,l=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=G.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(l));return l(),o.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,oe=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],ae=b.documentElement,le=function(e){return x.contains(e.ownerDocument,e)},ue={composed:!0};ae.getRootNode&&(le=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(ue)===e.ownerDocument});var se=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&le(e)&&"none"===x.css(e,"display")};function ce(e,t,n,r){var o,i,a=20,l=r?function(){return r.cur()}:function(){return x.css(e,t,"")},u=l(),s=n&&n[3]||(x.cssNumber[t]?"":"px"),c=e.nodeType&&(x.cssNumber[t]||"px"!==s&&+u)&&oe.exec(x.css(e,t));if(c&&c[3]!==s){for(u/=2,s=s||c[3],c=+u||1;a--;)x.style(e,t,c+s),(1-i)*(1-(i=l()/u||.5))<=0&&(a=0),c/=i;c*=2,x.style(e,t,c+s),n=n||[]}return n&&(c=+c||+u||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}var fe={};function de(e){var t,n=e.ownerDocument,r=e.nodeName,o=fe[r];return o||(t=n.body.appendChild(n.createElement(r)),o=x.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),fe[r]=o,o)}function pe(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=G.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&se(r)&&(o[i]=de(r))):"none"!==n&&(o[i]="none",G.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}x.fn.extend({show:function(){return pe(this,!0)},hide:function(){return pe(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){se(this)?x(this).show():x(this).hide()}))}});var he,me,ye=/^(?:checkbox|radio)$/i,ve=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i;he=b.createDocumentFragment().appendChild(b.createElement("div")),(me=b.createElement("input")).setAttribute("type","radio"),me.setAttribute("checked","checked"),me.setAttribute("name","t"),he.appendChild(me),y.checkClone=he.cloneNode(!0).cloneNode(!0).lastChild.checked,he.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!he.cloneNode(!0).lastChild.defaultValue,he.innerHTML="<option></option>",y.option=!!he.lastChild;var be={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&T(e,t)?x.merge([e],n):n}function Se(e,t){for(var n=0,r=e.length;n<r;n++)G.set(e[n],"globalEval",!t||G.get(t[n],"globalEval"))}be.tbody=be.tfoot=be.colgroup=be.caption=be.thead,be.th=be.td,y.option||(be.optgroup=be.option=[1,"<select multiple='multiple'>","</select>"]);var Ee=/<|&#?\w+;/;function ke(e,t,n,r,o){for(var i,a,l,u,s,c,f=t.createDocumentFragment(),d=[],p=0,h=e.length;p<h;p++)if((i=e[p])||0===i)if("object"===E(i))x.merge(d,i.nodeType?[i]:i);else if(Ee.test(i)){for(a=a||f.appendChild(t.createElement("div")),l=(ve.exec(i)||["",""])[1].toLowerCase(),u=be[l]||be._default,a.innerHTML=u[1]+x.htmlPrefilter(i)+u[2],c=u[0];c--;)a=a.lastChild;x.merge(d,a.childNodes),(a=f.firstChild).textContent=""}else d.push(t.createTextNode(i));for(f.textContent="",p=0;i=d[p++];)if(r&&x.inArray(i,r)>-1)o&&o.push(i);else if(s=le(i),a=we(f.appendChild(i),"script"),s&&Se(a),n)for(c=0;i=a[c++];)ge.test(i.type||"")&&n.push(i);return f}var xe=/^([^.]*)(?:\.(.+)|)/;function Ce(){return!0}function Oe(){return!1}function _e(e,t){return e===function(){try{return b.activeElement}catch(e){}}()==("focus"===t)}function Re(e,t,n,r,o,i){var a,l;if("object"==typeof t){for(l in"string"!=typeof n&&(r=r||n,n=void 0),t)Re(e,l,n,r,t[l],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Oe;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return x().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=x.guid++)),e.each((function(){x.event.add(this,t,o,r,n)}))}function Pe(e,t,n){n?(G.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=G.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=l.call(arguments),G.set(this,t,i),r=n(this,t),this[t](),i!==(o=G.get(this,t))||r?G.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o&&o.value}else i.length&&(G.set(this,t,{value:x.event.trigger(x.extend(i[0],x.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===G.get(e,t)&&x.event.add(e,t,Ce)}x.event={global:{},add:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,y=G.get(e);if(X(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&x.find.matchesSelector(ae,o),n.guid||(n.guid=x.guid++),(u=y.events)||(u=y.events=Object.create(null)),(a=y.handle)||(a=y.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),s=(t=(t||"").match(z)||[""]).length;s--;)p=m=(l=xe.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p&&(f=x.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=x.event.special[p]||{},c=x.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=u[p])||((d=u[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,c):d.push(c),x.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,l,u,s,c,f,d,p,h,m,y=G.hasData(e)&&G.get(e);if(y&&(u=y.events)){for(s=(t=(t||"").match(z)||[""]).length;s--;)if(p=m=(l=xe.exec(t[s])||[])[1],h=(l[2]||"").split(".").sort(),p){for(f=x.event.special[p]||{},d=u[p=(r?f.delegateType:f.bindType)||p]||[],l=l[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)c=d[i],!o&&m!==c.origType||n&&n.guid!==c.guid||l&&!l.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,y.handle)||x.removeEvent(e,p,y.handle),delete u[p])}else for(p in u)x.event.remove(e,p+t[s],n,r,!0);x.isEmptyObject(u)&&G.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,l=new Array(arguments.length),u=x.event.fix(e),s=(G.get(this,"events")||Object.create(null))[u.type]||[],c=x.event.special[u.type]||{};for(l[0]=u,t=1;t<arguments.length;t++)l[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=x.event.handlers.call(this,u,s),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((x.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,l=[],u=t.delegateCount,s=e.target;if(u&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+" "]&&(a[o]=r.needsContext?x(o,this).index(s)>-1:x.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&l.push({elem:s,handlers:i})}return s=this,u<t.length&&l.push({elem:s,handlers:t.slice(u)}),l},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:v(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ye.test(t.type)&&t.click&&T(t,"input")&&Pe(t,"click",Ce),!1},trigger:function(e){var t=this||e;return ye.test(t.type)&&t.click&&T(t,"input")&&Pe(t,"click"),!0},_default:function(e){var t=e.target;return ye.test(t.type)&&t.click&&T(t,"input")&&G.get(t,"click")||T(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Ce:Oe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0},x.Event.prototype={constructor:x.Event,isDefaultPrevented:Oe,isPropagationStopped:Oe,isImmediatePropagationStopped:Oe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Ce,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Ce,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Ce,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return Pe(this,e,_e),!1},trigger:function(){return Pe(this,e),!0},_default:function(){return!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,o=e.relatedTarget,i=e.handleObj;return o&&(o===r||x.contains(r,o))||(e.type=i.origType,n=i.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,r){return Re(this,e,t,n,r)},one:function(e,t,n,r){return Re(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Oe),this.each((function(){x.event.remove(this,e,n,t)}))}});var Te=/<script|<style|<link/i,Ne=/checked\s*(?:[^=]|=\s*.checked.)/i,je=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ae(e,t){return T(e,"table")&&T(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Le(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Me(e,t){var n,r,o,i,a,l;if(1===t.nodeType){if(G.hasData(e)&&(l=G.get(e).events))for(o in G.remove(t,"handle events"),l)for(n=0,r=l[o].length;n<r;n++)x.event.add(t,o,l[o][n]);Z.hasData(e)&&(i=Z.access(e),a=x.extend({},i),Z.set(t,a))}}function De(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ye.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function ze(e,t,n,r){t=u(t);var o,i,a,l,s,c,f=0,d=e.length,p=d-1,h=t[0],m=v(h);if(m||d>1&&"string"==typeof h&&!y.checkClone&&Ne.test(h))return e.each((function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),ze(i,t,n,r)}));if(d&&(i=(o=ke(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(l=(a=x.map(we(o,"script"),Ie)).length;f<d;f++)s=o,f!==p&&(s=x.clone(s,!0,!0),l&&x.merge(a,we(s,"script"))),n.call(e[f],s,f);if(l)for(c=a[a.length-1].ownerDocument,x.map(a,Le),f=0;f<l;f++)s=a[f],ge.test(s.type||"")&&!G.access(s,"globalEval")&&x.contains(c,s)&&(s.src&&"module"!==(s.type||"").toLowerCase()?x._evalUrl&&!s.noModule&&x._evalUrl(s.src,{nonce:s.nonce||s.getAttribute("nonce")},c):S(s.textContent.replace(je,""),s,c))}return e}function Be(e,t,n){for(var r,o=t?x.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||x.cleanData(we(r)),r.parentNode&&(n&&le(r)&&Se(we(r,"script")),r.parentNode.removeChild(r));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,l=e.cloneNode(!0),u=le(e);if(!(y.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(a=we(l),r=0,o=(i=we(e)).length;r<o;r++)De(i[r],a[r]);if(t)if(n)for(i=i||we(e),a=a||we(l),r=0,o=i.length;r<o;r++)Me(i[r],a[r]);else Me(e,l);return(a=we(l,"script")).length>0&&Se(a,!u&&we(e,"script")),l},cleanData:function(e){for(var t,n,r,o=x.event.special,i=0;void 0!==(n=e[i]);i++)if(X(n)){if(t=n[G.expando]){if(t.events)for(r in t.events)o[r]?x.event.remove(n,r):x.removeEvent(n,r,t.handle);n[G.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),x.fn.extend({detach:function(e){return Be(this,e,!0)},remove:function(e){return Be(this,e)},text:function(e){return Q(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return ze(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ae(this,e).appendChild(e)}))},prepend:function(){return ze(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ae(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return ze(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return ze(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return Q(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Te.test(e)&&!be[(ve.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return ze(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,r=[],o=x(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),x(o[a])[t](n),s.apply(r,n.get());return this.pushStack(r)}}));var qe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Fe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},He=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ue=new RegExp(ie.join("|"),"i");function We(e,t,n){var r,o,i,a,l=e.style;return(n=n||Fe(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||le(e)||(a=x.style(e,t)),!y.pixelBoxStyles()&&qe.test(a)&&Ue.test(t)&&(r=l.width,o=l.minWidth,i=l.maxWidth,l.minWidth=l.maxWidth=l.width=a,a=n.width,l.width=r,l.minWidth=o,l.maxWidth=i)),void 0!==a?a+"":a}function Qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){s.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ae.appendChild(s).appendChild(c);var e=r.getComputedStyle(c);n="1%"!==e.top,u=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),o=36===t(e.width),c.style.position="absolute",i=12===t(c.offsetWidth/3),ae.removeChild(s),c=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,a,l,u,s=b.createElement("div"),c=b.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===c.style.backgroundClip,x.extend(y,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==l&&(e=b.createElement("table"),t=b.createElement("tr"),n=b.createElement("div"),e.style.cssText="position:absolute;left:-11111px;border-collapse:separate",t.style.cssText="border:1px solid",t.style.height="1px",n.style.height="9px",n.style.display="block",ae.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),l=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ae.removeChild(e)),l}}))}();var Ve=["Webkit","Moz","ms"],$e=b.createElement("div").style,Ye={};function Je(e){return x.cssProps[e]||Ye[e]||(e in $e?e:Ye[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ve.length;n--;)if((e=Ve[n]+t)in $e)return e}(e)||e)}var Xe=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Ge={position:"absolute",visibility:"hidden",display:"block"},Ze={letterSpacing:"0",fontWeight:"400"};function et(e,t,n){var r=oe.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function tt(e,t,n,r,o,i){var a="width"===t?1:0,l=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=x.css(e,n+ie[a],!0,o)),r?("content"===n&&(u-=x.css(e,"padding"+ie[a],!0,o)),"margin"!==n&&(u-=x.css(e,"border"+ie[a]+"Width",!0,o))):(u+=x.css(e,"padding"+ie[a],!0,o),"padding"!==n?u+=x.css(e,"border"+ie[a]+"Width",!0,o):l+=x.css(e,"border"+ie[a]+"Width",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-u-l-.5))||0),u}function nt(e,t,n){var r=Fe(e),o=(!y.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,r),i=o,a=We(e,t,r),l="offset"+t[0].toUpperCase()+t.slice(1);if(qe.test(a)){if(!n)return a;a="auto"}return(!y.boxSizingReliable()&&o||!y.reliableTrDimensions()&&T(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===x.css(e,"display",!1,r))&&e.getClientRects().length&&(o="border-box"===x.css(e,"boxSizing",!1,r),(i=l in e)&&(a=e[l])),(a=parseFloat(a)||0)+tt(e,t,n||(o?"border":"content"),i,r,a)+"px"}function rt(e,t,n,r,o){return new rt.prototype.init(e,t,n,r,o)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=We(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,l=J(t),u=Ke.test(t),s=e.style;if(u||(t=Je(l)),a=x.cssHooks[t]||x.cssHooks[l],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:s[t];"string"==(i=typeof n)&&(o=oe.exec(n))&&o[1]&&(n=ce(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||u||(n+=o&&o[3]||(x.cssNumber[l]?"":"px")),y.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(u?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var o,i,a,l=J(t);return Ke.test(t)||(t=Je(l)),(a=x.cssHooks[t]||x.cssHooks[l])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=We(e,t,r)),"normal"===o&&t in Ze&&(o=Ze[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,r){if(n)return!Xe.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?nt(e,t,r):He(e,Ge,(function(){return nt(e,t,r)}))},set:function(e,n,r){var o,i=Fe(e),a=!y.scrollboxSize()&&"absolute"===i.position,l=(a||r)&&"border-box"===x.css(e,"boxSizing",!1,i),u=r?tt(e,t,r,l,i):0;return l&&a&&(u-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-tt(e,t,"border",!1,i)-.5)),u&&(o=oe.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),et(0,n,u)}}})),x.cssHooks.marginLeft=Qe(y.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(We(e,"marginLeft"))||e.getBoundingClientRect().left-He(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+ie[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(x.cssHooks[e+t].set=et)})),x.fn.extend({css:function(e,t){return Q(this,(function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=Fe(e),o=t.length;a<o;a++)i[t[a]]=x.css(e,t[a],!1,r);return i}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,arguments.length>1)}}),x.Tween=rt,rt.prototype={constructor:rt,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(x.cssNumber[n]?"":"px")},cur:function(){var e=rt.propHooks[this.prop];return e&&e.get?e.get(this):rt.propHooks._default.get(this)},run:function(e){var t,n=rt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):rt.propHooks._default.set(this),this}},rt.prototype.init.prototype=rt.prototype,rt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Je(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}},rt.propHooks.scrollTop=rt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},x.fx=rt.prototype.init,x.fx.step={};var ot,it,at=/^(?:toggle|show|hide)$/,lt=/queueHooks$/;function ut(){it&&(!1===b.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ut):r.setTimeout(ut,x.fx.interval),x.fx.tick())}function st(){return r.setTimeout((function(){ot=void 0})),ot=Date.now()}function ct(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o["margin"+(n=ie[r])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function ft(e,t,n){for(var r,o=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function dt(e,t,n){var r,o,i=0,a=dt.prefilters.length,l=x.Deferred().always((function(){delete u.elem})),u=function(){if(o)return!1;for(var t=ot||st(),n=Math.max(0,s.startTime+s.duration-t),r=1-(n/s.duration||0),i=0,a=s.tweens.length;i<a;i++)s.tweens[i].run(r);return l.notifyWith(e,[s,r,n]),r<1&&a?n:(a||l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s]),!1)},s=l.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:ot||st(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(l.notifyWith(e,[s,1,0]),l.resolveWith(e,[s,t])):l.rejectWith(e,[s,t]),this}}),c=s.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=J(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=x.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=dt.prefilters[i].call(s,e,c,s.opts))return v(r.stop)&&(x._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return x.map(c,ft,s),v(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),x.fx.timer(x.extend(u,{elem:e,anim:s,queue:s.opts.queue})),s}x.Animation=x.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return ce(n.elem,e,oe.exec(t),n),n}]},tweener:function(e,t){v(e)?(t=e,e=["*"]):e=e.match(z);for(var n,r=0,o=e.length;r<o;r++)n=e[r],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,l,u,s,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&se(e),y=G.get(e,"fxshow");for(r in n.queue||(null==(a=x._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,l=a.empty.fire,a.empty.fire=function(){a.unqueued||l()}),a.unqueued++,d.always((function(){d.always((function(){a.unqueued--,x.queue(e,"fx").length||a.empty.fire()}))}))),t)if(o=t[r],at.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!y||void 0===y[r])continue;m=!0}p[r]=y&&y[r]||x.style(e,r)}if((u=!x.isEmptyObject(t))||!x.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=y&&y.display)&&(s=G.get(e,"display")),"none"===(c=x.css(e,"display"))&&(s?c=s:(pe([e],!0),s=e.style.display||s,c=x.css(e,"display"),pe([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===x.css(e,"float")&&(u||(d.done((function(){h.display=s})),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),u=!1,p)u||(y?"hidden"in y&&(m=y.hidden):y=G.access(e,"fxshow",{display:s}),i&&(y.hidden=!m),m&&pe([e],!0),d.done((function(){for(r in m||pe([e]),G.remove(e,"fxshow"),p)x.style(e,r,p[r])}))),u=ft(m?y[r]:0,r,d),r in y||(y[r]=u.start,m&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),x.speed=function(e,t,n){var r=e&&"object"==typeof e?x.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return x.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in x.fx.speeds?r.duration=x.fx.speeds[r.duration]:r.duration=x.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(se).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=x.isEmptyObject(e),i=x.speed(t,n,r),a=function(){var t=dt(this,x.extend({},e),i);(o||G.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,o=null!=e&&e+"queueHooks",i=x.timers,a=G.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&lt.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=G.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=x.timers,a=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ct(t,!0),e,r,o)}})),x.each({slideDown:ct("show"),slideUp:ct("hide"),slideToggle:ct("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(ot=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),ot=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){it||(it=!0,ut())},x.fx.stop=function(){it=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,t){return e=x.fx&&x.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}}))},function(){var e=b.createElement("input"),t=b.createElement("select").appendChild(b.createElement("option"));e.type="checkbox",y.checkOn=""!==e.value,y.optSelected=t.selected,(e=b.createElement("input")).value="t",e.type="radio",y.radioValue="t"===e.value}();var pt,ht=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return Q(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?x.prop(e,t,n):(1===i&&x.isXMLDoc(e)||(o=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?pt:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=x.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!y.radioValue&&"radio"===t&&T(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(z);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),pt={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ht[t]||x.find.attr;ht[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=ht[a],ht[a]=o,o=null!=n(e,t,r)?a:null,ht[a]=i),o}}));var mt=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function vt(e){return(e.match(z)||[]).join(" ")}function gt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(z)||[]}x.fn.extend({prop:function(e,t){return Q(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&x.isXMLDoc(e)||(t=x.propFix[t]||t,o=x.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,r,o,i,a,l,u=0;if(v(e))return this.each((function(t){x(this).addClass(e.call(this,t,gt(this)))}));if((t=bt(e)).length)for(;n=this[u++];)if(o=gt(n),r=1===n.nodeType&&" "+vt(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");o!==(l=vt(r))&&n.setAttribute("class",l)}return this},removeClass:function(e){var t,n,r,o,i,a,l,u=0;if(v(e))return this.each((function(t){x(this).removeClass(e.call(this,t,gt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[u++];)if(o=gt(n),r=1===n.nodeType&&" "+vt(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");o!==(l=vt(r))&&n.setAttribute("class",l)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):v(e)?this.each((function(n){x(this).toggleClass(e.call(this,n,gt(this),t),t)})):this.each((function(){var t,o,i,a;if(r)for(o=0,i=x(this),a=bt(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=gt(this))&&G.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":G.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+vt(gt(n))+" ").indexOf(t)>-1)return!0;return!1}});var wt=/\r/g;x.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=v(e),this.each((function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,x(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=x.map(o,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))}))):o?(t=x.valHooks[o.type]||x.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(wt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:vt(x.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!T(n.parentNode,"optgroup"))){if(t=x(n).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var n,r,o=e.options,i=x.makeArray(t),a=o.length;a--;)((r=o[a]).selected=x.inArray(x.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=x.inArray(x(e).val(),t)>-1}},y.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),y.focusin="onfocusin"in r;var St=/^(?:focusinfocus|focusoutblur)$/,Et=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(e,t,n,o){var i,a,l,u,s,c,f,d,h=[n||b],m=p.call(e,"type")?e.type:e,y=p.call(e,"namespace")?e.namespace.split("."):[];if(a=d=l=n=n||b,3!==n.nodeType&&8!==n.nodeType&&!St.test(m+x.event.triggered)&&(m.indexOf(".")>-1&&(y=m.split("."),m=y.shift(),y.sort()),s=m.indexOf(":")<0&&"on"+m,(e=e[x.expando]?e:new x.Event(m,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=y.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+y.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:x.makeArray(t,[e]),f=x.event.special[m]||{},o||!f.trigger||!1!==f.trigger.apply(n,t))){if(!o&&!f.noBubble&&!g(n)){for(u=f.delegateType||m,St.test(u+m)||(a=a.parentNode);a;a=a.parentNode)h.push(a),l=a;l===(n.ownerDocument||b)&&h.push(l.defaultView||l.parentWindow||r)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)d=a,e.type=i>1?u:f.bindType||m,(c=(G.get(a,"events")||Object.create(null))[e.type]&&G.get(a,"handle"))&&c.apply(a,t),(c=s&&a[s])&&c.apply&&X(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!X(n)||s&&v(n[m])&&!g(n)&&((l=n[s])&&(n[s]=null),x.event.triggered=m,e.isPropagationStopped()&&d.addEventListener(m,Et),n[m](),e.isPropagationStopped()&&d.removeEventListener(m,Et),x.event.triggered=void 0,l&&(n[s]=l)),e.result}},simulate:function(e,t,n){var r=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(r,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),y.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=G.access(r,t);o||r.addEventListener(e,n,!0),G.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=G.access(r,t)-1;o?G.access(r,t,o):(r.removeEventListener(e,n,!0),G.remove(r,t))}}}));var kt=r.location,xt={guid:Date.now()},Ct=/\?/;x.parseXML=function(e){var t,n;if(!e||"string"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,"text/xml")}catch(e){}return n=t&&t.getElementsByTagName("parsererror")[0],t&&!n||x.error("Invalid XML: "+(n?x.map(n.childNodes,(function(e){return e.textContent})).join("\n"):e)),t};var Ot=/\[\]$/,_t=/\r?\n/g,Rt=/^(?:submit|button|image|reset|file)$/i,Pt=/^(?:input|select|textarea|keygen)/i;function Tt(e,t,n,r){var o;if(Array.isArray(t))x.each(t,(function(t,o){n||Ot.test(e)?r(e,o):Tt(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)}));else if(n||"object"!==E(t))r(e,t);else for(o in t)Tt(e+"["+o+"]",t[o],n,r)}x.param=function(e,t){var n,r=[],o=function(e,t){var n=v(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){o(this.name,this.value)}));else for(n in e)Tt(n,e[n],t,o);return r.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Pt.test(this.nodeName)&&!Rt.test(e)&&(this.checked||!ye.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(_t,"\r\n")}})):{name:t.name,value:n.replace(_t,"\r\n")}})).get()}});var Nt=/%20/g,jt=/#.*$/,At=/([?&])_=[^&]*/,It=/^(.*?):[ \t]*([^\r\n]*)$/gm,Lt=/^(?:GET|HEAD)$/,Mt=/^\/\//,Dt={},zt={},Bt="*/".concat("*"),qt=b.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(z)||[];if(v(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Ht(e,t,n,r){var o={},i=e===zt;function a(l){var u;return o[l]=!0,x.each(e[l]||[],(function(e,l){var s=l(t,n,r);return"string"!=typeof s||i||o[s]?i?!(u=s):void 0:(t.dataTypes.unshift(s),a(s),!1)})),u}return a(t.dataTypes[0])||!o["*"]&&a("*")}function Ut(e,t){var n,r,o=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}qt.href=kt.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:kt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(kt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Bt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ut(Ut(e,x.ajaxSettings),t):Ut(x.ajaxSettings,e)},ajaxPrefilter:Ft(Dt),ajaxTransport:Ft(zt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,i,a,l,u,s,c,f,d,p=x.ajaxSetup({},t),h=p.context||p,m=p.context&&(h.nodeType||h.jquery)?x(h):x.event,y=x.Deferred(),v=x.Callbacks("once memory"),g=p.statusCode||{},w={},S={},E="canceled",k={readyState:0,getResponseHeader:function(e){var t;if(s){if(!a)for(a={};t=It.exec(i);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return s?i:null},setRequestHeader:function(e,t){return null==s&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==s&&(p.mimeType=e),this},statusCode:function(e){var t;if(e)if(s)k.always(e[k.status]);else for(t in e)g[t]=[g[t],e[t]];return this},abort:function(e){var t=e||E;return n&&n.abort(t),C(0,t),this}};if(y.promise(k),p.url=((e||p.url||kt.href)+"").replace(Mt,kt.protocol+"//"),p.type=t.method||t.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(z)||[""],null==p.crossDomain){u=b.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=qt.protocol+"//"+qt.host!=u.protocol+"//"+u.host}catch(e){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=x.param(p.data,p.traditional)),Ht(Dt,p,t,k),s)return k;for(f in(c=x.event&&p.global)&&0==x.active++&&x.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Lt.test(p.type),o=p.url.replace(jt,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Nt,"+")):(d=p.url.slice(o.length),p.data&&(p.processData||"string"==typeof p.data)&&(o+=(Ct.test(o)?"&":"?")+p.data,delete p.data),!1===p.cache&&(o=o.replace(At,"$1"),d=(Ct.test(o)?"&":"?")+"_="+xt.guid+++d),p.url=o+d),p.ifModified&&(x.lastModified[o]&&k.setRequestHeader("If-Modified-Since",x.lastModified[o]),x.etag[o]&&k.setRequestHeader("If-None-Match",x.etag[o])),(p.data&&p.hasContent&&!1!==p.contentType||t.contentType)&&k.setRequestHeader("Content-Type",p.contentType),k.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Bt+"; q=0.01":""):p.accepts["*"]),p.headers)k.setRequestHeader(f,p.headers[f]);if(p.beforeSend&&(!1===p.beforeSend.call(h,k,p)||s))return k.abort();if(E="abort",v.add(p.complete),k.done(p.success),k.fail(p.error),n=Ht(zt,p,t,k)){if(k.readyState=1,c&&m.trigger("ajaxSend",[k,p]),s)return k;p.async&&p.timeout>0&&(l=r.setTimeout((function(){k.abort("timeout")}),p.timeout));try{s=!1,n.send(w,C)}catch(e){if(s)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,a,u){var f,d,b,w,S,E=t;s||(s=!0,l&&r.clearTimeout(l),n=void 0,i=u||"",k.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(w=function(e,t,n){for(var r,o,i,a,l=e.contents,u=e.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in l)if(l[o]&&l[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+" "+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(p,k,a)),!f&&x.inArray("script",p.dataTypes)>-1&&x.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),w=function(e,t,n,r){var o,i,a,l,u,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=c.shift())if("*"===i)i=u;else if("*"!==u&&u!==i){if(!(a=s[u+" "+i]||s["* "+i]))for(o in s)if((l=o.split(" "))[1]===i&&(a=s[u+" "+l[0]]||s["* "+l[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=l[0],c.unshift(l[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+u+" to "+i}}}return{state:"success",data:t}}(p,w,k,f),f?(p.ifModified&&((S=k.getResponseHeader("Last-Modified"))&&(x.lastModified[o]=S),(S=k.getResponseHeader("etag"))&&(x.etag[o]=S)),204===e||"HEAD"===p.type?E="nocontent":304===e?E="notmodified":(E=w.state,d=w.data,f=!(b=w.error))):(b=E,!e&&E||(E="error",e<0&&(e=0))),k.status=e,k.statusText=(t||E)+"",f?y.resolveWith(h,[d,E,k]):y.rejectWith(h,[k,E,b]),k.statusCode(g),g=void 0,c&&m.trigger(f?"ajaxSuccess":"ajaxError",[k,p,f?d:b]),v.fireWith(h,[k,E]),c&&(m.trigger("ajaxComplete",[k,p]),--x.active||x.event.trigger("ajaxStop")))}return k},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,r,o){return v(n)&&(o=o||r,r=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:o,data:n,success:r},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(v(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return v(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=v(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Wt={0:200,1223:204},Qt=x.ajaxSettings.xhr();y.cors=!!Qt&&"withCredentials"in Qt,y.ajax=Qt=!!Qt,x.ajaxTransport((function(e){var t,n;if(y.cors||Qt&&!e.crossDomain)return{send:function(o,i){var a,l=e.xhr();if(l.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)l[a]=e.xhrFields[a];for(a in e.mimeType&&l.overrideMimeType&&l.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)l.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=n=l.onload=l.onerror=l.onabort=l.ontimeout=l.onreadystatechange=null,"abort"===e?l.abort():"error"===e?"number"!=typeof l.status?i(0,"error"):i(l.status,l.statusText):i(Wt[l.status]||l.status,l.statusText,"text"!==(l.responseType||"text")||"string"!=typeof l.responseText?{binary:l.response}:{text:l.responseText},l.getAllResponseHeaders()))}},l.onload=t(),n=l.onerror=l.ontimeout=t("error"),void 0!==l.onabort?l.onabort=n:l.onreadystatechange=function(){4===l.readyState&&r.setTimeout((function(){t&&n()}))},t=t("abort");try{l.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),b.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Vt,$t=[],Yt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=$t.pop()||x.expando+"_"+xt.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,t,n){var o,i,a,l=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(l||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,l?e[l]=e[l].replace(Yt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||x.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=r[o],r[o]=function(){a=arguments},n.always((function(){void 0===i?x(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,$t.push(o)),a&&v(i)&&i(a[0]),a=i=void 0})),"script"})),y.createHTMLDocument=((Vt=b.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(y.createHTMLDocument?((r=(t=b.implementation.createHTMLDocument("")).createElement("base")).href=b.location.href,t.head.appendChild(r)):t=b),i=!n&&[],(o=N.exec(e))?[t.createElement(o[1])]:(o=ke([e],t,i),i&&i.length&&x(i).remove(),x.merge([],o.childNodes)));var r,o,i},x.fn.load=function(e,t,n){var r,o,i,a=this,l=e.indexOf(" ");return l>-1&&(r=vt(e.slice(l)),e=e.slice(0,l)),v(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&x.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done((function(e){i=arguments,a.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)})).always(n&&function(e,t){a.each((function(){n.apply(this,i||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var r,o,i,a,l,u,s=x.css(e,"position"),c=x(e),f={};"static"===s&&(e.style.position="relative"),l=c.offset(),i=x.css(e,"top"),u=x.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+u).indexOf("auto")>-1?(a=(r=c.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),v(t)&&(t=t.call(e,n,x.extend({},l))),null!=t.top&&(f.top=t.top-l.top+a),null!=t.left&&(f.left=t.left-l.left+o),"using"in t?t.using.call(e,f):c.css(f)}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===x.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),o.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-x.css(r,"marginTop",!0),left:t.left-o.left-x.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||ae}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(r){return Q(this,(function(e,r,o){var i;if(g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o}),e,r,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=Qe(y.pixelPosition,(function(e,n){if(n)return n=We(e,t),qe.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){x.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),l=n||(!0===o||!0===i?"margin":"border");return Q(this,(function(t,n,o){var i;return g(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?x.css(t,n,l):x.style(t,n,o,l)}),t,a?o:void 0,a)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}));var Jt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),v(e))return r=l.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(l.call(arguments)))}).guid=e.guid=e.guid||x.guid++,o},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=T,x.isFunction=v,x.isWindow=g,x.camelCase=J,x.type=E,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Jt,"")},void 0===(n=function(){return x}.apply(t,[]))||(e.exports=n);var Xt=r.jQuery,Kt=r.$;return x.noConflict=function(e){return r.$===x&&(r.$=Kt),e&&r.jQuery===x&&(r.jQuery=Xt),x},void 0===o&&(r.jQuery=r.$=x),x}))},418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,l,u=o(e),s=1;s<arguments.length;s++){for(var c in a=Object(arguments[s]))n.call(a,c)&&(u[c]=a[c]);if(t){l=t(a);for(var f=0;f<l.length;f++)r.call(a,l[f])&&(u[l[f]]=a[l[f]])}}return u}},448:(e,t,n)=>{"use strict";var r=n(294),o=n(418),i=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function y(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new y(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new y(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new y(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new y(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new y(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new y(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=v.hasOwnProperty(t)?v[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);v[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)}));var S=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,E=60103,k=60106,x=60107,C=60108,O=60114,_=60109,R=60110,P=60112,T=60113,N=60120,j=60115,A=60116,I=60121,L=60128,M=60129,D=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;E=B("react.element"),k=B("react.portal"),x=B("react.fragment"),C=B("react.strict_mode"),O=B("react.profiler"),_=B("react.provider"),R=B("react.context"),P=B("react.forward_ref"),T=B("react.suspense"),N=B("react.suspense_list"),j=B("react.memo"),A=B("react.lazy"),I=B("react.block"),B("react.scope"),L=B("react.opaque.id"),M=B("react.debug_trace_mode"),D=B("react.offscreen"),z=B("react.legacy_hidden")}var q,F="function"==typeof Symbol&&Symbol.iterator;function H(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=F&&e[F]||e["@@iterator"])?e:null}function U(e){if(void 0===q)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);q=t&&t[1]||""}return"\n"+q+e}var W=!1;function Q(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,l=i.length-1;1<=a&&0<=l&&o[a]!==i[l];)l--;for(;1<=a&&0<=l;a--,l--)if(o[a]!==i[l]){if(1!==a||1!==l)do{if(a--,0>--l||o[a]!==i[l])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=l);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function V(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return Q(e.type,!1);case 11:return Q(e.type.render,!1);case 22:return Q(e.type._render,!1);case 1:return Q(e.type,!0);default:return""}}function $(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case O:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case R:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return $(e.type);case I:return $(e._render);case A:t=e._payload,e=e._init;try{return $(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function J(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=J(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=J(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function se(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ye=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function Se(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var Ee=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(Ee[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function xe(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ce(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,_e=null,Re=null;function Pe(e){if(e=Zr(e)){if("function"!=typeof Oe)throw Error(a(280));var t=e.stateNode;t&&(t=to(t),Oe(e.stateNode,e.type,t))}}function Te(e){_e?Re?Re.push(e):Re=[e]:_e=e}function Ne(){if(_e){var e=_e,t=Re;if(Re=_e=null,Pe(e),t)for(e=0;e<t.length;e++)Pe(t[e])}}function je(e,t){return e(t)}function Ae(e,t,n,r,o){return e(t,n,r,o)}function Ie(){}var Le=je,Me=!1,De=!1;function ze(){null===_e&&null===Re||(Ie(),Ne())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=to(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var qe=!1;if(f)try{var Fe={};Object.defineProperty(Fe,"passive",{get:function(){qe=!0}}),window.addEventListener("test",Fe,Fe),window.removeEventListener("test",Fe,Fe)}catch(me){qe=!1}function He(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ue=!1,We=null,Qe=!1,Ve=null,$e={onError:function(e){Ue=!0,We=e}};function Ye(e,t,n,r,o,i,a,l,u){Ue=!1,We=null,He.apply($e,arguments)}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ke(e){if(Je(e)!==e)throw Error(a(188))}function Ge(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ke(o),e;if(i===r)return Ke(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,lt=null,ut=null,st=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=Zr(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function yt(e){var t=Gr(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=Zr(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=Zr(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&vt(at)&&(at=null),null!==lt&&vt(lt)&&(lt=null),null!==ut&&vt(ut)&&(ut=null),st.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function St(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==lt&&wt(lt,e),null!==ut&&wt(ut,e),st.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)yt(n),null===n.blockedOn&&ft.shift()}function Et(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Et("Animation","AnimationEnd"),animationiteration:Et("Animation","AnimationIteration"),animationstart:Et("Animation","AnimationStart"),transitionend:Et("Transition","TransitionEnd")},xt={},Ct={};function Ot(e){if(xt[e])return xt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ct)return xt[e]=n[t];return e}f&&(Ct=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var _t=Ot("animationend"),Rt=Ot("animationiteration"),Pt=Ot("animationstart"),Tt=Ot("transitionend"),Nt=new Map,jt=new Map,At=["abort","abort",_t,"animationEnd",Rt,"animationIteration",Pt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),jt.set(r,t),Nt.set(r,o),s(o,[r])}}(0,i.unstable_now)();var Lt=8;function Mt(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function Dt(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,l=e.pingedLanes;if(0!==i)r=i,o=Lt=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=Mt(u),o=Lt):0!=(l&=i)&&(r=Mt(l),o=Lt)}else 0!=(i=n&~a)?(r=Mt(i),o=Lt):0!==l&&(r=Mt(l),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Ut(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Mt(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ut(t)),r|=e[n],t&=~o;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=qt(24&~t))?Bt(10,t):e;case 10:return 0===(e=qt(192&~t))?Bt(8,t):e;case 8:return 0===(e=qt(3584&~t))&&0===(e=qt(4186112&~t))&&(e=512),e;case 2:return 0===(t=qt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function qt(e){return e&-e}function Ft(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ht(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ut(t)]=n}var Ut=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/Qt|0)|0},Wt=Math.log,Qt=Math.LN2,Vt=i.unstable_UserBlockingPriority,$t=i.unstable_runWithPriority,Yt=!0;function Jt(e,t,n,r){Me||Ie();var o=Kt,i=Me;Me=!0;try{Ae(o,e,t,n,r)}finally{(Me=i)||ze()}}function Xt(e,t,n,r){$t(Vt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var o;if(Yt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Gt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return lt=mt(lt,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return st.set(i,mt(st.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Gt(e,t,n,r){var o=Ce(r);if(null!==(o=Gr(o))){var i=Je(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Xe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Zt?Zt.value:Zt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function ln(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,sn,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=ln(fn),pn=o({},fn,{view:0,detail:0}),hn=ln(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:On,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),yn=ln(mn),vn=ln(o({},mn,{dataTransfer:0})),gn=ln(o({},pn,{relatedTarget:0})),bn=ln(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=ln(o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}})),Sn=ln(o({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function On(){return Cn}var _n=ln(o({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:On,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}})),Rn=ln(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Pn=ln(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:On})),Tn=ln(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=ln(o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0})),jn=[9,13,27,32],An=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Ln=f&&"TextEvent"in window&&!In,Mn=f&&(!An||In&&8<In&&11>=In),Dn=String.fromCharCode(32),zn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==jn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function qn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Fn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){Te(r),0<(t=Ar(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Qn=null,Vn=null;function $n(e){Cr(e,0)}function Yn(e){if(K(eo(e)))return e}function Jn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Kn;if(f){var Gn="oninput"in document;if(!Gn){var Zn=document.createElement("div");Zn.setAttribute("oninput","return;"),Gn="function"==typeof Zn.oninput}Kn=Gn}else Kn=!1;Xn=Kn&&(!document.documentMode||9<document.documentMode)}function er(){Qn&&(Qn.detachEvent("onpropertychange",tr),Vn=Qn=null)}function tr(e){if("value"===e.propertyName&&Yn(Vn)){var t=[];if(Wn(t,Vn,e,Ce(e)),e=$n,Me)e(t);else{Me=!0;try{je(e,t)}finally{Me=!1,ze()}}}}function nr(e,t,n){"focusin"===e?(er(),Vn=n,(Qn=t).attachEvent("onpropertychange",tr)):"focusout"===e&&er()}function rr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Vn)}function or(e,t){if("click"===e)return Yn(t)}function ir(e,t){if("input"===e||"change"===e)return Yn(t)}var ar="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function ur(e,t){if(ar(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ar(e[n[r]],t[n[r]]))return!1;return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var hr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,yr=null,vr=null,gr=!1;function br(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;gr||null==mr||mr!==G(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&ur(vr,r)||(vr=r,0<(r=Ar(yr,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(At,2);for(var wr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<wr.length;Sr++)jt.set(wr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Er="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),kr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Er));function xr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Ye.apply(this,arguments),Ue){if(!Ue)throw Error(a(198));var c=We;Ue=!1,We=null,Qe||(Qe=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;xr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;xr(o,l,s),i=u}}}if(Qe)throw e=Ve,Qe=!1,Ve=null,e}function Or(e,t){var n=no(t),r=e+"__bubble";n.has(r)||(Tr(t,e,2,!1),n.add(r))}var _r="_reactListening"+Math.random().toString(36).slice(2);function Rr(e){e[_r]||(e[_r]=!0,l.forEach((function(t){kr.has(t)||Pr(t,!1,e,null),Pr(t,!0,e,null)})))}function Pr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&kr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=no(i),l=e+"__"+(t?"capture":"bubble");a.has(l)||(t&&(o|=4),Tr(i,e,o,t),a.add(l))}function Tr(e,t,n,r){var o=jt.get(t);switch(void 0===o?2:o){case 0:o=Jt;break;case 1:o=Xt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!qe||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=Gr(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(De)return e();De=!0;try{Le(e,t,n)}finally{De=!1,ze()}}((function(){var r=i,o=Ce(n),a=[];e:{var l=Nt.get(e);if(void 0!==l){var u=dn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=_n;break;case"focusin":s="focus",u=gn;break;case"focusout":s="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Pn;break;case _t:case Rt:case Pt:u=bn;break;case Tt:u=Tn;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Rn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Be(h,d))&&c.push(jr(h,m,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!Gr(s)&&!s[Xr])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?Gr(s):null)&&(s!==(f=Je(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Rn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:eo(u),p=null==s?l:eo(s),(l=new c(m,h+"leave",u,n,o)).target=f,l.relatedTarget=p,m=null,Gr(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==u&&Lr(a,l,u,c,!1),null!==s&&null!==f&&Lr(a,f,s,c,!0)}if("select"===(u=(l=r?eo(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var y=Jn;else if(Un(l))if(Xn)y=ir;else{y=rr;var v=nr}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(y=or);switch(y&&(y=y(e,r))?Wn(a,y,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&oe(l,"number",l.value)),v=r?eo(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(mr=v,yr=r,vr=null);break;case"focusout":vr=yr=mr=null;break;case"mousedown":gr=!0;break;case"contextmenu":case"mouseup":case"dragend":gr=!1,br(a,n,o);break;case"selectionchange":if(hr)break;case"keydown":case"keyup":br(a,n,o)}var g;if(An)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Fn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Mn&&"ko"!==n.locale&&(Fn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Fn&&(g=nn()):(en="value"in(Zt=o)?Zt.value:Zt.textContent,Fn=!0)),0<(v=Ar(r,b)).length&&(b=new Sn(b,e,null,n,o),a.push({event:b,listeners:v}),(g||null!==(g=qn(n)))&&(b.data=g))),(g=Ln?function(e,t){switch(e){case"compositionend":return qn(t);case"keypress":return 32!==t.which?null:(zn=!0,Dn);case"textInput":return(e=t.data)===Dn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Fn)return"compositionend"===e||!An&&Bn(e,t)?(e=nn(),tn=en=Zt=null,Fn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Mn&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))&&0<(r=Ar(r,"onBeforeInput")).length&&(o=new Sn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Cr(a,t)}))}function jr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ar(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Be(e,n))&&r.unshift(jr(e,i,o)),null!=(i=Be(e,t))&&r.push(jr(e,i,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Lr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Be(n,i))&&a.unshift(jr(n,u,l)):o||null!=(u=Be(n,i))&&a.push(jr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Mr(){}var Dr=null,zr=null;function Br(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function qr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Fr="function"==typeof setTimeout?setTimeout:void 0,Hr="function"==typeof clearTimeout?clearTimeout:void 0;function Ur(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Vr=0,$r=Math.random().toString(36).slice(2),Yr="__reactFiber$"+$r,Jr="__reactProps$"+$r,Xr="__reactContainer$"+$r,Kr="__reactEvents$"+$r;function Gr(e){var t=e[Yr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Yr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Qr(e);null!==e;){if(n=e[Yr])return n;e=Qr(e)}return t}n=(e=n).parentNode}return null}function Zr(e){return!(e=e[Yr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function eo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function to(e){return e[Jr]||null}function no(e){var t=e[Kr];return void 0===t&&(t=e[Kr]=new Set),t}var ro=[],oo=-1;function io(e){return{current:e}}function ao(e){0>oo||(e.current=ro[oo],ro[oo]=null,oo--)}function lo(e,t){oo++,ro[oo]=e.current,e.current=t}var uo={},so=io(uo),co=io(!1),fo=uo;function po(e,t){var n=e.type.contextTypes;if(!n)return uo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ho(e){return null!=e.childContextTypes}function mo(){ao(co),ao(so)}function yo(e,t,n){if(so.current!==uo)throw Error(a(168));lo(so,t),lo(co,n)}function vo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,$(t)||"Unknown",i));return o({},n,r)}function go(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||uo,fo=so.current,lo(so,e),lo(co,co.current),!0}function bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=vo(e,t,fo),r.__reactInternalMemoizedMergedChildContext=e,ao(co),ao(so),lo(so,e)):ao(co),lo(co,n)}var wo=null,So=null,Eo=i.unstable_runWithPriority,ko=i.unstable_scheduleCallback,xo=i.unstable_cancelCallback,Co=i.unstable_shouldYield,Oo=i.unstable_requestPaint,_o=i.unstable_now,Ro=i.unstable_getCurrentPriorityLevel,Po=i.unstable_ImmediatePriority,To=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,jo=i.unstable_LowPriority,Ao=i.unstable_IdlePriority,Io={},Lo=void 0!==Oo?Oo:function(){},Mo=null,Do=null,zo=!1,Bo=_o(),qo=1e4>Bo?_o:function(){return _o()-Bo};function Fo(){switch(Ro()){case Po:return 99;case To:return 98;case No:return 97;case jo:return 96;case Ao:return 95;default:throw Error(a(332))}}function Ho(e){switch(e){case 99:return Po;case 98:return To;case 97:return No;case 96:return jo;case 95:return Ao;default:throw Error(a(332))}}function Uo(e,t){return e=Ho(e),Eo(e,t)}function Wo(e,t,n){return e=Ho(e),ko(e,t,n)}function Qo(){if(null!==Do){var e=Do;Do=null,xo(e)}Vo()}function Vo(){if(!zo&&null!==Mo){zo=!0;var e=0;try{var t=Mo;Uo(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Mo=null}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),ko(Po,Qo),t}finally{zo=!1}}}var $o=S.ReactCurrentBatchConfig;function Yo(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Jo=io(null),Xo=null,Ko=null,Go=null;function Zo(){Go=Ko=Xo=null}function ei(e){var t=Jo.current;ao(Jo),e.type._context._currentValue=t}function ti(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ni(e,t){Xo=e,Go=Ko=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Aa=!0),e.firstContext=null)}function ri(e,t){if(Go!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Go=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ko){if(null===Xo)throw Error(a(308));Ko=t,Xo.dependencies={lanes:0,firstContext:t,responders:null}}else Ko=Ko.next=t;return e._currentValue}var oi=!1;function ii(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function ai(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function li(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ui(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function si(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;oi=!1;var a=i.firstBaseUpdate,l=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?a=c:l.next=c,l=s;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==l&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=s)}}if(null!==a){for(d=i.baseState,l=0,f=c=s=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:oi=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,s=d):f=f.next=p,l|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(s=d),i.baseState=s,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Ll|=l,e.lanes=l,e.memoizedState=d}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var di=(new r.Component).refs;function pi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=au(),o=lu(e),i=li(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),ui(e,i),uu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=au(),r=lu(e),o=li(n,r);o.tag=2,null!=t&&(o.callback=t),ui(e,o),uu(e,r,n)}};function mi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&ur(n,r)&&ur(o,i))}function yi(e,t,n){var r=!1,o=uo,i=t.contextType;return"object"==typeof i&&null!==i?i=ri(i):(o=ho(t)?fo:so.current,i=(r=null!=(r=t.contextTypes))?po(e,o):uo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function vi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function gi(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=di,ii(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ri(i):(i=ho(t)?fo:so.current,o.context=po(e,i)),ci(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(pi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&hi.enqueueReplaceState(o,o.state,null),ci(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var bi=Array.isArray;function wi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===di&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Si(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Ei(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=qu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=wi(e,t,n),r.return=e,r):((r=Fu(n.type,n.key,n.props,null,e.mode,r)).ref=wi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Qu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Hu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case E:return(n=Fu(t.type,t.key,t.props,null,e.mode,n)).ref=wi(e,null,t),n.return=e,n;case k:return(t=Qu(t,e.mode,n)).return=e,t}if(bi(t)||H(t))return(t=Hu(t,e.mode,n,null)).return=e,t;Si(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case E:return n.key===o?n.type===x?f(e,t,n.props.children,r,o):s(e,t,n,r):null;case k:return n.key===o?c(e,t,n,r):null}if(bi(n)||H(n))return null!==o?null:f(e,t,n,r,null);Si(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case E:return e=e.get(null===r.key?n:r.key)||null,r.type===x?f(t,e,r.props.children,o,r.key):s(t,e,r,o);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(bi(r)||H(r))return f(t,e=e.get(n)||null,r,o,null);Si(t,r)}return null}function m(o,a,l,u){for(var s=null,c=null,f=a,m=a=0,y=null;null!==f&&m<l.length;m++){f.index>m?(y=f,f=null):y=f.sibling;var v=p(o,f,l[m],u);if(null===v){null===f&&(f=y);break}e&&f&&null===v.alternate&&t(o,f),a=i(v,a,m),null===c?s=v:c.sibling=v,c=v,f=y}if(m===l.length)return n(o,f),s;if(null===f){for(;m<l.length;m++)null!==(f=d(o,l[m],u))&&(a=i(f,a,m),null===c?s=f:c.sibling=f,c=f);return s}for(f=r(o,f);m<l.length;m++)null!==(y=h(f,o,m,l[m],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?m:y.key),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y);return e&&f.forEach((function(e){return t(o,e)})),s}function y(o,l,u,s){var c=H(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=l,y=l=0,v=null,g=u.next();null!==m&&!g.done;y++,g=u.next()){m.index>y?(v=m,m=null):v=m.sibling;var b=p(o,m,g.value,s);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,y),null===f?c=b:f.sibling=b,f=b,m=v}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;y++,g=u.next())null!==(g=d(o,g.value,s))&&(l=i(g,l,y),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;y++,g=u.next())null!==(g=h(m,o,y,g.value,s))&&(e&&null!==g.alternate&&m.delete(null===g.key?y:g.key),l=i(g,l,y),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var s="object"==typeof i&&null!==i&&i.type===x&&null===i.key;s&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case E:e:{for(c=i.key,s=r;null!==s;){if(s.key===c){switch(s.tag){case 7:if(i.type===x){n(e,s.sibling),(r=o(s,i.props.children)).return=e,e=r;break e}break;default:if(s.elementType===i.type){n(e,s.sibling),(r=o(s,i.props)).ref=wi(e,s,i),r.return=e,e=r;break e}}n(e,s);break}t(e,s),s=s.sibling}i.type===x?((r=Hu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Fu(i.type,i.key,i.props,null,e.mode,u)).ref=wi(e,r,i),u.return=e,e=u)}return l(e);case k:e:{for(s=i.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Qu(i,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Wu(i,e.mode,u)).return=e,e=r),l(e);if(bi(i))return m(e,r,i,u);if(H(i))return y(e,r,i,u);if(c&&Si(e,i),void 0===i&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,$(e.type)||"Component"))}return n(e,r)}}var ki=Ei(!0),xi=Ei(!1),Ci={},Oi=io(Ci),_i=io(Ci),Ri=io(Ci);function Pi(e){if(e===Ci)throw Error(a(174));return e}function Ti(e,t){switch(lo(Ri,t),lo(_i,e),lo(Oi,Ci),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ao(Oi),lo(Oi,t)}function Ni(){ao(Oi),ao(_i),ao(Ri)}function ji(e){Pi(Ri.current);var t=Pi(Oi.current),n=pe(t,e.type);t!==n&&(lo(_i,e),lo(Oi,n))}function Ai(e){_i.current===e&&(ao(Oi),ao(_i))}var Ii=io(0);function Li(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Mi=null,Di=null,zi=!1;function Bi(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function qi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Fi(e){if(zi){var t=Di;if(t){var n=t;if(!qi(e,t)){if(!(t=Wr(n.nextSibling))||!qi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Mi=e);Bi(Mi,n)}Mi=e,Di=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Mi=e}}function Hi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Mi=e}function Ui(e){if(e!==Mi)return!1;if(!zi)return Hi(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!qr(t,e.memoizedProps))for(t=Di;t;)Bi(e,t),t=Wr(t.nextSibling);if(Hi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Di=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Di=null}}else Di=Mi?Wr(e.stateNode.nextSibling):null;return!0}function Wi(){Di=Mi=null,zi=!1}var Qi=[];function Vi(){for(var e=0;e<Qi.length;e++)Qi[e]._workInProgressVersionPrimary=null;Qi.length=0}var $i=S.ReactCurrentDispatcher,Yi=S.ReactCurrentBatchConfig,Ji=0,Xi=null,Ki=null,Gi=null,Zi=!1,ea=!1;function ta(){throw Error(a(321))}function na(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ar(e[n],t[n]))return!1;return!0}function ra(e,t,n,r,o,i){if(Ji=i,Xi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,$i.current=null===e||null===e.memoizedState?Pa:Ta,e=n(r,o),ea){i=0;do{if(ea=!1,!(25>i))throw Error(a(301));i+=1,Gi=Ki=null,t.updateQueue=null,$i.current=Na,e=n(r,o)}while(ea)}if($i.current=Ra,t=null!==Ki&&null!==Ki.next,Ji=0,Gi=Ki=Xi=null,Zi=!1,t)throw Error(a(300));return e}function oa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Gi?Xi.memoizedState=Gi=e:Gi=Gi.next=e,Gi}function ia(){if(null===Ki){var e=Xi.alternate;e=null!==e?e.memoizedState:null}else e=Ki.next;var t=null===Gi?Xi.memoizedState:Gi.next;if(null!==t)Gi=t,Ki=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Ki=e).memoizedState,baseState:Ki.baseState,baseQueue:Ki.baseQueue,queue:Ki.queue,next:null},null===Gi?Xi.memoizedState=Gi=e:Gi=Gi.next=e}return Gi}function aa(e,t){return"function"==typeof t?t(e):t}function la(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Ki,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=l=i=null,s=o;do{var c=s.lane;if((Ji&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var f={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=f,i=r):u=u.next=f,Xi.lanes|=c,Ll|=c}s=s.next}while(null!==s&&s!==o);null===u?i=r:u.next=l,ar(r,t.memoizedState)||(Aa=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ua(e){var t=ia(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ar(i,t.memoizedState)||(Aa=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function sa(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Ji&e)===e)&&(t._workInProgressVersionPrimary=r,Qi.push(t))),e)return n(t._source);throw Qi.push(t),Error(a(350))}function ca(e,t,n,r){var o=_l;if(null===o)throw Error(a(349));var i=t._getVersion,l=i(t._source),u=$i.current,s=u.useState((function(){return sa(o,t,n)})),c=s[1],f=s[0];s=Gi;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var y=Xi;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!ar(l,e)){e=n(t._source),ar(f,e)||(c(e),e=lu(y),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-Ut(a),s=1<<u;r[u]|=e,a&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=lu(y);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ar(h,n)&&ar(m,t)&&ar(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:f}).dispatch=c=_a.bind(null,Xi,e),s.queue=e,s.baseQueue=null,f=sa(o,t,n),s.memoizedState=s.baseState=f),f}function fa(e,t,n){return ca(ia(),e,t,n)}function da(e){var t=oa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:aa,lastRenderedState:e}).dispatch=_a.bind(null,Xi,e),[t.memoizedState,e]}function pa(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Xi.updateQueue)?(t={lastEffect:null},Xi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ha(e){return e={current:e},oa().memoizedState=e}function ma(){return ia().memoizedState}function ya(e,t,n,r){var o=oa();Xi.flags|=e,o.memoizedState=pa(1|t,n,void 0,void 0===r?null:r)}function va(e,t,n,r){var o=ia();r=void 0===r?null:r;var i=void 0;if(null!==Ki){var a=Ki.memoizedState;if(i=a.destroy,null!==r&&na(r,a.deps))return void pa(t,n,i,r)}Xi.flags|=e,o.memoizedState=pa(1|t,n,i,r)}function ga(e,t){return ya(516,4,e,t)}function ba(e,t){return va(516,4,e,t)}function wa(e,t){return va(4,2,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ea(e,t,n){return n=null!=n?n.concat([e]):null,va(4,2,Sa.bind(null,t,e),n)}function ka(){}function xa(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=ia();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&na(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Oa(e,t){var n=Fo();Uo(98>n?98:n,(function(){e(!0)})),Uo(97<n?97:n,(function(){var n=Yi.transition;Yi.transition=1;try{e(!1),t()}finally{Yi.transition=n}}))}function _a(e,t,n){var r=au(),o=lu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Xi||null!==a&&a===Xi)ea=Zi=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=a(l,n);if(i.eagerReducer=a,i.eagerState=u,ar(u,l))return}catch(e){}uu(e,o,r)}}var Ra={readContext:ri,useCallback:ta,useContext:ta,useEffect:ta,useImperativeHandle:ta,useLayoutEffect:ta,useMemo:ta,useReducer:ta,useRef:ta,useState:ta,useDebugValue:ta,useDeferredValue:ta,useTransition:ta,useMutableSource:ta,useOpaqueIdentifier:ta,unstable_isNewReconciler:!1},Pa={readContext:ri,useCallback:function(e,t){return oa().memoizedState=[e,void 0===t?null:t],e},useContext:ri,useEffect:ga,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=oa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=oa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=_a.bind(null,Xi,e),[r.memoizedState,e]},useRef:ha,useState:da,useDebugValue:ka,useDeferredValue:function(e){var t=da(e),n=t[0],r=t[1];return ga((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=da(!1),t=e[0];return ha(e=Oa.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=oa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ca(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Vr++).toString(36))),Error(a(355))})),n=da(t)[1];return 0==(2&Xi.mode)&&(Xi.flags|=516,pa(5,(function(){n("r:"+(Vr++).toString(36))}),void 0,null)),t}return da(t="r:"+(Vr++).toString(36)),t},unstable_isNewReconciler:!1},Ta={readContext:ri,useCallback:xa,useContext:ri,useEffect:ba,useImperativeHandle:Ea,useLayoutEffect:wa,useMemo:Ca,useReducer:la,useRef:ma,useState:function(){return la(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=la(aa),n=t[0],r=t[1];return ba((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=la(aa)[0];return[ma().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return la(aa)[0]},unstable_isNewReconciler:!1},Na={readContext:ri,useCallback:xa,useContext:ri,useEffect:ba,useImperativeHandle:Ea,useLayoutEffect:wa,useMemo:Ca,useReducer:ua,useRef:ma,useState:function(){return ua(aa)},useDebugValue:ka,useDeferredValue:function(e){var t=ua(aa),n=t[0],r=t[1];return ba((function(){var t=Yi.transition;Yi.transition=1;try{r(e)}finally{Yi.transition=t}}),[e]),n},useTransition:function(){var e=ua(aa)[0];return[ma().current,e]},useMutableSource:fa,useOpaqueIdentifier:function(){return ua(aa)[0]},unstable_isNewReconciler:!1},ja=S.ReactCurrentOwner,Aa=!1;function Ia(e,t,n,r){t.child=null===e?xi(t,null,n,r):ki(t,e.child,n,r)}function La(e,t,n,r,o){n=n.render;var i=t.ref;return ni(t,o),r=ra(e,t,n,r,i,o),null===e||Aa?(t.flags|=1,Ia(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function Ma(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Bu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Fu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Da(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:ur)(o,r)&&e.ref===t.ref)?Za(e,t,i):(t.flags|=1,(e=qu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Da(e,t,n,r,o,i){if(null!==e&&ur(e.memoizedProps,r)&&e.ref===t.ref){if(Aa=!1,0==(i&o))return t.lanes=e.lanes,Za(e,t,i);0!=(16384&e.flags)&&(Aa=!0)}return qa(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},yu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},yu(0,e),null;t.memoizedState={baseLanes:0},yu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,yu(0,r);return Ia(e,t,o,n),t.child}function Ba(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function qa(e,t,n,r,o){var i=ho(n)?fo:so.current;return i=po(t,i),ni(t,o),n=ra(e,t,n,r,i,o),null===e||Aa?(t.flags|=1,Ia(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,Za(e,t,o))}function Fa(e,t,n,r,o){if(ho(n)){var i=!0;go(t)}else i=!1;if(ni(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yi(t,n,r),gi(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,l=t.memoizedProps;a.props=l;var u=a.context,s=n.contextType;s="object"==typeof s&&null!==s?ri(s):po(t,s=ho(n)?fo:so.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==r||u!==s)&&vi(t,a,r,s),oi=!1;var d=t.memoizedState;a.state=d,ci(t,r,a,o),u=t.memoizedState,l!==r||d!==u||co.current||oi?("function"==typeof c&&(pi(t,n,c,r),u=t.memoizedState),(l=oi||mi(t,n,l,r,d,u,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=s,r=l):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,ai(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Yo(t.type,l),a.props=s,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ri(u):po(t,u=ho(n)?fo:so.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(l!==f||d!==u)&&vi(t,a,r,u),oi=!1,d=t.memoizedState,a.state=d,ci(t,r,a,o);var h=t.memoizedState;l!==f||d!==h||co.current||oi?("function"==typeof p&&(pi(t,n,p,r),h=t.memoizedState),(s=oi||mi(t,n,s,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=s):("function"!=typeof a.componentDidUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return Ha(e,t,n,r,i,o)}function Ha(e,t,n,r,o,i){Ba(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&bo(t,n,!1),Za(e,t,i);r=t.stateNode,ja.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=ki(t,e.child,null,i),t.child=ki(t,null,l,i)):Ia(e,t,l,i),t.memoizedState=r.state,o&&bo(t,n,!0),t.child}function Ua(e){var t=e.stateNode;t.pendingContext?yo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yo(0,t.context,!1),Ti(e,t.containerInfo)}var Wa,Qa,Va,$a={dehydrated:null,retryLane:0};function Ya(e,t,n){var r,o=t.pendingProps,i=Ii.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),lo(Ii,1&i),null===e?(void 0!==o.fallback&&Fi(t),e=o.children,i=o.fallback,a?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,e):"number"==typeof o.unstable_expectedLoadTime?(e=Ja(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$a,t.lanes=33554432,e):((n=Uu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var l={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=l,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=qu(a,l),null!==e?r=qu(e,r):(r=Hu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=$a,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=qu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Ja(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=Uu(t,o,0,null),n=Hu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xa(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ti(e.return,t)}function Ka(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function Ga(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Xa(e,n);else if(19===e.tag)Xa(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(lo(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Li(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Ka(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Li(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Ka(t,!0,n,null,i,t.lastEffect);break;case"together":Ka(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Za(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ll|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=qu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=qu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function el(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function tl(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return ho(t.type)&&mo(),null;case 3:return Ni(),ao(co),ao(so),Vi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ui(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Ai(t);var i=Pi(Ri.current);if(n=t.type,null!==e&&null!=t.stateNode)Qa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Pi(Oi.current),Ui(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Yr]=t,r[Jr]=l,n){case"dialog":Or("cancel",r),Or("close",r);break;case"iframe":case"object":case"embed":Or("load",r);break;case"video":case"audio":for(e=0;e<Er.length;e++)Or(Er[e],r);break;case"source":Or("error",r);break;case"img":case"image":case"link":Or("error",r),Or("load",r);break;case"details":Or("toggle",r);break;case"input":ee(r,l),Or("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Or("invalid",r);break;case"textarea":ue(r,l),Or("invalid",r)}for(var s in ke(n,l),e=null,l)l.hasOwnProperty(s)&&(i=l[s],"children"===s?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(s)&&null!=i&&"onScroll"===s&&Or("scroll",r));switch(n){case"input":X(r),re(r,l,!0);break;case"textarea":X(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Mr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Yr]=t,e[Jr]=r,Wa(e,t),t.stateNode=e,s=xe(n,r),n){case"dialog":Or("cancel",e),Or("close",e),i=r;break;case"iframe":case"object":case"embed":Or("load",e),i=r;break;case"video":case"audio":for(i=0;i<Er.length;i++)Or(Er[i],e);i=r;break;case"source":Or("error",e),i=r;break;case"img":case"image":case"link":Or("error",e),Or("load",e),i=r;break;case"details":Or("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Or("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Or("invalid",e);break;case"textarea":ue(e,r),i=le(e,r),Or("invalid",e);break;default:i=r}ke(n,i);var c=i;for(l in c)if(c.hasOwnProperty(l)){var f=c[l];"style"===l?Se(e,f):"dangerouslySetInnerHTML"===l?null!=(f=f?f.__html:void 0)&&ye(e,f):"children"===l?"string"==typeof f?("textarea"!==n||""!==f)&&ve(e,f):"number"==typeof f&&ve(e,""+f):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=f&&"onScroll"===l&&Or("scroll",e):null!=f&&w(e,l,f,s))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ae(e,!!r.multiple,l,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Mr)}Br(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Va(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Pi(Ri.current),Pi(Oi.current),Ui(t)?(r=t.stateNode,n=t.memoizedProps,r[Yr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Yr]=t,t.stateNode=r)}return null;case 13:return ao(Ii),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ui(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?0===jl&&(jl=3):(0!==jl&&3!==jl||(jl=4),null===_l||0==(134217727&Ll)&&0==(134217727&Ml)||du(_l,Pl))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Rr(t.stateNode.containerInfo),null;case 10:return ei(t),null;case 17:return ho(t.type)&&mo(),null;case 19:if(ao(Ii),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)el(r,!1);else{if(0!==jl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=Li(e))){for(t.flags|=64,el(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return lo(Ii,1&Ii.current|2),t.child}e=e.sibling}null!==r.tail&&qo()>ql&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=Li(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),el(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*qo()-r.renderingStartTime>ql&&1073741824!==n&&(t.flags|=64,l=!0,el(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=qo(),n.sibling=null,t=Ii.current,lo(Ii,l?1&t|2:1&t),n):null;case 23:case 24:return vu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function nl(e){switch(e.tag){case 1:ho(e.type)&&mo();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),ao(co),ao(so),Vi(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Ai(e),null;case 13:return ao(Ii),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ao(Ii),null;case 4:return Ni(),null;case 10:return ei(e),null;case 23:case 24:return vu(),null;default:return null}}function rl(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ol(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Pi(Oi.current);var a,l=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),l=[];break;case"option":i=ie(e,i),r=ie(e,r),l=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),l=[];break;case"textarea":i=le(e,i),r=le(e,r),l=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Mr)}for(f in ke(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var s=i[f];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?l||(l=[]):(l=l||[]).push(f,null));for(f in r){var c=r[f];if(s=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==s&&(null!=c||null!=s))if("style"===f)if(s){for(a in s)!s.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&s[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(l||(l=[]),l.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Or("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(l=l||[]).push(f,c))}n&&(l=l||[]).push("style",n);var f=l;(t.updateQueue=f)&&(t.flags|=4)}},Va=function(e,t,n,r){n!==r&&(t.flags|=4)};var il="function"==typeof WeakMap?WeakMap:Map;function al(e,t,n){(n=li(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Ql=r),ol(0,t)},n}function ll(e,t,n){(n=li(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ol(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Vl?Vl=new Set([this]):Vl.add(this),ol(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var ul="function"==typeof WeakSet?WeakSet:Set;function sl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Iu(e,t)}else t.current=null}function cl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Yo(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Ur(t.stateNode.containerInfo));case 5:case 6:case 4:case 17:return}throw Error(a(163))}function fl(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),Tu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Yo(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Br(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&St(n)))));case 19:case 17:case 20:case 21:case 23:case 24:return}throw Error(a(163))}function dl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function pl(e,t){if(So&&"function"==typeof So.onCommitFiberUnmount)try{So.onCommitFiberUnmount(wo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){Iu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(sl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Iu(t,e)}break;case 5:sl(t);break;case 4:bl(e,t)}}function hl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ml(e){return 5===e.tag||3===e.tag||4===e.tag}function yl(e){e:{for(var t=e.return;null!==t;){if(ml(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ml(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?vl(e,n,t):gl(e,n,t)}function vl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Mr));else if(4!==r&&null!==(e=e.child))for(vl(e,t,n),e=e.sibling;null!==e;)vl(e,t,n),e=e.sibling}function gl(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(gl(e,t,n),e=e.sibling;null!==e;)gl(e,t,n),e=e.sibling}function bl(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var l=e,u=o,s=u;;)if(pl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=o.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(pl(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function wl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),xe(e,o),t=xe(e,r),o=0;o<i.length;o+=2){var l=i[o],u=i[o+1];"style"===l?Se(n,u):"dangerouslySetInnerHTML"===l?ye(n,u):"children"===l?ve(n,u):w(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,St(n.containerInfo)));case 12:return;case 13:return null!==t.memoizedState&&(Bl=qo(),dl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 17:return;case 23:case 24:return void dl(t,null!==t.memoizedState)}throw Error(a(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ul),t.forEach((function(t){var r=Mu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function El(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var kl=Math.ceil,xl=S.ReactCurrentDispatcher,Cl=S.ReactCurrentOwner,Ol=0,_l=null,Rl=null,Pl=0,Tl=0,Nl=io(0),jl=0,Al=null,Il=0,Ll=0,Ml=0,Dl=0,zl=null,Bl=0,ql=1/0;function Fl(){ql=qo()+500}var Hl,Ul=null,Wl=!1,Ql=null,Vl=null,$l=!1,Yl=null,Jl=90,Xl=[],Kl=[],Gl=null,Zl=0,eu=null,tu=-1,nu=0,ru=0,ou=null,iu=!1;function au(){return 0!=(48&Ol)?qo():-1!==tu?tu:tu=qo()}function lu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Fo()?1:2;if(0===nu&&(nu=Il),0!==$o.transition){0!==ru&&(ru=null!==zl?zl.pendingLanes:0),e=nu;var t=4186112&~ru;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Fo(),e=Bt(0!=(4&Ol)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),nu)}function uu(e,t,n){if(50<Zl)throw Zl=0,eu=null,Error(a(185));if(null===(e=su(e,t)))return null;Ht(e,t,n),e===_l&&(Ml|=t,4===jl&&du(e,Pl));var r=Fo();1===t?0!=(8&Ol)&&0==(48&Ol)?pu(e):(cu(e,n),0===Ol&&(Fl(),Qo())):(0==(4&Ol)||98!==r&&99!==r||(null===Gl?Gl=new Set([e]):Gl.add(e)),cu(e,n)),zl=e}function su(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function cu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Ut(l),s=1<<u,c=i[u];if(-1===c){if(0==(s&r)||0!=(s&o)){c=t,Mt(s);var f=Lt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Dt(e,e===_l?Pl:0),t=Lt,0===r)null!==n&&(n!==Io&&xo(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&xo(n)}15===t?(n=pu.bind(null,e),null===Mo?(Mo=[n],Do=ko(Po,Vo)):Mo.push(n),n=Io):n=14===t?Wo(99,pu.bind(null,e)):Wo(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),fu.bind(null,e)),e.callbackPriority=t,e.callbackNode=n}}function fu(e){if(tu=-1,ru=nu=0,0!=(48&Ol))throw Error(a(327));var t=e.callbackNode;if(Pu()&&e.callbackNode!==t)return null;var n=Dt(e,e===_l?Pl:0);if(0===n)return null;var r=n,o=Ol;Ol|=16;var i=wu();for(_l===e&&Pl===r||(Fl(),gu(e,r));;)try{ku();break}catch(t){bu(e,t)}if(Zo(),xl.current=i,Ol=o,null!==Rl?r=0:(_l=null,Pl=0,r=jl),0!=(Il&Ml))gu(e,0);else if(0!==r){if(2===r&&(Ol|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(n=zt(e))&&(r=Su(e,n))),1===r)throw t=Al,gu(e,0),du(e,n),cu(e,qo()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:Ou(e);break;case 3:if(du(e,n),(62914560&n)===n&&10<(r=Bl+500-qo())){if(0!==Dt(e,0))break;if(((o=e.suspendedLanes)&n)!==n){au(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Fr(Ou.bind(null,e),r);break}Ou(e);break;case 4:if(du(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var l=31-Ut(n);i=1<<l,(l=r[l])>o&&(o=l),n&=~i}if(n=o,10<(n=(120>(n=qo()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*kl(n/1960))-n)){e.timeoutHandle=Fr(Ou.bind(null,e),n);break}Ou(e);break;case 5:Ou(e);break;default:throw Error(a(329))}}return cu(e,qo()),e.callbackNode===t?fu.bind(null,e):null}function du(e,t){for(t&=~Dl,t&=~Ml,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ut(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(0!=(48&Ol))throw Error(a(327));if(Pu(),e===_l&&0!=(e.expiredLanes&Pl)){var t=Pl,n=Su(e,t);0!=(Il&Ml)&&(n=Su(e,t=Dt(e,t)))}else n=Su(e,t=Dt(e,0));if(0!==e.tag&&2===n&&(Ol|=64,e.hydrate&&(e.hydrate=!1,Ur(e.containerInfo)),0!==(t=zt(e))&&(n=Su(e,t))),1===n)throw n=Al,gu(e,0),du(e,t),cu(e,qo()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Ou(e),cu(e,qo()),null}function hu(e,t){var n=Ol;Ol|=1;try{return e(t)}finally{0===(Ol=n)&&(Fl(),Qo())}}function mu(e,t){var n=Ol;Ol&=-2,Ol|=8;try{return e(t)}finally{0===(Ol=n)&&(Fl(),Qo())}}function yu(e,t){lo(Nl,Tl),Tl|=t,Il|=t}function vu(){Tl=Nl.current,ao(Nl)}function gu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Hr(n)),null!==Rl)for(n=Rl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mo();break;case 3:Ni(),ao(co),ao(so),Vi();break;case 5:Ai(r);break;case 4:Ni();break;case 13:case 19:ao(Ii);break;case 10:ei(r);break;case 23:case 24:vu()}n=n.return}_l=e,Rl=qu(e.current,null),Pl=Tl=Il=t,jl=0,Al=null,Dl=Ml=Ll=0}function bu(e,t){for(;;){var n=Rl;try{if(Zo(),$i.current=Ra,Zi){for(var r=Xi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}Zi=!1}if(Ji=0,Gi=Ki=Xi=null,ea=!1,Cl.current=null,null===n||null===n.return){jl=1,Al=t,Rl=null;break}e:{var i=e,a=n.return,l=n,u=t;if(t=Pl,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var y=d.updateQueue;if(null===y){var v=new Set;v.add(s),d.updateQueue=v}else y.add(s);if(0==(2&d.mode)){if(d.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var g=li(-1,1);g.tag=2,ui(l,g)}l.lanes|=1;break e}u=void 0,l=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new il,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var w=Lu.bind(null,i,s,l);s.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error(($(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==jl&&(jl=2),u=rl(u,l),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,si(d,al(0,i,t));break e;case 1:i=u;var S=d.type,E=d.stateNode;if(0==(64&d.flags)&&("function"==typeof S.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===Vl||!Vl.has(E)))){d.flags|=4096,t&=-t,d.lanes|=t,si(d,ll(d,i,t));break e}}d=d.return}while(null!==d)}Cu(n)}catch(e){t=e,Rl===n&&null!==n&&(Rl=n=n.return);continue}break}}function wu(){var e=xl.current;return xl.current=Ra,null===e?Ra:e}function Su(e,t){var n=Ol;Ol|=16;var r=wu();for(_l===e&&Pl===t||gu(e,t);;)try{Eu();break}catch(t){bu(e,t)}if(Zo(),Ol=n,xl.current=r,null!==Rl)throw Error(a(261));return _l=null,Pl=0,jl}function Eu(){for(;null!==Rl;)xu(Rl)}function ku(){for(;null!==Rl&&!Co();)xu(Rl)}function xu(e){var t=Hl(e.alternate,e,Tl);e.memoizedProps=e.pendingProps,null===t?Cu(e):Rl=t,Cl.current=null}function Cu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=tl(n,t,Tl)))return void(Rl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Tl)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=nl(t)))return n.flags&=2047,void(Rl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Rl=t);Rl=t=e}while(null!==t);0===jl&&(jl=5)}function Ou(e){var t=Fo();return Uo(99,_u.bind(null,e,t)),null}function _u(e,t){do{Pu()}while(null!==Yl);if(0!=(48&Ol))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<i;){var s=31-Ut(i),c=1<<s;o[s]=0,l[s]=-1,u[s]=-1,i&=~c}if(null!==Gl&&0==(24&r)&&Gl.has(e)&&Gl.delete(e),e===_l&&(Rl=_l=null,Pl=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ol,Ol|=32,Cl.current=null,Dr=Yt,pr(l=dr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,y=l,v=null;t:for(;;){for(var g;y!==u||0!==i&&3!==y.nodeType||(d=f+i),y!==s||0!==c&&3!==y.nodeType||(p=f+c),3===y.nodeType&&(f+=y.nodeValue.length),null!==(g=y.firstChild);)v=y,y=g;for(;;){if(y===l)break t;if(v===u&&++h===i&&(d=f),v===s&&++m===c&&(p=f),null!==(g=y.nextSibling))break;v=(y=v).parentNode}y=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:l,selectionRange:u},Yt=!1,ou=null,iu=!1,Ul=r;do{try{Ru()}catch(e){if(null===Ul)throw Error(a(330));Iu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);ou=null,Ul=r;do{try{for(l=e;null!==Ul;){var b=Ul.flags;if(16&b&&ve(Ul.stateNode,""),128&b){var w=Ul.alternate;if(null!==w){var S=w.ref;null!==S&&("function"==typeof S?S(null):S.current=null)}}switch(1038&b){case 2:yl(Ul),Ul.flags&=-3;break;case 6:yl(Ul),Ul.flags&=-3,wl(Ul.alternate,Ul);break;case 1024:Ul.flags&=-1025;break;case 1028:Ul.flags&=-1025,wl(Ul.alternate,Ul);break;case 4:wl(Ul.alternate,Ul);break;case 8:bl(l,u=Ul);var E=u.alternate;hl(u),null!==E&&hl(E)}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(a(330));Iu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);if(S=zr,w=dr(),b=S.focusedElem,l=S.selectionRange,w!==b&&b&&b.ownerDocument&&fr(b.ownerDocument.documentElement,b)){null!==l&&pr(b)&&(w=l.start,void 0===(S=l.end)&&(S=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(S,b.value.length)):(S=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(S=S.getSelection(),u=b.textContent.length,E=Math.min(l.start,u),l=void 0===l.end?E:Math.min(l.end,u),!S.extend&&E>l&&(u=l,l=E,E=u),u=cr(b,E),i=cr(b,l),u&&i&&(1!==S.rangeCount||S.anchorNode!==u.node||S.anchorOffset!==u.offset||S.focusNode!==i.node||S.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),S.removeAllRanges(),E>l?(S.addRange(w),S.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),S.addRange(w))))),w=[];for(S=b;S=S.parentNode;)1===S.nodeType&&w.push({element:S,left:S.scrollLeft,top:S.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(S=w[b]).element.scrollLeft=S.left,S.element.scrollTop=S.top}Yt=!!Dr,zr=Dr=null,e.current=n,Ul=r;do{try{for(b=e;null!==Ul;){var k=Ul.flags;if(36&k&&fl(b,Ul.alternate,Ul),128&k){w=void 0;var x=Ul.ref;if(null!==x){var C=Ul.stateNode;switch(Ul.tag){case 5:w=C;break;default:w=C}"function"==typeof x?x(w):x.current=w}}Ul=Ul.nextEffect}}catch(e){if(null===Ul)throw Error(a(330));Iu(Ul,e),Ul=Ul.nextEffect}}while(null!==Ul);Ul=null,Lo(),Ol=o}else e.current=n;if($l)$l=!1,Yl=e,Jl=t;else for(Ul=r;null!==Ul;)t=Ul.nextEffect,Ul.nextEffect=null,8&Ul.flags&&((k=Ul).sibling=null,k.stateNode=null),Ul=t;if(0===(r=e.pendingLanes)&&(Vl=null),1===r?e===eu?Zl++:(Zl=0,eu=e):Zl=0,n=n.stateNode,So&&"function"==typeof So.onCommitFiberRoot)try{So.onCommitFiberRoot(wo,n,void 0,64==(64&n.current.flags))}catch(e){}if(cu(e,qo()),Wl)throw Wl=!1,e=Ql,Ql=null,e;return 0!=(8&Ol)||Qo(),null}function Ru(){for(;null!==Ul;){var e=Ul.alternate;iu||null===ou||(0!=(8&Ul.flags)?Ze(Ul,ou)&&(iu=!0):13===Ul.tag&&El(e,Ul)&&Ze(Ul,ou)&&(iu=!0));var t=Ul.flags;0!=(256&t)&&cl(e,Ul),0==(512&t)||$l||($l=!0,Wo(97,(function(){return Pu(),null}))),Ul=Ul.nextEffect}}function Pu(){if(90!==Jl){var e=97<Jl?97:Jl;return Jl=90,Uo(e,ju)}return!1}function Tu(e,t){Xl.push(t,e),$l||($l=!0,Wo(97,(function(){return Pu(),null})))}function Nu(e,t){Kl.push(t,e),$l||($l=!0,Wo(97,(function(){return Pu(),null})))}function ju(){if(null===Yl)return!1;var e=Yl;if(Yl=null,0!=(48&Ol))throw Error(a(331));var t=Ol;Ol|=32;var n=Kl;Kl=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],l=o.destroy;if(o.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(n=Xl,Xl=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ol=t,Qo(),!0}function Au(e,t,n){ui(e,t=al(0,t=rl(n,t),1)),t=au(),null!==(e=su(e,1))&&(Ht(e,1,t),cu(e,t))}function Iu(e,t){if(3===e.tag)Au(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Au(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r))){var o=ll(n,e=rl(t,e),1);if(ui(n,o),o=au(),null!==(n=su(n,1)))Ht(n,1,o),cu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Vl||!Vl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Lu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=au(),e.pingedLanes|=e.suspendedLanes&n,_l===e&&(Pl&n)===n&&(4===jl||3===jl&&(62914560&Pl)===Pl&&500>qo()-Bl?gu(e,0):Dl|=n),cu(e,t)}function Mu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Fo()?1:2:(0===nu&&(nu=Il),0===(t=qt(62914560&~nu))&&(t=4194304))),n=au(),null!==(e=su(e,t))&&(Ht(e,t,n),cu(e,n))}function Du(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new Du(e,t,n,r)}function Bu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function qu(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Fu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Bu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case x:return Hu(n.children,o,i,t);case M:l=8,o|=16;break;case C:l=8,o|=1;break;case O:return(e=zu(12,n,t,8|o)).elementType=O,e.type=O,e.lanes=i,e;case T:return(e=zu(13,n,t,o)).type=T,e.elementType=T,e.lanes=i,e;case N:return(e=zu(19,n,t,o)).elementType=N,e.lanes=i,e;case D:return Uu(n,o,i,t);case z:return(e=zu(24,n,t,o)).elementType=z,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case R:l=9;break e;case P:l=11;break e;case j:l=14;break e;case A:l=16,r=null;break e;case I:l=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=zu(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Hu(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function Uu(e,t,n,r){return(e=zu(23,e,r,t)).elementType=D,e.lanes=n,e}function Wu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Qu(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Vu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ft(0),this.expirationTimes=Ft(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ft(0),this.mutableSourceEagerHydrationData=null}function $u(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Yu(e,t,n,r){var o=t.current,i=au(),l=lu(o);e:if(n){t:{if(Je(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ho(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var s=n.type;if(ho(s)){n=vo(n,s,u);break e}}n=u}else n=uo;return null===t.context?t.context=n:t.pendingContext=n,(t=li(i,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),ui(o,t),uu(o,l,i),l}function Ju(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Xu(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ku(e,t){Xu(e,t),(e=e.alternate)&&Xu(e,t)}function Gu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Vu(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ii(t),e[Xr]=n.current,Rr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function es(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var l=o;o=function(){var e=Ju(a);l.call(e)}}Yu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Gu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Ju(a);u.call(e)}}mu((function(){Yu(t,a,e,o)}))}return Ju(a)}function ts(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Zu(t))throw Error(a(200));return $u(e,t,null,n)}Hl=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||co.current)Aa=!0;else{if(0==(n&r)){switch(Aa=!1,t.tag){case 3:Ua(t),Wi();break;case 5:ji(t);break;case 1:ho(t.type)&&go(t);break;case 4:Ti(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;lo(Jo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ya(e,t,n):(lo(Ii,1&Ii.current),null!==(t=Za(e,t,n))?t.sibling:null);lo(Ii,1&Ii.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return Ga(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),lo(Ii,Ii.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return Za(e,t,n)}Aa=0!=(16384&e.flags)}else Aa=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=po(t,so.current),ni(t,n),o=ra(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ho(r)){var i=!0;go(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ii(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&pi(t,r,l,e),o.updater=hi,t.stateNode=o,o._reactInternals=t,gi(t,r,e,n),t=Ha(null,t,r,!0,i,n)}else t.tag=0,Ia(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Bu(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===j)return 14}return 2}(o),e=Yo(o,e),i){case 0:t=qa(null,t,o,e,n);break e;case 1:t=Fa(null,t,o,e,n);break e;case 11:t=La(null,t,o,e,n);break e;case 14:t=Ma(null,t,o,Yo(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,qa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 1:return r=t.type,o=t.pendingProps,Fa(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 3:if(Ua(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,ai(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===o)Wi(),t=Za(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Di=Wr(t.stateNode.containerInfo.firstChild),Mi=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Qi.push(i);for(n=xi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),Wi();t=t.child}return t;case 5:return ji(t),null===e&&Fi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,qr(r,o)?l=null:null!==i&&qr(r,i)&&(t.flags|=16),Ba(e,t),Ia(e,t,l,n),t.child;case 6:return null===e&&Fi(t),null;case 13:return Ya(e,t,n);case 4:return Ti(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ki(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,La(e,t,r,o=t.elementType===r?o:Yo(r,o),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,l=t.memoizedProps,i=o.value;var u=t.type._context;if(lo(Jo,u._currentValue),u._currentValue=i,null!==l)if(u=l.value,0==(i=ar(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(l.children===o.children&&!co.current){t=Za(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=li(-1,n&-n)).tag=2,ui(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ti(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Ia(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ni(t,n),r=r(o=ri(o,i.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return i=Yo(o=t.type,t.pendingProps),Ma(e,t,o,i=Yo(o.type,i),r,n);case 15:return Da(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Yo(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ho(r)?(e=!0,go(t)):e=!1,ni(t,n),yi(t,r,o),gi(t,r,o,n),Ha(null,t,r,!0,e,n);case 19:return Ga(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},Gu.prototype.render=function(e){Yu(e,this._internalRoot,null,null)},Gu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Yu(null,e,null,(function(){t[Xr]=null}))},et=function(e){13===e.tag&&(uu(e,4,au()),Ku(e,4))},tt=function(e){13===e.tag&&(uu(e,67108864,au()),Ku(e,67108864))},nt=function(e){if(13===e.tag){var t=au(),n=lu(e);uu(e,n,t),Ku(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=to(r);if(!o)throw Error(a(90));K(r),ne(r,o)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},je=hu,Ae=function(e,t,n,r,o){var i=Ol;Ol|=4;try{return Uo(98,e.bind(null,t,n,r,o))}finally{0===(Ol=i)&&(Fl(),Qo())}},Ie=function(){0==(49&Ol)&&(function(){if(null!==Gl){var e=Gl;Gl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,cu(e,qo())}))}Qo()}(),Pu())},Le=function(e,t){var n=Ol;Ol|=2;try{return e(t)}finally{0===(Ol=n)&&(Fl(),Qo())}};var ns={Events:[Zr,eo,to,Te,Ne,Pu,{current:!1}]},rs={findFiberByHostInstance:Gr,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},os={bundleType:rs.bundleType,version:rs.version,rendererPackageName:rs.rendererPackageName,rendererConfig:rs.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:S.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ge(e))?null:e.stateNode},findFiberByHostInstance:rs.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var is=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!is.isDisabled&&is.supportsFiber)try{wo=is.inject(os),So=is}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ns,t.createPortal=ts,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ge(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ol;if(0!=(48&n))return e(t);Ol|=1;try{if(e)return Uo(99,e.bind(null,t))}finally{Ol=n,Qo()}},t.hydrate=function(e,t,n){if(!Zu(t))throw Error(a(200));return es(null,e,t,!0,n)},t.render=function(e,t,n){if(!Zu(t))throw Error(a(200));return es(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zu(e))throw Error(a(40));return!!e._reactRootContainer&&(mu((function(){es(null,null,e,!1,(function(){e._reactRootContainer=null,e[Xr]=null}))})),!0)},t.unstable_batchedUpdates=hu,t.unstable_createPortal=function(e,t){return ts(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zu(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return es(e,t,n,!1,r)},t.version="17.0.2"},935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},408:(e,t,n)=>{"use strict";var r=n(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),l=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function v(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=y.prototype;var b=g.prototype=new v;b.constructor=g,r(b,y.prototype),b.isPureReactComponent=!0;var w={current:null},S=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,i={},a=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!E.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:l,props:i,_owner:w.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function _(e,t,n,r,a){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+O(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(C,"$&/")+"/"),_(a,t,n,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+O(l=e[s],s);u+=_(l,t,n,c,a)}else if("function"==typeof(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e)))for(e=c.call(e),s=0;!(l=e.next()).done;)u+=_(l=l.value,t,n,c=r+O(l,s++),a);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function R(e,t,n){if(null==e)return e;var r=[],o=0;return _(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function P(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function N(){var e=T.current;if(null===e)throw Error(p(321));return e}var j={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:R,forEach:function(e,t,n){R(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return R(e,(function(){t++})),t},toArray:function(e){return R(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(p(143));return e}},t.Component=y,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)S.call(t,c)&&!E.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){s=Array(c);for(var f=0;f<c;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:P}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},294:(e,t,n)=>{"use strict";e.exports=n(408)},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,f=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,y=null,v=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,S=w.port2;w.port1.onmessage=function(){if(null!==y){var e=t.unstable_now();b=e+g;try{y(!0,e)?S.postMessage(null):(m=!1,y=null)}catch(e){throw S.postMessage(null),e}}else m=!1},n=function(e){y=e,m||(m=!0,S.postMessage(null))},r=function(e,n){v=d((function(){e(t.unstable_now())}),n)},o=function(){p(v),v=-1}}function E(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<C(o,t)))break e;e[r]=t,e[n]=o,n=r}}function k(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],l=i+1,u=e[l];if(void 0!==a&&0>C(a,n))void 0!==u&&0>C(u,a)?(e[r]=u,e[l]=n,r=l):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>C(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],_=[],R=1,P=null,T=3,N=!1,j=!1,A=!1;function I(e){for(var t=k(_);null!==t;){if(null===t.callback)x(_);else{if(!(t.startTime<=e))break;x(_),t.sortIndex=t.expirationTime,E(O,t)}t=k(_)}}function L(e){if(A=!1,I(e),!j)if(null!==k(O))j=!0,n(M);else{var t=k(_);null!==t&&r(L,t.startTime-e)}}function M(e,n){j=!1,A&&(A=!1,o()),N=!0;var i=T;try{for(I(n),P=k(O);null!==P&&(!(P.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=P.callback;if("function"==typeof a){P.callback=null,T=P.priorityLevel;var l=a(P.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?P.callback=l:P===k(O)&&x(O),I(n)}else x(O);P=k(O)}if(null!==P)var u=!0;else{var s=k(_);null!==s&&r(L,s.startTime-n),u=!1}return u}finally{P=null,T=i,N=!1}}var D=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||N||(j=!0,n(M))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return k(O)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=D,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:R++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,E(_,e),null===k(O)&&e===k(_)&&(A?o():A=!0,r(L,a-l))):(e.sortIndex=u,E(O,e),j||N||(j=!0,n(M))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},840:(e,t,n)=>{"use strict";e.exports=n(53)}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e,t=n(294),r=n(935),o=(e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)},function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}),i=function(e){function t(t){var n=e.call(this,t)||this;return n.name="AssertionError",n}return o(t,e),t}(Error);function a(e,t){if(!e)throw new i(t)}function l(e){var t=Object.entries(e).filter((function(e){return null!=e[1]})).map((function(e){var t=e[0],n=e[1];return encodeURIComponent(t)+"="+encodeURIComponent(String(n))}));return t.length>0?"?"+t.join("&"):""}var u=n(184),s=n.n(u),c=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])})(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),f=function(){return(f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},d=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function l(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}u((r=r.apply(e,t||[])).next())}))},p=function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function l(i){return function(l){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,l])}}},h=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n},m=function(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"function"==typeof e.then},y=function(e,t){return{left:window.outerWidth/2+(window.screenX||window.screenLeft||0)-e/2,top:window.outerHeight/2+(window.screenY||window.screenTop||0)-t/2}},v=function(e,t){return{top:(window.screen.height-t)/2,left:(window.screen.width-e)/2}};function g(e,t,n){var r=t.height,o=t.width,i=h(t,["height","width"]),a=f({height:r,width:o,location:"no",toolbar:"no",status:"no",directories:"no",menubar:"no",scrollbars:"yes",resizable:"no",centerscreen:"yes",chrome:"yes"},i),l=window.open(e,"",Object.keys(a).map((function(e){return e+"="+a[e]})).join(", "));if(n)var u=window.setInterval((function(){try{(null===l||l.closed)&&(window.clearInterval(u),n(l))}catch(e){console.error(e)}}),1e3);return l}const b=function(e){function n(){var t=null!==e&&e.apply(this,arguments)||this;return t.openShareDialog=function(e){var n=t.props,r=n.onShareWindowClose,o=n.windowHeight,i=void 0===o?400:o,a=n.windowPosition,l=void 0===a?"windowCenter":a,u=n.windowWidth,s=void 0===u?550:u;g(e,f({height:i,width:s},"windowCenter"===l?y(s,i):v(s,i)),r)},t.handleClick=function(e){return d(t,void 0,void 0,(function(){var t,n,r,o,i,a,l,u,s,c;return p(this,(function(f){switch(f.label){case 0:return t=this.props,n=t.beforeOnClick,r=t.disabled,o=t.networkLink,i=t.onClick,a=t.url,l=t.openShareDialogOnClick,u=t.opts,s=o(a,u),r?[2]:(e.preventDefault(),n?(c=n(),m(c)?[4,c]:[3,2]):[3,2]);case 1:f.sent(),f.label=2;case 2:return l&&this.openShareDialog(s),i&&i(e,s),[2]}}))}))},t}return c(n,e),n.prototype.render=function(){var e=this.props,n=(e.beforeOnClick,e.children),r=e.className,o=e.disabled,i=e.disabledStyle,a=e.forwardedRef,l=(e.networkLink,e.networkName),u=(e.onShareWindowClose,e.openShareDialogOnClick,e.opts,e.resetButtonStyle),c=e.style,d=(e.url,e.windowHeight,e.windowPosition,e.windowWidth,h(e,["beforeOnClick","children","className","disabled","disabledStyle","forwardedRef","networkLink","networkName","onShareWindowClose","openShareDialogOnClick","opts","resetButtonStyle","style","url","windowHeight","windowPosition","windowWidth"])),p=s()("react-share__ShareButton",{"react-share__ShareButton--disabled":!!o,disabled:!!o},r),m=f(f(u?{backgroundColor:"transparent",border:"none",padding:0,font:"inherit",color:"inherit",cursor:"pointer"}:{},c),o&&i);return t.createElement("button",f({},d,{"aria-label":d["aria-label"]||l,className:p,onClick:this.handleClick,ref:a,style:m}),n)},n.defaultProps={disabledStyle:{opacity:.6},openShareDialogOnClick:!0,resetButtonStyle:!0},n}(t.Component);var w=function(){return(w=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};const S=function(e,n,r,o){function i(i,a){var l=r(i),u=w({},i);return Object.keys(l).forEach((function(e){delete u[e]})),t.createElement(b,w({},o,u,{forwardedRef:a,networkName:e,networkLink:n,opts:r(i)}))}return i.displayName="ShareButton-"+e,(0,t.forwardRef)(i)},E=S("facebook",(function(e,t){var n=t.quote,r=t.hashtag;return a(e,"facebook.url"),"https://www.facebook.com/sharer/sharer.php"+l({u:e,quote:n,hashtag:r})}),(function(e){return{quote:e.quote,hashtag:e.hashtag}}),{windowWidth:550,windowHeight:400});var k=function(){return(k=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};function x(e){var n=function(n){var r=n.bgStyle,o=n.borderRadius,i=n.iconFillColor,a=n.round,l=n.size,u=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(n,["bgStyle","borderRadius","iconFillColor","round","size"]);return t.createElement("svg",k({viewBox:"0 0 64 64",width:l,height:l},u),a?t.createElement("circle",{cx:"32",cy:"32",r:"31",fill:e.color,style:r}):t.createElement("rect",{width:"64",height:"64",rx:o,ry:o,fill:e.color,style:r}),t.createElement("path",{d:e.path,fill:i}))};return n.defaultProps={bgStyle:{},borderRadius:0,iconFillColor:"white",size:64},n}const C=x({color:"#3b5998",networkName:"facebook",path:"M34.1,47V33.3h4.6l0.7-5.3h-5.3v-3.4c0-1.5,0.4-2.6,2.6-2.6l2.8,0v-4.8c-0.5-0.1-2.2-0.2-4.1-0.2 c-4.1,0-6.9,2.5-6.9,7V28H24v5.3h4.6V47H34.1z"}),O=S("twitter",(function(e,t){var n=t.title,r=t.via,o=t.hashtags,i=void 0===o?[]:o,u=t.related,s=void 0===u?[]:u;return a(e,"twitter.url"),a(Array.isArray(i),"twitter.hashtags is not an array"),a(Array.isArray(s),"twitter.related is not an array"),"https://twitter.com/share"+l({url:e,text:n,via:r,hashtags:i.length>0?i.join(","):void 0,related:s.length>0?s.join(","):void 0})}),(function(e){return{hashtags:e.hashtags,title:e.title,via:e.via,related:e.related}}),{windowWidth:550,windowHeight:400}),_=x({color:"#00aced",networkName:"twitter",path:"M48,22.1c-1.2,0.5-2.4,0.9-3.8,1c1.4-0.8,2.4-2.1,2.9-3.6c-1.3,0.8-2.7,1.3-4.2,1.6 C41.7,19.8,40,19,38.2,19c-3.6,0-6.6,2.9-6.6,6.6c0,0.5,0.1,1,0.2,1.5c-5.5-0.3-10.3-2.9-13.5-6.9c-0.6,1-0.9,2.1-0.9,3.3 c0,2.3,1.2,4.3,2.9,5.5c-1.1,0-2.1-0.3-3-0.8c0,0,0,0.1,0,0.1c0,3.2,2.3,5.8,5.3,6.4c-0.6,0.1-1.1,0.2-1.7,0.2c-0.4,0-0.8,0-1.2-0.1 c0.8,2.6,3.3,4.5,6.1,4.6c-2.2,1.8-5.1,2.8-8.2,2.8c-0.5,0-1.1,0-1.6-0.1c2.9,1.9,6.4,2.9,10.1,2.9c12.1,0,18.7-10,18.7-18.7 c0-0.3,0-0.6,0-0.8C46,24.5,47.1,23.4,48,22.1z"}),R=S("pinterest",(function(e,t){var n=t.media,r=t.description;return a(e,"pinterest.url"),a(n,"pinterest.media"),"https://pinterest.com/pin/create/button/"+l({url:e,media:n,description:r})}),(function(e){return{media:e.media,description:e.description}}),{windowWidth:1e3,windowHeight:730}),P=x({color:"#cb2128",networkName:"pinterest",path:"M32,16c-8.8,0-16,7.2-16,16c0,6.6,3.9,12.2,9.6,14.7c0-1.1,0-2.5,0.3-3.7 c0.3-1.3,2.1-8.7,2.1-8.7s-0.5-1-0.5-2.5c0-2.4,1.4-4.1,3.1-4.1c1.5,0,2.2,1.1,2.2,2.4c0,1.5-0.9,3.7-1.4,5.7 c-0.4,1.7,0.9,3.1,2.5,3.1c3,0,5.1-3.9,5.1-8.5c0-3.5-2.4-6.1-6.7-6.1c-4.9,0-7.9,3.6-7.9,7.7c0,1.4,0.4,2.4,1.1,3.1 c0.3,0.3,0.3,0.5,0.2,0.9c-0.1,0.3-0.3,1-0.3,1.3c-0.1,0.4-0.4,0.6-0.8,0.4c-2.2-0.9-3.3-3.4-3.3-6.1c0-4.5,3.8-10,11.4-10 c6.1,0,10.1,4.4,10.1,9.2c0,6.3-3.5,11-8.6,11c-1.7,0-3.4-0.9-3.9-2c0,0-0.9,3.7-1.1,4.4c-0.3,1.2-1,2.5-1.6,3.4 c1.4,0.4,3,0.7,4.5,0.7c8.8,0,16-7.2,16-16C48,23.2,40.8,16,32,16z"}),T=function(e){return t.createElement("div",{id:"share"},t.createElement(E,{url:window.location.href,title:"Hi There! I love this product! You should check it out!"},t.createElement(C,{size:32,round:!0})),t.createElement(O,{url:window.location.href,title:"Hi There! I love this product! You should check it out!"},t.createElement(_,{size:32,round:!0})),t.createElement(R,{url:window.location.href,description:"Hi There! I love this product! You should check it out!",media:e.selectedStyle.photos[e.currPhotoIndex].url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg"},t.createElement(P,{size:32,round:!0})))},N=function(e){if(e.selectedStyle){var n=e.selectedStyle.photos;return t.createElement("div",{id:"defaultView"},t.createElement("a",{target:"_blank"},t.createElement("img",{src:n[e.currPhotoIndex].url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.selectedStyle.name,className:"defaultView",id:e.selectedStyle.style_id,onClick:e.toggleView}),t.createElement("a",{onClick:e.toggleView,id:"fullscreenIcon"},t.createElement("i",{class:"fas fa-expand"})),0!==e.currPhotoIndex?t.createElement("a",{onClick:e.handleLeftClick,id:"leftArrow"},"←"):null,e.currPhotoIndex!==n.length-1?t.createElement("a",{onClick:e.handleRightClick,id:"rightArrow"},"→"):null))}return null};function j(e){return(j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function I(e,t){return(I=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e,t){return!t||"object"!==j(t)&&"function"!=typeof t?M(e):t}function M(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function D(e){return(D=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&I(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=D(o);if(i){var n=D(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={zoomView:!1},t.toggleZoomView=t.toggleZoomView.bind(M(t)),t.handleMouseMove=t.handleMouseMove.bind(M(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){document.getElementById("expandedView").addEventListener("mousemove",this.handleMouseMove)}},{key:"componentWillUnmount",value:function(){document.getElementById("expandedView").removeEventListener("mousemove",this.handleMouseMove)}},{key:"toggleZoomView",value:function(){this.setState({zoomView:!this.state.zoomView})}},{key:"handleMouseMove",value:function(e){var t=document.getElementById("expandedView"),n=e.offsetX/t.clientWidth*100,r=e.offsetY/t.clientHeight*100;t.style.backgroundPositionX=n+"%",t.style.backgroundPositionY=r+"%"}},{key:"render",value:function(){if(this.props.selectedStyle&&!this.state.zoomView){var e=this.props.selectedStyle.photos;return t.createElement("div",{id:"expandedView"},t.createElement("a",{target:"_blank"},t.createElement("img",{onClick:this.toggleZoomView,src:e[this.props.currPhotoIndex].url,alt:this.props.selectedStyle.name,className:this.state.zoomView?"zoomInView":"zoomOutView",id:this.props.selectedStyle.style_id}),t.createElement("a",{onClick:this.props.toggleView,id:"fullscreenIcon"},t.createElement("i",{class:"fas fa-expand"})),0!==this.props.currPhotoIndex?t.createElement("a",{onClick:this.props.handleLeftClick,id:"leftArrow"},"←"):null,this.props.currPhotoIndex!==this.props.styleInfo.length-1?t.createElement("a",{onClick:this.props.handleRightClick,id:"rightArrow"},"→"):null))}return this.state.zoomView?(e=this.props.selectedStyle.photos,t.createElement("div",{id:"expandedView",className:this.state.zoomView?"zoomInView":"zoomOutView",style:{backgroundImage:"url('".concat(e[this.props.currPhotoIndex].url,"')")},onMouseMove:this.handleMouseMove,onClick:this.toggleZoomView})):null}}])&&A(n.prototype,r),l}(t.Component);function B(e){return(B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(e,t){return(F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function H(e,t){return!t||"object"!==B(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function U(e){return(U=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const W=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&F(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=U(o);if(i){var n=U(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={},t}return n=l,(r=[{key:"render",value:function(){return this.props.averageRating?t.createElement("div",{id:"starRating"},t.createElement("span",{class:"stars",style:{"--rating":this.props.averageRating}})):t.createElement("div",{id:"starRating"},t.createElement("span",{class:"stars",style:{"--rating":0}}))}}])&&q(n.prototype,r),l}(t.Component),Q=function(e){return e.info&&e.selectedStyle?t.createElement("div",{id:"productInfo"},t.createElement("div",{id:"productCategory"},e.info.category.toUpperCase()),t.createElement("div",{id:"productTitle"},e.info.name),t.createElement("div",{id:"productPrice"},"$",e.info.default_price),t.createElement("div",{id:"styleInfo"},t.createElement("b",null,"STYLE >")," ",e.selectedStyle.name.toUpperCase())):t.createElement("div",{id:"productInfo"})},V=function(e){return(e.i+1)%4==0?t.createElement("a",{onClick:e.changeStyle,id:e.index,target:"_blank"},t.createElement("img",{src:e.style.photos[0].thumbnail_url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.style.name,className:"style",id:e.index}),t.createElement("br",null)):t.createElement("a",{onClick:e.changeStyle,id:e.index,target:"_blank"},t.createElement("img",{src:e.style.photos[0].thumbnail_url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.style.name,className:"style",id:e.index}))},$=function(e){return t.createElement("a",{id:e.index,class:"img-container",target:"_blank"},t.createElement("img",{src:e.style.photos[0].thumbnail_url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.style.name,className:"style",id:e.style.style_id}),t.createElement("i",{id:"checkIcon",class:"fa fa-check-circle"}))},Y=function(e){if(e.styleInfo){var n=0;return t.createElement("div",{id:"styleSelector"},t.createElement($,{changeStyle:e.changeStyle,style:e.selectedStyle,index:e.indexStyleSelected}),e.styleInfo.map((function(r,o){if(o!==e.indexStyleSelected)return n+=1,t.createElement(V,{changeStyle:e.changeStyle,style:r,index:o,i:n})})))}return t.createElement("div",{id:"styleSelector"})},J=function(e){return 0!==e.availableSizes.length?t.createElement("button",{id:"addToBagButton",onClick:e.handleAddToBagSubmit},"ADD TO BAG"):null};function X(e){return(X="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function K(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function G(e,t){return(G=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Z(e,t){return!t||"object"!==X(t)&&"function"!=typeof t?ee(e):t}function ee(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function te(e){return(te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}n(755);const ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&G(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=te(o);if(i){var n=te(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Z(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={selectedSize:"SELECT SIZE",selectedQuantity:"-",maxQuantity:1,showMessage:!1},t.handleSizeChange=t.handleSizeChange.bind(ee(t)),t.updateMaxQuantity=t.updateMaxQuantity.bind(ee(t)),t.handleQuantityChange=t.handleQuantityChange.bind(ee(t)),t.handleAddToBagSubmit=t.handleAddToBagSubmit.bind(ee(t)),t}return n=l,(r=[{key:"handleSizeChange",value:function(e){var t=e.target.value;this.updateMaxQuantity(t),this.setState({selectedSize:t,selectedQuantity:1,showMessage:!1})}},{key:"updateMaxQuantity",value:function(e){for(var t,n=0;n<this.props.availableSizes.length;n++)this.props.availableSizes[n][0]===e&&(t=this.props.availableSizes[n][1]);t>15&&(t=15),this.setState({maxQuantity:t})}},{key:"handleQuantityChange",value:function(e){var t=e.target.value;this.setState({selectedQuantity:t})}},{key:"handleAddToBagSubmit",value:function(){if("SELECT SIZE"!==this.state.selectedSize){for(var e=0;e<this.props.availableSizes.length;e++)if(this.props.availableSizes[e][0]===this.state.selectedSize)var t=this.props.availableSizes[e][2];var n={sku_id:t,count:this.state.selectedQuantity};fetch("/cart",{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(n)}).then((function(e){console.log("Posted cart!")})).catch((function(e){console.log(e)}))}else this.setState({showMessage:!0})}},{key:"render",value:function(){for(var e=[],n=1;n<this.state.maxQuantity+1;n++)e.push(n);var r=this.props.availableSizes[0]?"SELECT SIZE":"OUT OF STOCK",o="SELECT SIZE"===this.state.selectedSize?"-":1;return t.createElement("div",{id:"addToBag"},this.state.showMessage?t.createElement("a",{id:"errorMessage"},"Please Select Size"):null,t.createElement("br",null),t.createElement("select",{name:this.state.selectedSize,id:"selectSize",placeholder:r,onChange:this.handleSizeChange},t.createElement("option",{value:r},r),this.props.availableSizes.map((function(e){return t.createElement("option",{value:e[0]},e[0])}))),t.createElement("select",{name:this.state.selectedQuantity,id:"selectQuantity",placeholder:o,onChange:this.handleQuantityChange},"SELECT SIZE"===this.state.selectedSize?t.createElement("option",{value:"-"},"-"):null,e.map((function(e){return t.createElement("option",{value:e},e)}))),t.createElement("br",null),t.createElement(J,{handleAddToBagSubmit:this.handleAddToBagSubmit,availableSizes:this.props.availableSizes}),t.createElement("button",{id:"starButton"},"☆"))}}])&&K(n.prototype,r),l}(t.Component),re=function(e){return e.info&&e.info.slogan?t.createElement("div",{id:"overviewDescription"},t.createElement("h2",null,e.info.slogan),t.createElement("div",null,e.info.description)):t.createElement("div",{id:"overviewDescription"})},oe=function(e){return e.info&&e.info.features?t.createElement("div",{id:"overviewFeatures"},e.info.features.map((function(e){return t.createElement("div",{id:e.feature,className:"feature"},"✓ ",e.feature,": ",e.value)}))):t.createElement("div",{id:"overviewFeatures"})},ie=function(e){return e.index===e.indexSelected?t.createElement("a",{target:"_blank"},t.createElement("img",{src:e.photo.thumbnail_url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.name,className:"stylePhoto"+e.view+" selectedThumbnail",id:e.index}),t.createElement("br",null)):t.createElement("a",{target:"_blank"},t.createElement("img",{src:e.photo.thumbnail_url||"https://www.thermaxglobal.com/wp-content/uploads/2020/05/image-not-found.jpg",alt:e.name,className:"stylePhoto"+e.view,id:e.index,onClick:e.handlePhotoSelection}),t.createElement("br",null))};function ae(e){return(ae="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function le(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ue(e,t){return(ue=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function se(e,t){return!t||"object"!==ae(t)&&"function"!=typeof t?ce(e):t}function ce(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function fe(e){return(fe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const de=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ue(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=fe(o);if(i){var n=fe(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return se(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={firstPhotoIndex:0,photoIndexList:null},t.handleUpScroll=t.handleUpScroll.bind(ce(t)),t.handleDownScroll=t.handleDownScroll.bind(ce(t)),t}return n=l,(r=[{key:"handleUpScroll",value:function(){var e=0===this.state.firstPhotoIndex?this.props.selectedStyle.photos.length-1:this.state.firstPhotoIndex-1;this.setState({firstPhotoIndex:e})}},{key:"handleDownScroll",value:function(){var e=this.state.firstPhotoIndex===this.props.selectedStyle.photos.length-1?0:this.state.firstPhotoIndex+1;this.setState({firstPhotoIndex:e})}},{key:"render",value:function(){var e=this;if(this.props.selectedStyle){var n=this.props.selectedStyle.photos.slice(this.state.firstPhotoIndex,this.state.firstPhotoIndex+7);if(n.length<7){var r=this.props.selectedStyle.photos.slice(0,7-n.length);n=n.concat(r)}return t.createElement("div",{id:"thumbnailList",className:this.props.view},this.props.selectedStyle.photos.length>7?t.createElement("a",{onClick:this.handleUpScroll,id:"upScroll-container"},t.createElement("i",{id:"upScroll",class:"fa fa-angle-up"})):null,t.createElement("br",null),n.map((function(n,r){var o=r;if(o+e.state.firstPhotoIndex>=e.props.selectedStyle.photos.length)var i=o+e.state.firstPhotoIndex-e.props.selectedStyle.photos.length;else i=o+e.state.firstPhotoIndex;return t.createElement(ie,{name:e.props.selectedStyle.name,photo:n,index:i,indexSelected:e.props.currPhotoIndex,handlePhotoSelection:e.props.handlePhotoSelection,view:e.props.view})})),this.props.selectedStyle.photos.length>7?t.createElement("a",{onClick:this.handleDownScroll,id:"downScroll-container"},t.createElement("i",{id:"downScroll",class:"fa fa-angle-down"})):null)}return null}}])&&le(n.prototype,r),l}(t.Component);function pe(e){return(pe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function he(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function me(e,t){return(me=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ye(e,t){return!t||"object"!==pe(t)&&"function"!=typeof t?ve(e):t}function ve(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ge(e){return(ge=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const be=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&me(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ge(o);if(i){var n=ge(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ye(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={view:"default",currPhotoIndex:0},t.handlePhotoSelection=t.handlePhotoSelection.bind(ve(t)),t.handleLeftClick=t.handleLeftClick.bind(ve(t)),t.handleRightClick=t.handleRightClick.bind(ve(t)),t.toggleView=t.toggleView.bind(ve(t)),t}return n=l,(r=[{key:"toggleView",value:function(){"default"===this.state.view?this.setState({view:"expanded"}):this.setState({view:"default"})}},{key:"handlePhotoSelection",value:function(e){var t=e.target.id;t=Number(t),this.setState({currPhotoIndex:t})}},{key:"handleLeftClick",value:function(e){e.preventDefault();var t=this.props.selectedStyle.photos.length,n=0===this.state.currPhotoIndex?t-1:this.state.currPhotoIndex-1;this.setState({currPhotoIndex:n})}},{key:"handleRightClick",value:function(e){e.preventDefault();var t=this.props.selectedStyle.photos.length,n=this.state.currPhotoIndex===t-1?0:this.state.currPhotoIndex+1;this.setState({currPhotoIndex:n})}},{key:"render",value:function(){var e=[];if(this.props.selectedStyle){var n=this.props.selectedStyle.skus;for(var r in n)e.push([n[r].size,n[r].quantity,r])}return t.createElement("div",{id:"productDetails"},"default"===this.state.view?t.createElement("div",{id:"firstPanelDefault"},t.createElement(de,{selectedStyle:this.props.selectedStyle,styleInfo:this.props.styleInfo,currPhotoIndex:this.state.currPhotoIndex,handlePhotoSelection:this.handlePhotoSelection,view:this.state.view}),t.createElement(N,{selectedStyle:this.props.selectedStyle,styleInfo:this.props.styleInfo,currPhotoIndex:this.state.currPhotoIndex,toggleView:this.toggleView,handleLeftClick:this.handleLeftClick,handleRightClick:this.handleRightClick}),t.createElement("div",{id:"info"},t.createElement(W,{averageRating:this.props.averageRating}),t.createElement(Q,{info:this.props.info,selectedStyle:this.props.selectedStyle}),t.createElement(Y,{changeStyle:this.props.handleStyleSelection,styleInfo:this.props.styleInfo,indexStyleSelected:this.props.indexStyleSelected,selectedStyle:this.props.selectedStyle}),t.createElement(ne,{selectedStyle:this.props.selectedStyle,availableSizes:e}))):t.createElement("div",{id:"firstPanelExpanded"},t.createElement(de,{selectedStyle:this.props.selectedStyle,styleInfo:this.props.styleInfo,currPhotoIndex:this.state.currPhotoIndex,handlePhotoSelection:this.handlePhotoSelection,view:this.state.view}),t.createElement(z,{selectedStyle:this.props.selectedStyle,styleInfo:this.props.styleInfo,currPhotoIndex:this.state.currPhotoIndex,toggleView:this.toggleView,handleLeftClick:this.handleLeftClick,handleRightClick:this.handleRightClick})),t.createElement("div",{id:"secondPanel"},t.createElement(re,{info:this.props.info}),t.createElement(oe,{info:this.props.info}),t.createElement(T,{currPhotoIndex:this.state.currPhotoIndex,selectedStyle:this.props.selectedStyle})))}}])&&he(n.prototype,r),l}(t.Component);var we=n(755),Se=n.n(we);const Ee=function(e){return t.createElement("div",{className:"qa-search"},t.createElement("input",{"aria-label":"Search through questions",class:"qa-search-input",type:"search",placeholder:"HAVE A QUESTION? SEARCH FOR ANSWERS...",value:e.query,onChange:e.handleSearch}))};var ke=function(e,t,n){var r="";return e||(r+="\n question"),t||(r+="\n nickname"),function(e){return/^[^\s@]+@[^\s@]+$/.test(e)}(n)||(r+="\n email"),r?"Please enter a valid: ".concat(r):null};const xe=function(e){var n,r,o=JSON.parse(localStorage.getItem("question"===e.content_type?"helpfulQuestions":"helpfulAnswers"));return n=e.reported?t.createElement("span",null," ",t.createElement("i",null,"Reported")," | "):t.createElement("span",null,t.createElement("button",{className:"qa-button-link",onClick:e.handleReportButtonClick}," Report ")),r=o.includes(e.content_id)?t.createElement("span",null," ","Helpful?"," ",t.createElement("i",null,"Yes")," ","(".concat(e.helpfulness,") | ")):t.createElement("span",null,t.createElement("span",null," Helpful? "),t.createElement("button",{className:"qa-button-link",onClick:e.handleHelpfulButtonClick}," Yes "),t.createElement("span",null," ","(".concat(e.helpfulness,") | ")," ")),t.createElement("span",null,r,n)};function Ce(e){return(Ce="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _e(e,t){return(_e=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Re(e,t){return!t||"object"!==Ce(t)&&"function"!=typeof t?Pe(e):t}function Pe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Te(e){return(Te=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Ne=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_e(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Te(o);if(i){var n=Te(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Re(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={reported:!1,helpfulness:t.props.helpfulness},t.handleHelpfulButtonClick=t.handleHelpfulButtonClick.bind(Pe(t)),t.handleReportButtonClick=t.handleReportButtonClick.bind(Pe(t)),t}return n=l,(r=[{key:"handleHelpfulButtonClick",value:function(){var e,t=this;(e=this.props.answer_id.toString(),Se().ajax({url:"/qa/answers/".concat(e,"/helpful"),method:"PUT"})).then((function(){var e=JSON.parse(localStorage.getItem("helpfulAnswers"));e.push(t.props.answer_id),localStorage.setItem("helpfulAnswers",JSON.stringify(e)),t.props.incrementHelpfulAnswer(t.props.answer_id),t.setState({helpfulness:t.state.helpfulness+1})})).catch((function(e){console.log(e)}))}},{key:"handleReportButtonClick",value:function(){var e,t=this;(e=this.props.answer_id.toString(),Se().ajax({url:"/qa/answers/".concat(e,"/report"),method:"PUT"})).then((function(){t.setState({reported:!0})})).catch((function(e){console.log(e)}))}},{key:"render",value:function(){var e,n,r,o,i,a=this.props.answer,l=a.answerer_name,u=a.date,s=a.body;return t.createElement("div",{className:"qa-answer"},t.createElement("div",{className:"qa-answer-text"},s),t.createElement("div",{className:"qa-answer-footer"},t.createElement("span",null," by ","Seller"===(i=l)?t.createElement("b",null,i):i,", ",(n={"01":"January","02":"February","03":"March","04":"April","05":"May","06":"June","07":"July","08":"August","09":"September",10:"October",11:"November",12:"December"}[(e=u.slice(0,10).split("-"))[1]],r="0"===e[2][0]?e[2][1]:e[2],o=e[0],"".concat(n," ").concat(r,", ").concat(o))," "),t.createElement("span",null," "," | "," "),t.createElement("span",null," ",t.createElement(xe,{handleHelpfulButtonClick:this.handleHelpfulButtonClick,handleReportButtonClick:this.handleReportButtonClick,reported:this.state.reported,helpfulness:this.state.helpfulness,content_id:this.props.answer_id,content_type:"answer"}))))}}])&&Oe(n.prototype,r),l}(t.Component);function je(e){return(je="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ae(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ie(e,t){return(Ie=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Le(e,t){return!t||"object"!==je(t)&&"function"!=typeof t?Me(e):t}function Me(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function De(e){return(De=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const ze=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ie(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=De(o);if(i){var n=De(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Le(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={answers:[],remainingAnswers:[],showAnswersList:!1,showLoadMoreAnswersButton:!1,showCollapseAnswersListButton:!1},t.initialize(),t.collapseAnswersList=t.collapseAnswersList.bind(Me(t)),t.loadRemainingAnswers=t.loadRemainingAnswers.bind(Me(t)),t.incrementHelpfulAnswer=t.incrementHelpfulAnswer.bind(Me(t)),t}return n=l,(r=[{key:"initialize",value:function(){var e=function(e){for(var t=e.sort((function(e,t){return t.helpfulness-e.helpfulness})),n=[],r=0;r<t.length;r++)"Seller"===t[r].answerer_name&&(n=n.concat(t.splice(r,1)),r--);return n.concat(t)}(Object.values(this.props.answers)),t=e.slice(0,2),n=e.slice(2);t.length&&(this.state.answers=t,this.state.showAnswersList=!0),n.length&&(this.state.remainingAnswers=n,this.state.showLoadMoreAnswersButton=!0)}},{key:"collapseAnswersList",value:function(){this.setState({remainingAnswers:this.state.answers.slice(2),answers:this.state.answers.slice(0,2),showLoadMoreAnswersButton:!0,showCollapseAnswersListButton:!1})}},{key:"loadRemainingAnswers",value:function(){this.setState({answers:this.state.answers.concat(this.state.remainingAnswers),remainingAnswers:[],showLoadMoreAnswersButton:!1,showCollapseAnswersListButton:!0})}},{key:"incrementHelpfulAnswer",value:function(e){this.state.showCollapseAnswersListButton&&this.state.answers.forEach((function(t){t.id===e&&t.helpfulness++}))}},{key:"render",value:function(){var e=this;return this.state.showAnswersList&&t.createElement("div",{className:"qa-answers-list-container"},t.createElement("div",{className:"qa-big-a"},t.createElement("b",null,"A:")),t.createElement("div",{className:"qa-answers-list"},this.state.answers.map((function(n){return t.createElement(Ne,{key:n.id,answer:n,helpfulness:n.helpfulness,answer_id:n.id,incrementHelpfulAnswer:e.incrementHelpfulAnswer})})),this.state.showLoadMoreAnswersButton&&t.createElement("button",{className:"qa-answers-list-button",onClick:this.loadRemainingAnswers}," See more answers "),this.state.showCollapseAnswersListButton&&t.createElement("button",{className:"qa-answers-list-button",onClick:this.collapseAnswersList}," Collapse answers ")))}}])&&Ae(n.prototype,r),l}(t.Component);function Be(e){return(Be="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fe(e,t){return(Fe=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function He(e,t){return!t||"object"!==Be(t)&&"function"!=typeof t?Ue(e):t}function Ue(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function We(e){return(We=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Qe=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fe(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=We(o);if(i){var n=We(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return He(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={answer:"",nickname:"",email:""},t.handleChange=t.handleChange.bind(Ue(t)),t}return n=l,(r=[{key:"handleChange",value:function(e){var t=e.target.name,n=e.target.value;this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n))}},{key:"render",value:function(){return t.createElement("div",{className:"qa-modal",onClick:this.props.closeAnswerModal},t.createElement("div",{className:"qa-modal-content",onClick:function(e){return e.stopPropagation()}},t.createElement("div",{className:"qa-modal-top-row"},t.createElement("div",{className:"qa-modal-header"},t.createElement("h4",{className:"qa-modal-title"}," SUBMIT YOUR ANSWER "),t.createElement("h5",{className:"qa-modal-title"}," ","".concat(this.props.name,": ").concat(this.props.question)," ")),t.createElement("img",{className:"qa-modal-close",onClick:this.props.closeAnswerModal,src:"/images/close.png"})),t.createElement("div",{className:"qa-modal-body"},t.createElement("form",{className:"qa-modal-form",onSubmit:this.props.handleAnswerSubmit},t.createElement("label",null,"Your Answer*",t.createElement("br",null),t.createElement("textarea",{maxlength:"1000",cols:"50",rows:"10",name:"answer",value:this.state.answer,onChange:this.handleChange})),t.createElement("br",null),t.createElement("label",null,"What Is Your Nickname?*",t.createElement("br",null),t.createElement("input",{name:"nickname",maxlength:"60",size:"60",value:this.state.nickname,onChange:this.handleChange,placeholder:"Example: jack543!"}),t.createElement("br",null),t.createElement("small",null," For privacy reasons, do not use your full name or email address ")),t.createElement("br",null),t.createElement("label",null,"Your Email*",t.createElement("br",null),t.createElement("input",{name:"email",maxlength:"60",size:"60",value:this.state.email,onChange:this.handleChange,placeholder:"Example: jack@email.com"}),t.createElement("br",null),t.createElement("small",null," For authentication reasons, you will not be emailed ")),t.createElement("br",null),t.createElement("input",{className:"qa-button",type:"submit",value:"Submit Answer"})))))}}])&&qe(n.prototype,r),l}(t.Component);function Ve(e){return(Ve="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ye(e,t){return(Ye=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Je(e,t){return!t||"object"!==Ve(t)&&"function"!=typeof t?Xe(e):t}function Xe(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ke(e){return(Ke=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Ge=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ye(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ke(o);if(i){var n=Ke(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Je(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={helpfulness:t.props.helpfulness,reported:!1,showAnswerModal:!1},t.handleAddAnswerClick=t.handleAddAnswerClick.bind(Xe(t)),t.handleAnswerSubmit=t.handleAnswerSubmit.bind(Xe(t)),t.closeAnswerModal=t.closeAnswerModal.bind(Xe(t)),t.handleHelpfulButtonClick=t.handleHelpfulButtonClick.bind(Xe(t)),t.handleReportButtonClick=t.handleReportButtonClick.bind(Xe(t)),t}return n=l,(r=[{key:"handleHelpfulButtonClick",value:function(){var e,t=this;(e=this.props.question_id.toString(),Se().ajax({url:"/qa/questions/".concat(e,"/helpful"),method:"PUT"})).then((function(){var e=JSON.parse(localStorage.getItem("helpfulQuestions"));e.push(t.props.question_id),localStorage.setItem("helpfulQuestions",JSON.stringify(e)),t.setState({helpfulness:t.state.helpfulness+1})})).catch((function(e){console.log(e)}))}},{key:"handleReportButtonClick",value:function(){var e,t=this;(e=this.props.question_id.toString(),Se().ajax({url:"/qa/questions/".concat(e,"/report"),method:"PUT"})).then((function(){t.setState({reported:!0})})).catch((function(e){console.log(e)}))}},{key:"closeAnswerModal",value:function(){this.setState({showAnswerModal:!1})}},{key:"handleAddAnswerClick",value:function(){this.setState({showAnswerModal:!0})}},{key:"handleAnswerSubmit",value:function(e){e.preventDefault();var t=e.target.answer.value,n=e.target.nickname.value,r=e.target.email.value,o=ke(t,n,r);o?alert(o):(function(e,t,n,r){return Se().ajax({url:"/qa/questions/".concat(r.toString(),"/answers"),method:"POST",contentType:"application/json",processData:!1,data:JSON.stringify({body:e,name:t,email:n,photos:[]})})}(t,n,r,this.props.question_id).then((function(e){console.log(e)})).catch((function(e){console.log(e)})),this.setState({showAnswerModal:!1}))}},{key:"render",value:function(){return t.createElement("div",{className:"qa-list-item-container"},t.createElement("div",{className:"qa-question-container"},t.createElement("span",{className:"qa-question-text"},"Q:  ",this.props.question),t.createElement("span",{className:"qa-helpful-report-answer"},t.createElement(xe,{handleHelpfulButtonClick:this.handleHelpfulButtonClick,handleReportButtonClick:this.handleReportButtonClick,reported:this.state.reported,helpfulness:this.state.helpfulness,content_id:this.props.question_id,content_type:"question"}),t.createElement("span",null," | "),t.createElement("button",{className:"qa-button-link",onClick:this.handleAddAnswerClick}," Add Answer "))),t.createElement(ze,{answers:this.props.answers}),this.state.showAnswerModal&&t.createElement(Qe,{closeAnswerModal:this.closeAnswerModal,question:this.props.question,name:this.props.name,handleAnswerSubmit:this.handleAnswerSubmit}))}}])&&$e(n.prototype,r),l}(t.Component),Ze=function(e){return t.createElement("div",{className:"qa-questions-list-container-wrapper"},t.createElement("div",{className:"qa-questions-list-container"},e.questions.map((function(n){return t.createElement(Ge,{key:n.question_id,question:n.question_body,helpfulness:n.question_helpfulness,answers:n.answers,question_id:n.question_id,name:e.name,handleAddAnswerClick:e.handleAddAnswerClick})}))))};function et(e){return(et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nt(e,t){return(nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function rt(e,t){return!t||"object"!==et(t)&&"function"!=typeof t?ot(e):t}function ot(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function it(e){return(it=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const at=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=it(o);if(i){var n=it(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return rt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={question:"",nickname:"",email:""},t.handleChange=t.handleChange.bind(ot(t)),t}return n=l,(r=[{key:"handleChange",value:function(e){var t=e.target.name,n=e.target.value;this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n))}},{key:"render",value:function(){return t.createElement("div",{className:"qa-modal",onClick:this.props.closeQuestionModal},t.createElement("div",{className:"qa-modal-content",onClick:function(e){return e.stopPropagation()}},t.createElement("div",{className:"qa-modal-top-row"},t.createElement("div",{className:"qa-modal-header"},t.createElement("h4",{className:"qa-modal-title"}," ASK YOUR QUESTION "),t.createElement("h5",{className:"qa-modal-title"}," ","About the ".concat(this.props.name)," ")),t.createElement("img",{className:"qa-modal-close",onClick:this.props.closeQuestionModal,src:"/images/close.png"})),t.createElement("div",{className:"qa-modal-body"},t.createElement("form",{className:"qa-modal-form",onSubmit:this.props.handleQuestionSubmit},t.createElement("label",null,"Your Question*",t.createElement("br",null),t.createElement("textarea",{maxlength:"1000",cols:"50",rows:"10",name:"question",value:this.state.question,onChange:this.handleChange})),t.createElement("br",null),t.createElement("label",null,"What Is Your Nickname?*",t.createElement("br",null),t.createElement("input",{maxlength:"60",size:"60",name:"nickname",value:this.state.nickname,onChange:this.handleChange,placeholder:"Example: jackson11!"}),t.createElement("br",null),t.createElement("small",null," For privacy reasons, do not use your full name or email address ")),t.createElement("br",null),t.createElement("label",null,"Your Email*",t.createElement("br",null),t.createElement("input",{maxlength:"60",size:"60",name:"email",value:this.state.email,onChange:this.handleChange,placeholder:"Example: jack@email.com"}),t.createElement("br",null),t.createElement("small",null," For authentication reasons, you will not be emailed ")),t.createElement("br",null),t.createElement("input",{className:"qa-button",type:"submit",value:"SUBMIT QUESTION"})))))}}])&&tt(n.prototype,r),l}(t.Component);function lt(e){return(lt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function ut(e){return function(e){if(Array.isArray(e))return st(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return st(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?st(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function st(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function ct(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function ft(e,t){return(ft=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function dt(e,t){return!t||"object"!==lt(t)&&"function"!=typeof t?pt(e):t}function pt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ht(e){return(ht=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const mt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&ft(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ht(o);if(i){var n=ht(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return dt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={showMoreAnsweredQuestionsButton:!1,renderedQuestions:[],remainingQuestions:[],searchResults:null,showSearch:!1,query:"",showQuestionModal:!1},t.handleMoreQuestionsClick=t.handleMoreQuestionsClick.bind(pt(t)),t.handleSearch=t.handleSearch.bind(pt(t)),t.handleAddQuestionClick=t.handleAddQuestionClick.bind(pt(t)),t.handleQuestionSubmit=t.handleQuestionSubmit.bind(pt(t)),t.closeQuestionModal=t.closeQuestionModal.bind(pt(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){localStorage.getItem("helpfulQuestions")||localStorage.setItem("helpfulQuestions",JSON.stringify([])),localStorage.getItem("helpfulAnswers")||localStorage.setItem("helpfulAnswers",JSON.stringify([])),this.initialize()}},{key:"componentDidUpdate",value:function(e){e.product_id!==this.props.product_id&&this.initialize()}},{key:"initialize",value:function(){var e,t=this;(e=this.props.product_id,100,1,Se().ajax({url:"/qa/questions?product_id=".concat(e,"&count=").concat(100,"&page=").concat(1),method:"GET"})).then((function(e){var n=e.results;n.length?n.length<3?t.setState({searchResults:null,query:"",renderedQuestions:n,showSearch:!0,showMoreAnsweredQuestionsButton:!1}):t.setState({searchResults:null,query:"",renderedQuestions:n.slice(0,2),remainingQuestions:n.slice(2),showMoreAnsweredQuestionsButton:!0,showSearch:!0}):t.setState({searchResults:null,query:"",renderedQuestions:[],showMoreAnsweredQuestionsButton:!1,showSearch:!1})})).catch((function(e){console.log(e)}))}},{key:"closeQuestionModal",value:function(){this.setState({showQuestionModal:!1})}},{key:"handleMoreQuestionsClick",value:function(){var e=this.state.remainingQuestions.slice(0,2),t=this.state.remainingQuestions.slice(2);this.setState({renderedQuestions:[].concat(ut(this.state.renderedQuestions),ut(e)),remainingQuestions:t,showMoreAnsweredQuestionsButton:!!t.length})}},{key:"handleSearch",value:function(e){var n=e.target.value;if(n.length<3)this.setState({query:n,searchResults:null,showMoreAnsweredQuestionsButton:!0});else{var r=JSON.parse(JSON.stringify(this.state.renderedQuestions));(r=r.filter((function(e){return e.question_body.includes(n)}))).forEach((function(e){e.question_body=t.createElement("span",{dangerouslySetInnerHTML:{__html:e.question_body.split(n).join("<mark>".concat(n,"</mark>"))}})})),this.setState({query:n,searchResults:r,showMoreAnsweredQuestionsButton:!1})}}},{key:"handleAddQuestionClick",value:function(){this.setState({showQuestionModal:!0})}},{key:"handleQuestionSubmit",value:function(e){e.preventDefault();var t=e.target.question.value,n=e.target.nickname.value,r=e.target.email.value,o=ke(t,n,r);o?alert(o):(function(e,t,n,r){return Se().ajax({url:"/qa/questions",method:"POST",contentType:"application/json",processData:!1,data:JSON.stringify({body:e,name:t,email:n,product_id:Number(r)})})}(t,n,r,this.props.product_id).then((function(e){console.log(e)})).catch((function(e){console.log(e)})),this.setState({showQuestionModal:!1}))}},{key:"render",value:function(){return t.createElement("div",{id:"qa-component"},t.createElement("h5",{className:"qa-heading"}," ","QUESTIONS & ANSWERS"," "),this.state.showSearch&&t.createElement(Ee,{query:this.state.query,handleSearch:this.handleSearch}),t.createElement(Ze,{questions:this.state.searchResults||this.state.renderedQuestions,name:this.props.name}),this.state.showMoreAnsweredQuestionsButton&&t.createElement("button",{className:"qa-button",onClick:this.handleMoreQuestionsClick},"MORE ANSWERED QUESTIONS"),t.createElement("button",{className:"qa-button",onClick:this.handleAddQuestionClick},"ADD A QUESTION +"),this.state.showQuestionModal&&t.createElement(at,{name:this.props.name,handleQuestionSubmit:this.handleQuestionSubmit,closeQuestionModal:this.closeQuestionModal}))}}])&&ct(n.prototype,r),l}(t.Component),yt=function(e){return t.createElement("div",{onClick:function(){e.handleRatingBreakdownClick(e.star)},class:"review-breakdown-bar review-clickable"},t.createElement("span",{class:"review-clickable"},e.star," stars:"),t.createElement("span",null,t.createElement("progress",{max:"100",value:e.percentage})),t.createElement("span",{class:"review-breakdown-freq"},e.freq))};var vt=n(949),gt=n.n(vt);function bt(e){return(bt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wt(e){return function(e){if(Array.isArray(e))return St(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return St(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?St(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function St(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Et(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function kt(e,t){return(kt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function xt(e,t){return!t||"object"!==bt(t)&&"function"!=typeof t?Ct(e):t}function Ct(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ot(e){return(Ot=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const _t=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&kt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ot(o);if(i){var n=Ot(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return xt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={meta:{},ratings:{},averageRating:[0,0],breakdown:[[0,0],[0,0],[0,0],[0,0],[0,0]],recommended:0},t.initialize=t.initialize.bind(Ct(t)),t.handleRatingBreakdownClick=t.handleRatingBreakdownClick.bind(Ct(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){this.props.meta!==e.meta&&this.initialize()}},{key:"initialize",value:function(){this.setState({meta:this.props.meta,ratings:this.props.meta.ratings,averageRating:gt().computeAverageRating(this.props.meta.ratings),breakdown:gt().computeRatingBreakdown(this.props.meta.ratings),recommended:gt().computeRecommendedPercentage(this.props.meta.recommended)})}},{key:"handleRatingBreakdownClick",value:function(e){this.props.handleStarFilters(e)}},{key:"render",value:function(){var e=this;return Se().isEmptyObject(this.state.ratings)?t.createElement("div",{class:"review-rating-breakdown"},t.createElement("div",{class:"review-average-rating"},t.createElement("span",{class:"review-average-rating-number"},"0"),t.createElement("span",{class:"stars",style:{"--rating":0}})),t.createElement("div",{class:"review-rating-bar"},wt(Array(5).keys()).reverse().map((function(e){return t.createElement(yt,{star:e+1,percentage:0})})))):t.createElement("div",{class:"review-rating-breakdown"},t.createElement("div",{class:"review-average-rating"},t.createElement("span",{class:"review-average-rating-number"},this.state.averageRating[0]),t.createElement("span",{class:"stars",style:{"--rating":this.state.averageRating[1]}})),t.createElement("div",{class:"review-recommended-percentage"},t.createElement("span",null,this.state.recommended," of reviews recommended this product")),t.createElement("div",{class:"review-filter-panel"},t.createElement("div",{id:"review-filter-panel-title"},"Rating Breakdown"),t.createElement("div",null,"Currently applied filters: ",this.props.starFilters.map((function(e){return e+" "}))),t.createElement("div",{class:"review-clickable",onClick:this.props.removeFilters},"Remove all filters")),t.createElement("div",{class:"review-rating-bar"},wt(Array(5).keys()).reverse().map((function(n){return t.createElement(yt,{star:n+1,percentage:e.state.breakdown[n][0],freq:e.state.breakdown[n][1],handleRatingBreakdownClick:e.handleRatingBreakdownClick})}))))}}])&&Et(n.prototype,r),l}(t.Component),Rt=function(e){return null!==e.characteristic.value?t.createElement("div",null,t.createElement("label",{class:"review-product-characteristic-name"},e.characteristic.name),t.createElement("br",null),t.createElement("div",{class:"review-product-breakdown-container"},t.createElement("div",null,t.createElement("input",{class:"review-product-breakdown-bar",type:"range",min:"1",max:"5",value:e.characteristic.value})),t.createElement("div",{class:"review-product-breakdown-description-container"},[1,3,5].map((function(n){return t.createElement("span",{class:"review-product-breakdown-description"},gt().productCharacteristics[e.characteristic.name][n])}))))):t.createElement("div",null)};function Pt(e){return(Pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Tt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Nt(e,t){return(Nt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function jt(e,t){return!t||"object"!==Pt(t)&&"function"!=typeof t?At(e):t}function At(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function It(e){return(It=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Lt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Nt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=It(o);if(i){var n=It(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return jt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={meta:{},characteristics:{}},t.initialize=t.initialize.bind(At(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){this.props.meta!==e.meta&&this.initialize()}},{key:"initialize",value:function(){this.setState({meta:this.props.meta,characteristics:gt().formatCharacteristics(this.props.meta.characteristics)})}},{key:"render",value:function(){return Se().isEmptyObject(this.state.characteristics)?t.createElement("div",null):t.createElement("div",{class:"review-product-breakdown"},this.state.characteristics.map((function(e){return t.createElement(Rt,{characteristic:e})})))}}])&&Tt(n.prototype,r),l}(t.Component);function Mt(e){return(Mt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Dt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function zt(e,t){return(zt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Bt(e,t){return!t||"object"!==Mt(t)&&"function"!=typeof t?qt(e):t}function qt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Ft(e){return(Ft=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Ht=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&zt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Ft(o);if(i){var n=Ft(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Bt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={sortingValue:"relevance"},t.handleChange=t.handleChange.bind(qt(t)),t}return n=l,(r=[{key:"handleChange",value:function(e){this.props.handleOptionChanges(e.target.value),this.setState({sortingValue:e.target.value})}},{key:"render",value:function(){return t.createElement("div",{class:"review-sorting-options"},t.createElement("label",{for:"options"},this.props.reviews.length," reviews, sorted by "),t.createElement("select",{value:this.state.value,onChange:this.handleChange,name:"options",id:"sorting-options",class:"review-clickable"},t.createElement("option",{selected:"selected",value:"relevance"},"Relevant"),t.createElement("option",{value:"helpfulness"},"Helpful"),t.createElement("option",{value:"date"},"Newest")))}}])&&Dt(n.prototype,r),l}(t.Component);function Ut(e){return(Ut="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Qt(e,t){return(Qt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Vt(e,t){return!t||"object"!==Ut(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function $t(e){return($t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Yt=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Qt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=$t(o);if(i){var n=$t(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Vt(this,e)});function l(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),a.call(this,e)}return n=l,(r=[{key:"render",value:function(){return this.props.show?t.createElement("div",{class:"review-photo-modal",onClick:this.props.closeModal},t.createElement("div",{class:"review-photo-modal-content",onClick:function(e){return e.stopPropagation()}},t.createElement("img",{class:"review-photo-modal-content",src:this.props.url}))):null}}])&&Wt(n.prototype,r),l}(t.Component);function Jt(e){return(Jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Kt(e,t){return(Kt=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Gt(e,t){return!t||"object"!==Jt(t)&&"function"!=typeof t?Zt(e):t}function Zt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function en(e){return(en=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const tn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Kt(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=en(o);if(i){var n=en(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Gt(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={show:t.props.showPhotos},t.showModal=t.showModal.bind(Zt(t)),t.closeModal=t.closeModal.bind(Zt(t)),t}return n=l,(r=[{key:"showModal",value:function(){this.setState({show:!0})}},{key:"closeModal",value:function(){this.setState({show:!1})}},{key:"render",value:function(){return t.createElement(t.Fragment,null,t.createElement("img",{onClick:this.showModal,class:"review-photo",src:this.props.photo.url}),t.createElement(Yt,{show:this.state.show,closeModal:this.closeModal,url:this.props.photo.url}))}}])&&Xt(n.prototype,r),l}(t.Component);function nn(e){return(nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function rn(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function on(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function an(e,t){return(an=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function ln(e,t){return!t||"object"!==nn(t)&&"function"!=typeof t?un(e):t}function un(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function sn(e){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const cn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&an(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=sn(o);if(i){var n=sn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return ln(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state=rn({summary:"",body:"",additionalBody:"",showBody:!1,showAdditionalBody:!1,showAdditionalBodyButton:!1,showPhotos:!1,showRecommend:!1,showResponse:!1,reportStatus:!1,helpfulness:0,showAddHelpfulButton:!0},"reportStatus",!1),t.toggleAdditionalBody=t.toggleAdditionalBody.bind(un(t)),t.handleAddHelpful=t.handleAddHelpful.bind(un(t)),t.handleReport=t.handleReport.bind(un(t)),t}return n=l,(r=[{key:"toggleAdditionalBody",value:function(e){this.setState({showAdditionalBody:!this.state.showAdditionalBody,showBody:!this.state.showBody}),"Show More"===Se()(e.target).text()?Se()(e.target).text("Show Less"):Se()(e.target).text("Show More")}},{key:"handleAddHelpful",value:function(){var e=this;Se().ajax({url:"reviews/".concat(this.props.review.review_id,"/helpful"),method:"PUT"}).then((function(){var t=JSON.parse(sessionStorage.getItem("helpfulReviews"));t.push(e.props.review.review_id),sessionStorage.setItem("helpfulReviews",JSON.stringify(t));var n=JSON.parse(localStorage.getItem("helpfulReviews"));n.push(e.props.review.review_id),localStorage.setItem("helpfulReviews",JSON.stringify(n)),e.setState({helpfulness:e.state.helpfulness+1,showAddHelpfulButton:!1})})).catch((function(e){console.log(e)}))}},{key:"handleReport",value:function(){var e=this;Se().ajax({url:"reviews/".concat(this.props.review.review_id,"/report"),method:"PUT"}).then((function(){var t=JSON.parse(sessionStorage.getItem("reportedReviews"));t.push(e.props.review.review_id),sessionStorage.setItem("reportedReviews",JSON.stringify(t)),e.setState({reportStatus:!0})})).catch((function(e){console.log(e)}))}},{key:"componentDidMount",value:function(){var e=gt().formatReviewTile(this.props.review.summary,this.props.review.body,this.props.review.photos,this.props.review.review_id);this.setState(rn({summary:e[0],body:e[1],additionalBody:e[2],showBody:!0,showAdditionalBody:!1,showAdditionalBodyButton:e[3],showPhotos:e[4],showRecommend:this.props.review.recommend,showResponse:!(null===this.props.review.response||0===this.props.review.response.length),reportStatus:!1,helpfulness:this.props.review.helpfulness+e[5],showAddHelpfulButton:e[6]},"reportStatus",e[7]))}},{key:"render",value:function(){var e=this;return t.createElement("div",{class:"review-tile"},t.createElement("div",{class:"review-tile-top-panel"},t.createElement("span",{class:"stars",style:{"--rating":this.props.review.rating}}),t.createElement("span",null,this.props.review.reviewer_name,", ",gt().formatDate(this.props.review.date.slice(0,10)))),t.createElement("div",{class:"review-summary"},this.state.summary),t.createElement("div",{class:"review-body",hidden:!this.state.showBody},this.state.body),t.createElement("div",{class:"review-additional-body",hidden:!this.state.showAdditionalBody},this.state.additionalBody),t.createElement("div",{class:"review-additional-body-button review-clickable",hidden:!this.state.showAdditionalBodyButton,onClick:this.toggleAdditionalBody},"Show More"),t.createElement("div",{class:"review-photos",hidden:!this.state.showPhotos},this.props.review.photos.map((function(n){return t.createElement(tn,{photo:n,showPhotos:e.state.showPhotos})}))),t.createElement("div",{class:"user-recommend",hidden:!this.state.showRecommend},"I recommend this product!"),t.createElement("div",{class:"seller-response",hidden:!this.state.showResponse},"Response: ",this.props.review.response),t.createElement("div",{class:"review-bottom-panel"},t.createElement("span",null,"Helpful?"),this.state.showAddHelpfulButton?t.createElement("span",{class:"review-clickable",onClick:this.handleAddHelpful},"Yes"):t.createElement("span",null,"Yes"),t.createElement("span",null,"(",this.state.helpfulness,")"),t.createElement("span",null,"|"),this.state.reportStatus?t.createElement("span",null,"Reported!"):t.createElement("span",{class:"review-clickable",onClick:this.handleReport},"Report")))}}])&&on(n.prototype,r),l}(t.Component);function fn(e){return(fn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function pn(e,t){return(pn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function hn(e,t){return!t||"object"!==fn(t)&&"function"!=typeof t?mn(e):t}function mn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function yn(e){return(yn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const vn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&pn(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=yn(o);if(i){var n=yn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return hn(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={allReviews:[],currentReviews:[],otherReviews:[],showMoreReviewsButton:!1,showLessReviewsButton:!1,sortingOption:"relevance"},t.initialize=t.initialize.bind(mn(t)),t.showMoreReviews=t.showMoreReviews.bind(mn(t)),t.showLessReviews=t.showLessReviews.bind(mn(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){this.props.reviews!==e.reviews&&this.initialize()}},{key:"componentWillReceiveProps",value:function(e){e.reviews.length>2?this.setState({allReviews:e.reviews,currentReviews:e.reviews.slice(0,2),otherReviews:e.reviews.slice(2),showMoreReviewsButton:!0,showLessReviewsButton:!1,sortingOption:e.sortingOption}):this.setState({allReviews:e.reviews,currentReviews:e.reviews,otherReviews:[],showMoreReviewsButton:!1,showLessReviewsButton:!1,sortingOption:e.sortingOption})}},{key:"initialize",value:function(){this.props.reviews&&this.props.reviews.length>2?this.setState({allReviews:this.props.reviews,currentReviews:this.props.reviews.slice(0,2),otherReviews:this.props.reviews.slice(2),showMoreReviewsButton:!0,showLessReviewsButton:!1,sortingOption:this.props.sortingOption}):this.setState({allReviews:this.props.reviews,currentReviews:this.props.reviews,otherReviews:[],showMoreReviewsButton:!1,showLessReviewsButton:!1,sortingOption:this.props.sortingOption})}},{key:"showMoreReviews",value:function(){this.state.otherReviews.length>2?this.setState({currentReviews:this.state.currentReviews.concat(this.state.otherReviews.slice(0,2)),otherReviews:this.state.otherReviews.slice(2),showLessReviewsButton:!0}):this.setState({currentReviews:this.state.currentReviews.concat(this.state.otherReviews),showMoreReviewsButton:!1,showLessReviewsButton:!0})}},{key:"showLessReviews",value:function(){this.setState({currentReviews:this.state.allReviews.slice(0,2),otherReviews:this.state.allReviews.slice(2),showMoreReviewsButton:!0,showLessReviewsButton:!1})}},{key:"render",value:function(){return 0!==this.state.allReviews.length?t.createElement("div",{key:this.props.reviews[0].review_id,class:"reviews-list"},t.createElement("div",{class:"reviews-list-tiles"},this.state.currentReviews.map((function(e){return t.createElement(cn,{review:e})}))),t.createElement("div",null,t.createElement("button",{class:"review-button review-more",onClick:this.showMoreReviews,hidden:!this.state.showMoreReviewsButton},"MORE REVIEWS"),t.createElement("button",{class:"review-button review-less",onClick:this.showLessReviews,hidden:!this.state.showLessReviewsButton},"LESS REVIEWS"))):t.createElement("div",{class:"review-empty-reviews-list"},"Such emptiness! Be the first person to review this product!")}}])&&dn(n.prototype,r),l}(t.Component);function gn(e){return(gn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bn(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function wn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Sn(e,t){return(Sn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function En(e,t){return!t||"object"!==gn(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function kn(e){return(kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const xn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Sn(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=kn(o);if(i){var n=kn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return En(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={},t}return n=l,(r=[{key:"render",value:function(){var e,n=this;return t.createElement("div",{class:"review-form-characteristic-radio-container"},t.createElement("div",null,t.createElement("div",{class:"review-form-characteristic-name"},this.props.characteristic.name),t.createElement("div",{class:"review-form-characteristic-radio"},(e=Array(5).keys(),function(e){if(Array.isArray(e))return bn(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return bn(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?bn(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).map((function(e){return t.createElement("div",{class:"review-form-radio-description"},t.createElement("div",null,t.createElement("input",{type:"radio",name:"characteristics"+n.props.characteristic.name,value:e+1,class:n.props.characteristic.id,onChange:n.props.handleChange}),t.createElement("label",{for:"characteristics"+n.props.characteristic.name},e+1)),t.createElement("div",null,t.createElement("span",{class:"review-form-characteristic-description"},gt().productCharacteristics[n.props.characteristic.name][e+1])))})))))}}])&&wn(n.prototype,r),l}(t.Component);function Cn(e){return(Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function On(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _n(e,t){return(_n=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Rn(e,t){return!t||"object"!==Cn(t)&&"function"!=typeof t?Pn(e):t}function Pn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Tn(e){return(Tn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Nn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_n(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Tn(o);if(i){var n=Tn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Rn(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={rating:"",summary:"",body:"",recommend:!0,name:"",email:"",photos:[],characteristics:{},photoCount:0,show:!1,showUploadPhotosButton:!0},t.handleChange=t.handleChange.bind(Pn(t)),t.handlePhotoUpload=t.handlePhotoUpload.bind(Pn(t)),t.handleSubmit=t.handleSubmit.bind(Pn(t)),t.toggleModal=t.toggleModal.bind(Pn(t)),t.validateForm=t.validateForm.bind(Pn(t)),t}return n=l,(r=[{key:"handleChange",value:function(e){var t=e.target.name,n=e.target.value;if("characteristics"===t.slice(0,15)){var r=this.state.characteristics;r[e.target.className.toString()]=Number.parseInt(n),n=r,t=t.slice(0,15)}this.setState(function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}({},t,n))}},{key:"handlePhotoUpload",value:function(e){var t=this;Se()("#review-form-upload-photo").text("uploading...");var n,r=document.getElementById("review-uploaded-photo").files[0],o=new FileReader;o.onload=function(){n=o.result,Se().ajax({url:"/review/image",method:"POST",dataType:"text",data:{dataURI:n}}).then((function(e){var n=t.state.photoCount+1<5,r=t.state.photos;r.push(e),t.setState({photos:r,photoCount:t.state.photoCount+1,showUploadPhotosButton:n},(function(){Se()("#review-form-upload-photo").text("")}))})).catch((function(e){console.log(e),Se()("#review-form-upload-photo").text("upload failed")}))},o.readAsDataURL(r)}},{key:"handleSubmit",value:function(e){var t=this;if(e.preventDefault(),this.validateForm()){var n={product_id:Number.parseInt(this.props.meta.product_id),rating:Number.parseInt(this.state.rating),summary:this.state.summary,body:this.state.body,recommend:JSON.parse(this.state.recommend),name:this.state.name,email:this.state.email,photos:this.state.photos,characteristics:this.state.characteristics};Se().ajax({url:"/reviews",method:"POST",contentType:"application/json; charset=utf-8",data:JSON.stringify(n)}).then((function(){t.setState({rating:"",summary:"",body:"",recommend:!0,name:"",email:"",photos:[],characteristics:{},photoCount:0,show:!1,showUploadPhotosButton:!0},t.props.closeModal)})).catch((function(e){console.log(e)}))}}},{key:"toggleModal",value:function(){this.setState({show:!this.state.show})}},{key:"validateForm",value:function(){var e=this,t=!0;return["rating","summary","body","name","email","characteristics"].forEach((function(n){var r="characteristics"===n&&Object.keys(e.state[n]).length!==Object.keys(e.props.meta.characteristics).length;"email"===n&&-1===e.state[n].indexOf("@")||r||""===e.state[n]?(Se()("#review-form-"+n).text("*required"),t=!1):Se()("#review-form-"+n).text("")})),t}},{key:"render",value:function(){var e,n=this;return this.props.show?(0!==this.state.photos.length&&(e=t.createElement("div",null,this.state.photos.map((function(e){return t.createElement("img",{class:"review-photo review-thumbnail",src:e})})))),t.createElement("div",{className:"review-form-modal",onClick:this.props.closeModal},t.createElement("div",{className:"review-form-modal-content",onClick:function(e){return e.stopPropagation()}},t.createElement("div",{className:"review-form-modal-header"},t.createElement("div",null,"Write Your Review"),t.createElement("div",null,"About the ",this.props.productName)),t.createElement("form",{onSubmit:this.handleSubmit},t.createElement("div",{className:"review-form-modal-body"},t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Overall rating:"),t.createElement("span",{id:"review-form-rating",class:"review-form-invalid-warning"}),t.createElement("div",null,t.createElement("select",{id:"review-form-overall-rating",name:"rating",value:this.state.rating,onChange:this.handleChange},t.createElement("option",{value:""},"--Please choose an option--"),t.createElement("option",{value:5},"5"),t.createElement("option",{value:4},"4"),t.createElement("option",{value:3},"3"),t.createElement("option",{value:2},"2"),t.createElement("option",{value:1},"1")))),t.createElement("div",{id:"review-form-recommend"},t.createElement("label",{class:"review-form-sub-heading"},"Do you recommend this product?"),t.createElement("div",null,t.createElement("input",{type:"radio",id:"review-recommend-yes",name:"recommend",value:!0,checked:!0,onChange:this.handleChange}),t.createElement("label",{for:"recommend"},"Yes")),t.createElement("div",null,t.createElement("input",{type:"radio",id:"review-recommend-no",name:"recommend",value:!1,onChange:this.handleChange}),t.createElement("label",{for:"recommend"},"No"))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Characteristics:"),t.createElement("span",{id:"review-form-characteristics",class:"review-form-invalid-warning"}),t.createElement("div",{class:"review-form-all-characteristics"},gt().formatCharacteristics(this.props.meta.characteristics).map((function(e){return t.createElement(xn,{characteristic:e,handleChange:n.handleChange})})))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Review summary:"),t.createElement("span",{id:"review-form-summary",class:"review-form-invalid-warning"}),t.createElement("div",null,t.createElement("input",{name:"summary",type:"text",maxlength:"60",size:"70",placeholder:"Example: Best purchase ever!",value:this.state.summary,onChange:this.handleChange}))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Review body:"),t.createElement("span",{id:"review-form-body",class:"review-form-invalid-warning"}),t.createElement("div",null,t.createElement("textarea",{id:"review-form-body",name:"body",rows:"10",cols:"70",placeholder:"Why did you like the product or not?",value:this.state.body,onChange:this.handleChange}))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Your uploaded photo(s):"),e,t.createElement("div",null,t.createElement("div",null,t.createElement("input",{type:"file",name:"photo",accept:"image/*",value:this.state.photo,id:"review-uploaded-photo",onChange:this.handlePhotoUpload,hidden:!this.state.showUploadPhotosButton,style:{display:"none"}})),t.createElement("div",null,t.createElement("label",{id:"review-form-upload-photo-button",class:"review-clickable",type:"button",for:"review-uploaded-photo"},"Upload Photo"),t.createElement("span",{id:"review-form-upload-photo",class:"review-form-invalid-warning"})))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Your nickname:"),t.createElement("span",{id:"review-form-name",class:"review-form-invalid-warning"}),t.createElement("div",null,t.createElement("input",{name:"name",type:"text",maxlength:"40",size:"50",placeholder:"Example: jackson11",value:this.state.name,onChange:this.handleChange}))),t.createElement("div",null,t.createElement("label",{class:"review-form-sub-heading"},"Your email:"),t.createElement("span",{id:"review-form-email",class:"review-form-invalid-warning"}),t.createElement("div",null,t.createElement("input",{name:"email",type:"text",maxlength:"40",size:"50",placeholder:"Example: jackson11@email.com",value:this.state.email,onChange:this.handleChange}))),t.createElement("div",null,t.createElement("button",{class:"review-button"},"SUBMIT REVIEW"))))))):null}}])&&On(n.prototype,r),l}(t.Component);function jn(e){return(jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function An(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function In(e,t){return(In=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Ln(e,t){return!t||"object"!==jn(t)&&"function"!=typeof t?Mn(e):t}function Mn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const zn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&In(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Dn(o);if(i){var n=Dn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Ln(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={show:!1},t.showModal=t.showModal.bind(Mn(t)),t.closeModal=t.closeModal.bind(Mn(t)),t}return n=l,(r=[{key:"showModal",value:function(){this.setState({show:!0})}},{key:"closeModal",value:function(){this.setState({show:!1})}},{key:"render",value:function(){return t.createElement("div",null,t.createElement("button",{id:"review-form-add-button",class:"review-button",onClick:this.showModal},"ADD A REVIEW +"),t.createElement(Nn,{show:this.state.show,closeModal:this.closeModal,productName:this.props.productName,meta:this.props.meta}))}}])&&An(n.prototype,r),l}(t.Component);function Bn(e){return(Bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function qn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Fn(e,t){return(Fn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Hn(e,t){return!t||"object"!==Bn(t)&&"function"!=typeof t?Un(e):t}function Un(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Wn(e){return(Wn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Qn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Fn(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Wn(o);if(i){var n=Wn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Hn(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={keyword:""},t.handleChange=t.handleChange.bind(Un(t)),t}return n=l,(r=[{key:"handleChange",value:function(e){this.setState({keyword:e.target.value},this.props.handleSearch(e.target.value))}},{key:"render",value:function(){return t.createElement("div",{class:"review-search-container"},t.createElement("input",{class:"review-search-bar",type:"search",placeholder:"SEARCH...",value:this.state.keyword,onChange:this.handleChange}))}}])&&qn(n.prototype,r),l}(t.Component);function Vn(e){return(Vn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Yn(e,t){return(Yn=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Jn(e,t){return!t||"object"!==Vn(t)&&"function"!=typeof t?Xn(e):t}function Xn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Kn(e){return(Kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Gn=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Yn(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Kn(o);if(i){var n=Kn(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Jn(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={meta:{},reviews:[],filteredReviews:[],sortingOption:"relevance",starFilters:[],keyword:""},t.initialize=t.initialize.bind(Xn(t)),t.handleOptionChanges=t.handleOptionChanges.bind(Xn(t)),t.handleStarFilters=t.handleStarFilters.bind(Xn(t)),t.updateReviews=t.updateReviews.bind(Xn(t)),t.removeFilters=t.removeFilters.bind(Xn(t)),t.handleSearch=t.handleSearch.bind(Xn(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){this.props.product_id!==e.product_id&&this.initialize()}},{key:"initialize",value:function(){var e=this;Se().ajax({url:"reviews/?product_id=".concat(this.props.product_id,"&page=1&count=100&sort=relevant"),method:"GET"}).then((function(t){e.setState({meta:e.props.meta,reviews:t.results,filteredReviews:gt().sortReviews(t.results,e.state.sortingOption)})})).catch((function(e){console.log(e)})),localStorage.getItem("helpfulReviews")||localStorage.setItem("helpfulReviews",JSON.stringify([])),sessionStorage.setItem("helpfulReviews",JSON.stringify([])),sessionStorage.setItem("reportedReviews",JSON.stringify([]))}},{key:"handleOptionChanges",value:function(e){var t=this.updateReviews(this.state.reviews,e,this.state.starFilters,this.state.keyword);this.setState({sortingOption:e,filteredReviews:t})}},{key:"handleStarFilters",value:function(e){var t=this.state.starFilters.slice();-1===this.state.starFilters.indexOf(e)?t.push(e):t.splice(this.state.starFilters.indexOf(e),1);var n=this.updateReviews(this.state.reviews,this.state.sortingOption,t,this.state.keyword);this.setState({starFilters:t,filteredReviews:n})}},{key:"removeFilters",value:function(){var e=this.updateReviews(this.state.reviews,this.state.sortingOption,[],this.state.keyword);this.setState({starFilters:[],filteredReviews:e})}},{key:"handleSearch",value:function(e){e.length<3&&(e="");var t=this.updateReviews(this.state.reviews,this.state.sortingOption,this.state.starFilters,e);this.setState({keyword:e,filteredReviews:t})}},{key:"updateReviews",value:function(e,t,n,r){var o=gt().sortReviews(e,t),i=gt().applyStarFilters(o,n);return gt().applyKeyword(i,r)}},{key:"render",value:function(){return Se().isEmptyObject(this.state.meta)||null===this.props.info?t.createElement("div",null,"Loading..."):t.createElement("div",{class:"review-overall-container"},t.createElement("span",null,"RATINGS & REVIEWS"),t.createElement("div",{class:"review-content-container"},t.createElement("div",{id:"review-left-container",class:"review-sub-container left"},t.createElement(_t,{product_id:this.props.product_id,meta:this.state.meta,handleStarFilters:this.handleStarFilters,starFilters:this.state.starFilters,removeFilters:this.removeFilters}),t.createElement(Lt,{meta:this.state.meta})),t.createElement("div",{id:"review-right-container",class:"review-sub-container right"},t.createElement(Qn,{handleSearch:this.handleSearch}),t.createElement(Ht,{handleOptionChanges:this.handleOptionChanges,reviews:this.state.filteredReviews}),t.createElement(vn,{reviews:this.state.filteredReviews,sortingOption:this.state.sortingOption}),t.createElement(zn,{productName:this.props.info.name,meta:this.state.meta}))))}}])&&$n(n.prototype,r),l}(t.Component);var Zn=n(215);function er(e){return(er="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function nr(e,t){return(nr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function rr(e,t){return!t||"object"!==er(t)&&"function"!=typeof t?or(e):t}function or(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function ir(e){return(ir=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const ar=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&nr(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ir(o);if(i){var n=ir(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return rr(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={thumbnailUrl:"",category:"",name:"",price:"",rating:"",features:[]},t.handleRelatedItemClick=t.props.handleRelatedItemClick.bind(or(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){var e=this;(0,Zn.getProductInfo)(this.props.id).then((function(t){return e.setState({category:t.category,name:t.name,rating:"4.5",features:t.features})})),(0,Zn.getProductStyles)(this.props.id).then((function(t){(0,Zn.findDefaultStyle)(t.results).then((function(t){var n,r;n=t.sale_price?t.sale_price:t.original_price,r=t.photos[0].thumbnail_url?t.photos[0].thumbnail_url:"https://cdn.shopify.com/s/files/1/0533/2089/files/placeholder-images-image_large.png?format=webp&v=1530129081",e.setState({thumbnailUrl:r,price:n})}))})),(0,Zn.getProductRatings)(this.props.id).then((function(t){var n=(0,vt.computeAverageRating)(t.ratings)[1];"NaN"===n&&(n="0.00"),e.setState({rating:n})}))}},{key:"render",value:function(){var e=this,n=this.state.features,r=this.state.name;return t.createElement("div",{className:"rp-card",onClick:function(){return e.handleRelatedItemClick(e.props.id)}},t.createElement("div",{id:"rp-action-container"},t.createElement("div",{className:"rp-card-action",id:"rp-card-compare",onClick:function(t){return e.props.toggleModal(t,n,r)}}," ")),t.createElement("div",{id:"rp-thumbnail-container"},t.createElement("img",{id:"rp-thumbnail-image",src:this.state.thumbnailUrl})),t.createElement("div",{id:"rp-content-container"},t.createElement("p",{id:"rp-card-category"},this.state.category),t.createElement("p",{id:"rp-card-name"},this.state.name),t.createElement("p",{id:"rp-card-price"},"$",this.state.price),t.createElement("span",{class:"stars",style:{"--rating":this.state.rating}})))}}])&&tr(n.prototype,r),l}(t.Component),lr=function(e){if(!e.showModal)return null;var n=0,r=e.mainProduct[1],o=e.productToCompare[1],i=(0,Zn.findComparisonFeatures)(r,o);return t.createElement("div",{id:"rp-comparison-modal-background",onClick:function(t){return e.toggleModal(t)}},t.createElement("div",{id:"rp-comparison-modal"},t.createElement("h4",null,"COMPARING"),t.createElement("div",{className:"rp-modal-product-names"},t.createElement("p",null,e.mainProduct[0]),t.createElement("p",null,e.productToCompare[0])),i.map((function(e){return"main"===e.product?t.createElement("div",{className:"rp-modal-row"},t.createElement("div",{key:n++,className:"rp-modal-col-1"},e.value),t.createElement("div",{key:n++,className:"rp-modal-col-2"},e.feature),t.createElement("div",{key:n++,className:"rp-modal-col-3"},e.compValue)):t.createElement("div",{className:"rp-modal-row"},t.createElement("div",{key:n++,className:"rp-modal-col-1"},e.compValue),t.createElement("div",{key:n++,className:"rp-modal-col-2"},e.feature),t.createElement("div",{key:n++,className:"rp-modal-col-3"},e.value))}))))};function ur(e){return(ur="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function sr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function cr(e,t){return(cr=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function fr(e,t){return!t||"object"!==ur(t)&&"function"!=typeof t?dr(e):t}function dr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function pr(e){return(pr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&cr(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=pr(o);if(i){var n=pr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return fr(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={showModal:!1,itemToCompare:"",mainProductFeatures:[],featuresToCompare:[]},t.toggleModal=t.toggleModal.bind(dr(t)),t}return n=l,(r=[{key:"toggleModal",value:function(e,t,n){e.stopPropagation(),this.state.showModal||this.setState({itemToCompare:n,featuresToCompare:t}),this.setState({showModal:!this.state.showModal},(0,Zn.preventScroll)())}},{key:"scrollLeft",value:function(e){e.target.parentNode.scrollLeft+=320}},{key:"scrollRight",value:function(e){e.target.parentNode.scrollLeft-=320}},{key:"render",value:function(){var e=this;return t.createElement("div",{className:"rp-strip"},t.createElement("div",{id:"rp-left-arrow",onClick:this.scrollRight},"<"),t.createElement(lr,{showModal:this.state.showModal,toggleModal:this.toggleModal,mainProduct:[this.props.productName,this.props.productFeatures],productToCompare:[this.state.itemToCompare,this.state.featuresToCompare]}),this.props.items.map((function(n){return t.createElement(ar,{id:n,key:n,toggleModal:e.toggleModal,handleRelatedItemClick:e.props.handleRelatedItemClick})})),t.createElement("div",{id:"rp-right-arrow",onClick:this.scrollLeft},">"))}}])&&sr(n.prototype,r),l}(t.Component),mr=function(e){return t.createElement("div",{id:"rp-add-to-outfit-card",onClick:e.addToOutfit},t.createElement("p",null,"+"),t.createElement("p",null,"Add to Outfit"))},yr=function(e){return t.createElement("div",{className:"rp-card",id:e.productInfo.id,onClick:function(){return e.handleRelatedItemClick(e.productInfo.id)}},t.createElement("div",{id:"rp-action-container"},t.createElement("div",{className:"rp-card-action",id:"rp-card-remove",onClick:function(t){return e.removeFromOutfit(t)}}," ")),t.createElement("div",{id:"rp-thumbnail-container"},t.createElement("img",{id:"rp-thumbnail-image",src:e.productInfo.thumbnailUrl})),t.createElement("div",{id:"rp-content-container"},t.createElement("p",{id:"rp-card-category"},e.productInfo.category),t.createElement("p",{id:"rp-card-name"},e.productInfo.name),t.createElement("p",{id:"rp-card-price"},"$",e.productInfo.price),t.createElement("span",{class:"stars",style:{"--rating":e.productInfo.rating}})))};function vr(e){return(vr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gr(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function br(e,t){return(br=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function wr(e,t){return!t||"object"!==vr(t)&&"function"!=typeof t?Sr(e):t}function Sr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Er(e){return(Er=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const kr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&br(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Er(o);if(i){var n=Er(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return wr(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={outfits:[],mainProduct:{thumbnailUrl:"",category:"",name:"",price:"",rating:"",id:""}},t.addToOutfit=t.addToOutfit.bind(Sr(t)),t.removeFromOutfit=t.removeFromOutfit.bind(Sr(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){e.info.id!==this.props.info.id&&this.initialize()}},{key:"initialize",value:function(){var e=(0,Zn.defineMainProduct)(this.props.info,this.props.defaultStyle,this.props.averageRating);if(this.setState({mainProduct:e}),localStorage.getItem("outfits")){var t=JSON.parse(localStorage.getItem("outfits"));this.setState({outfits:t})}else localStorage.setItem("outfits",JSON.stringify([]))}},{key:"addToOutfit",value:function(){var e=JSON.parse(localStorage.getItem("outfits")),t=this.state.mainProduct,n=!1;e.forEach((function(e){e.id===t.id&&(n=!0)})),n||(e.push(t),localStorage.setItem("outfits",JSON.stringify(e)),this.setState({outfits:e}))}},{key:"removeFromOutfit",value:function(e){e.stopPropagation();var t=JSON.parse(localStorage.getItem("outfits")),n=parseInt(e.target.parentNode.parentNode.id);if(t){var r=this.state.outfits,o=[];r.forEach((function(e){e.id!==n&&o.push(e)})),localStorage.setItem("outfits",JSON.stringify(o)),this.setState({outfits:o})}}},{key:"scrollLeft",value:function(e){e.target.parentNode.scrollLeft+=320}},{key:"scrollRight",value:function(e){e.target.parentNode.scrollLeft-=320}},{key:"render",value:function(){var e=this;return t.createElement("div",{className:"rp-strip"},t.createElement("div",{id:"rp-left-arrow",onClick:this.scrollRight},"<"),t.createElement(mr,{addToOutfit:this.addToOutfit}),0!==this.state.outfits.length&&this.state.outfits.map((function(n){return t.createElement(yr,{key:n.id,productInfo:n,removeFromOutfit:e.removeFromOutfit,handleRelatedItemClick:e.props.handleRelatedItemClick})})),t.createElement("div",{id:"rp-right-arrow",onClick:this.scrollLeft},">"))}}])&&gr(n.prototype,r),l}(t.Component);function xr(e){return(xr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Cr(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Or(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function _r(e,t){return(_r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Rr(e,t){return!t||"object"!==xr(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function Pr(e){return(Pr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const Tr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&_r(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Pr(o);if(i){var n=Pr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Rr(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={relatedItemsIds:[]},t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"componentDidUpdate",value:function(e){this.props.product_id!==e.product_id&&this.initialize()}},{key:"initialize",value:function(){var e=this;(0,Zn.getRelatedItems)(this.props.product_id).then((function(t){var n,r=function(e){if(Array.isArray(e))return Cr(e)}(n=new Set(t))||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(n)||function(e,t){if(e){if("string"==typeof e)return Cr(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Cr(e,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}();e.setState({relatedItemsIds:r})}))}},{key:"render",value:function(){return t.createElement("div",{id:"rp-wrapper"},t.createElement("h4",null,"RELATED PRODUCTS"),t.createElement(hr,{items:this.state.relatedItemsIds,productName:this.props.info.name,productFeatures:this.props.info.features,handleRelatedItemClick:this.props.handleRelatedItemClick}),t.createElement("h4",null,"YOUR OUTFIT"),t.createElement(kr,{info:this.props.info,defaultStyle:this.props.selectedStyle,averageRating:this.props.averageRating,handleRelatedItemClick:this.props.handleRelatedItemClick}))}}])&&Or(n.prototype,r),l}(t.Component),Nr=function(e,n){return function(r){return t.createElement("div",{onClick:function(e){fetch("/interactions",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({element:e.target.outerHTML,widget:n,time:new Date})}).catch((function(e){return console.log("Error:",e)}))}},t.createElement(e,r))}};function jr(e){return(jr="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ar(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Ir(e,t){return(Ir=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function Lr(e,t){return!t||"object"!==jr(t)&&"function"!=typeof t?Mr(e):t}function Mr(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function Dr(e){return(Dr=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var zr=Nr(be,"Product Details"),Br=Nr(Tr,"Related Items"),qr=Nr(mt,"Questions and Answers"),Fr=Nr(Gn,"Ratings and Reviews"),Hr=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&Ir(e,t)}(l,e);var n,r,o,i,a=(o=l,i=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=Dr(o);if(i){var n=Dr(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return Lr(this,e)});function l(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,l),(t=a.call(this,e)).state={product_id:"",info:null,selectedStyle:null,styleInfo:null,indexStyleSelected:null,meta:null,averageRating:null},t.handleStyleSelection=t.handleStyleSelection.bind(Mr(t)),t.handleRelatedItemClick=t.handleRelatedItemClick.bind(Mr(t)),t.initialize=t.initialize.bind(Mr(t)),t}return n=l,(r=[{key:"componentDidMount",value:function(){this.initialize()}},{key:"initialize",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"22122";Promise.all([fetch("/products/".concat(t)),fetch("/products/".concat(t,"/styles")),fetch("/reviews/meta?product_id=".concat(t))]).then((function(e){return Promise.all(e.map((function(e){return e.json()})))})).then((function(n){for(var r=n[1],o=0;o<r.results.length;o++)if(r.results[o]["default?"])var i=r.results[o],a=o;e.setState({product_id:t,info:n[0],selectedStyle:i||r.results[0],indexStyleSelected:a||0,styleInfo:r.results,meta:n[2],averageRating:(0,vt.computeAverageRating)(n[2].ratings)[1]})})).catch((function(e){console.log(e)}))}},{key:"handleStyleSelection",value:function(e){e.preventDefault();var t=Number(e.target.id);this.setState({indexStyleSelected:t,selectedStyle:this.state.styleInfo[t]})}},{key:"handleRelatedItemClick",value:function(e){var t=e.toString();this.initialize(t)}},{key:"render",value:function(){return""===this.state.product_id?t.createElement("div",null,"loading..."):t.createElement("div",null,t.createElement("nav",null,t.createElement("div",{id:"nav-logo"},"LOGO"),t.createElement("div",{id:"nav-search"},t.createElement("input",{type:"text"}),t.createElement("div",{class:"search-icon"}," "))),t.createElement("div",{id:"announcement-banner"},t.createElement("em",null,"SITE-WIDE ANNOUNCEMENT MESSAGE!"),"  —  SALE / DISCOUNT ",t.createElement("strong",null,"OFFER"),"  —  ",t.createElement("u",null,"NEW PRODUCT HIGHLIGHT")),t.createElement(zr,{product_id:this.state.product_id,info:this.state.info,selectedStyle:this.state.selectedStyle,styleInfo:this.state.styleInfo,indexStyleSelected:this.state.indexStyleSelected,handleStyleSelection:this.handleStyleSelection,averageRating:this.state.averageRating}),t.createElement(Br,{product_id:this.state.product_id,info:this.state.info,selectedStyle:this.state.selectedStyle,averageRating:this.state.averageRating,handleRelatedItemClick:this.handleRelatedItemClick}),t.createElement(qr,{product_id:this.state.product_id,name:this.state.info.name}),t.createElement(Fr,{product_id:this.state.product_id,info:this.state.info,meta:this.state.meta}))}}])&&Ar(n.prototype,r),l}(t.Component);r.render(t.createElement(Hr,null),document.getElementById("app"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2hlbHBlcnMuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvaGVscGVycy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvY2xhc3NuYW1lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2hhcmUvZXMvdXRpbHMvYXNzZXJ0LmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9yZWFjdC1zaGFyZS9lcy91dGlscy9vYmplY3RUb0dldFBhcmFtcy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2hhcmUvZXMvU2hhcmVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNoYXJlL2VzL2hvY3MvY3JlYXRlU2hhcmVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNoYXJlL2VzL0ZhY2Vib29rU2hhcmVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNoYXJlL2VzL2hvY3MvY3JlYXRlSWNvbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2hhcmUvZXMvRmFjZWJvb2tJY29uLmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9yZWFjdC1zaGFyZS9lcy9Ud2l0dGVyU2hhcmVCdXR0b24uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNoYXJlL2VzL1R3aXR0ZXJJY29uLmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL25vZGVfbW9kdWxlcy9yZWFjdC1zaGFyZS9lcy9QaW50ZXJlc3RTaGFyZUJ1dHRvbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc2hhcmUvZXMvUGludGVyZXN0SWNvbi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcHJvZHVjdF9kZXRhaWxzL1NoYXJlVG9Tb2NpYWxNZWRpYS5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9EZWZhdWx0Vmlldy5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9FeHBhbmRlZFZpZXcuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9wcm9kdWN0X2RldGFpbHMvU3RhclJhdGluZy5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9Qcm9kdWN0SW5mby5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9TdHlsZVRodW1ibmFpbC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9TdHlsZUNoZWNrVGh1bWJuYWlsLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcHJvZHVjdF9kZXRhaWxzL1N0eWxlU2VsZWN0b3IuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9wcm9kdWN0X2RldGFpbHMvQWRkVG9CYWdCdXR0b24uanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9wcm9kdWN0X2RldGFpbHMvQWRkVG9CYWcuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9wcm9kdWN0X2RldGFpbHMvT3ZlcnZpZXdEZXNjcmlwdGlvbi5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9PdmVydmlld0ZlYXR1cmVzLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcHJvZHVjdF9kZXRhaWxzL1RodW1ibmFpbC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3Byb2R1Y3RfZGV0YWlscy9UaHVtYm5haWxMaXN0LmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcHJvZHVjdF9kZXRhaWxzL1Byb2R1Y3REZXRhaWxzLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcXVlc3Rpb25zX2Fuc3dlcnMvY29tcG9uZW50cy9TZWFyY2guanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9xdWVzdGlvbnNfYW5zd2Vycy9oZWxwZXJzLmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9xdWVzdGlvbnNfYW5zd2Vycy9jb21wb25lbnRzL0hlbHBmdWxSZXBvcnQuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9xdWVzdGlvbnNfYW5zd2Vycy9jb21wb25lbnRzL0Fuc3dlci5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3F1ZXN0aW9uc19hbnN3ZXJzL2NvbnRyb2xsZXJzLmpzIiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9xdWVzdGlvbnNfYW5zd2Vycy9jb21wb25lbnRzL0Fuc3dlcnNMaXN0LmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcXVlc3Rpb25zX2Fuc3dlcnMvY29tcG9uZW50cy9BbnN3ZXJGb3JtLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcXVlc3Rpb25zX2Fuc3dlcnMvY29tcG9uZW50cy9RdWVzdGlvbi5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3F1ZXN0aW9uc19hbnN3ZXJzL2NvbXBvbmVudHMvUXVlc3Rpb25zTGlzdC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3F1ZXN0aW9uc19hbnN3ZXJzL2NvbXBvbmVudHMvUXVlc3Rpb25Gb3JtLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcXVlc3Rpb25zX2Fuc3dlcnMvUXVlc3Rpb25zQW5zd2Vycy5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JhdGluZ3NfcmV2aWV3cy9jb21wb25lbnRzL1JhdGluZ0JyZWFrZG93bkJhci5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JhdGluZ3NfcmV2aWV3cy9jb21wb25lbnRzL1JhdGluZ0JyZWFrZG93bi5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JhdGluZ3NfcmV2aWV3cy9jb21wb25lbnRzL0NocmFjdGVyaXN0aWNCcmVha2Rvd24uanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9yYXRpbmdzX3Jldmlld3MvY29tcG9uZW50cy9Qcm9kdWN0QnJlYWtkb3duLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2NvbXBvbmVudHMvU29ydGluZ09wdGlvbnMuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9yYXRpbmdzX3Jldmlld3MvY29tcG9uZW50cy9SZXZpZXdQaG90b01vZGFsLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2NvbXBvbmVudHMvUmV2aWV3UGhvdG8uanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9yYXRpbmdzX3Jldmlld3MvY29tcG9uZW50cy9SZXZpZXdUaWxlLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2NvbXBvbmVudHMvUmV2aWV3c0xpc3QuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9yYXRpbmdzX3Jldmlld3MvY29tcG9uZW50cy9SZXZpZXdGb3JtQ2hhcmFjdGVyaXN0aWNzLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2NvbXBvbmVudHMvUmV2aWV3Rm9ybU1vZGFsLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmF0aW5nc19yZXZpZXdzL2NvbXBvbmVudHMvUmV2aWV3Rm9ybS5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JhdGluZ3NfcmV2aWV3cy9jb21wb25lbnRzL1NlYXJjaEJhci5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JhdGluZ3NfcmV2aWV3cy9SYXRpbmdzUmV2aWV3cy5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvSXRlbUNhcmQuanN4Iiwid2VicGFjazovL3Byb2plY3QtYXRlbGllci8uL2NsaWVudC9yZWxhdGVkX2l0ZW1zL0NvbXBhcmlzb25Nb2RhbC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvSXRlbXNMaXN0LmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvcmVsYXRlZF9pdGVtcy9BZGRUb091dGZpdC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvT3V0Zml0Q2FyZC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvT3V0Zml0TGlzdC5qc3giLCJ3ZWJwYWNrOi8vcHJvamVjdC1hdGVsaWVyLy4vY2xpZW50L3JlbGF0ZWRfaXRlbXMvUmVsYXRlZEl0ZW1zLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvQ2xpY2tXcmFwcGVyLmpzeCIsIndlYnBhY2s6Ly9wcm9qZWN0LWF0ZWxpZXIvLi9jbGllbnQvQXBwLmpzeCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZm9ybWF0RGF0ZSIsImRhdGVTdHJpbmciLCJzcGxpdCIsInllYXIiLCJtb250aCIsImZldGNoUmV2aWV3cyIsIiQiLCJhamF4IiwidXJsIiwicHJvcHMiLCJwcm9kdWN0X2lkIiwibWV0aG9kIiwiY29tcHV0ZUF2ZXJhZ2VSYXRpbmciLCJyYXRpbmdzIiwibGVuZ3RoIiwiY291bnQiLCJ0b3RhbCIsInJhdGluZ1ZhbHVlIiwiZnJlcSIsIk51bWJlciIsInBhcnNlSW50IiwiYXZlcmFnZSIsInRvRml4ZWQiLCJNYXRoIiwicm91bmQiLCJjb21wdXRlUmF0aW5nQnJlYWtkb3duIiwiYnJlYWtkb3duIiwiaSIsInBlcmNlbnRhZ2UiLCJwdXNoIiwiY29tcHV0ZVJlY29tbWVuZGVkUGVyY2VudGFnZSIsInJlY29tbWVuZGVkIiwiT2JqZWN0Iiwia2V5cyIsInRydWVDb3VudCIsImZvcm1hdENoYXJhY3RlcmlzdGljcyIsImNoYXJhY3RlcmlzdGljcyIsImZvcm1hdHRlZENoYXJhY3RlcmlzdGljcyIsImNoYXJhY3RlcmlzdGljIiwibmV3Rm9ybWF0IiwibmFtZSIsInZhbHVlIiwiaWQiLCJzb3J0UmV2aWV3cyIsInJldmlld3MiLCJvcHRpb24iLCJyZXZpZXdzQ29weSIsInNsaWNlIiwic29ydCIsImEiLCJiIiwiaGVscGZ1bG5lc3MiLCJEYXRlIiwiZGF0ZSIsInNvcnRlZFJldmlld3MiLCJ0ZW1wU3RvcmFnZSIsImN1cnJlbnREYXRlIiwiZmxhdCIsImFwcGx5U3RhckZpbHRlcnMiLCJzdGFyRmlsdGVycyIsIm91dHB1dCIsImluZGV4T2YiLCJyYXRpbmciLCJhcHBseUtleXdvcmQiLCJrZXl3b3JkIiwiZmlsdGVyIiwicmV2aWV3IiwicmVzcG9uc2UiLCJzdW1tYXJ5IiwiaW5jbHVkZXMiLCJib2R5IiwicmV2aWV3ZXJfbmFtZSIsImZvcm1hdFJldmlld1RpbGUiLCJwaG90b3MiLCJyZXZpZXdJZCIsImFkZGl0aW9uYWxCb2R5Iiwic2hvd0FkZGl0aW9uYWxCb2R5QnV0dG9uIiwic2hvd1Bob3RvcyIsImhlbHBmdWwiLCJzaG93QWRkSGVscGZ1bEJ1dHRvbiIsInJlcG9ydFN0YXR1cyIsIkpTT04iLCJwYXJzZSIsInNlc3Npb25TdG9yYWdlIiwiZ2V0SXRlbSIsImFsbEhlbHBmdWxSZXZpZXdzIiwibG9jYWxTdG9yYWdlIiwicHJvZHVjdENoYXJhY3RlcmlzdGljcyIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiZ2V0UmVsYXRlZEl0ZW1zIiwicHJvZHVjdElkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJmZXRjaCIsInRoZW4iLCJqc29uIiwiZGF0YSIsIm1haW5Qcm9kdWN0SWQiLCJub0R1cGxpY2F0ZXMiLCJnZXRQcm9kdWN0SW5mbyIsImdldFByb2R1Y3RTdHlsZXMiLCJnZXRQcm9kdWN0UmF0aW5ncyIsImZpbmREZWZhdWx0U3R5bGUiLCJzdHlsZXMiLCJmb3VuZERlZmF1bHQiLCJmb3JFYWNoIiwic3R5bGUiLCJkZWZpbmVNYWluUHJvZHVjdCIsImluZm8iLCJkZWZhdWx0U3R5bGUiLCJhdmVyYWdlUmF0aW5nIiwicHJpY2UiLCJzYWxlX3ByaWNlIiwib3JpZ2luYWxfcHJpY2UiLCJ0aHVtYm5haWxVcmwiLCJ0aHVtYm5haWxfdXJsIiwiY2F0ZWdvcnkiLCJmaW5kQ29tcGFyaXNvbkZlYXR1cmVzIiwibWFpbkZlYXR1cmVzIiwiY29tcGFyaXNvbkZlYXR1cmVzIiwiYWxsRmVhdHVyZXMiLCJmZWF0dXJlIiwiY29tcFZhbHVlIiwicHJvZHVjdCIsImNvbXBGZWF0dXJlIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJpdGVtIiwicHJldmVudFNjcm9sbCIsImVsZW0iLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwib3ZlcmZsb3ciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImNsYXNzTmFtZXMiLCJjbGFzc2VzIiwiYXJndW1lbnRzIiwiYXJnIiwiYXJnVHlwZSIsIkFycmF5IiwiaXNBcnJheSIsImlubmVyIiwiYXBwbHkiLCJ0b1N0cmluZyIsInByb3RvdHlwZSIsImtleSIsImNhbGwiLCJqb2luIiwiZGVmYXVsdCIsImdsb2JhbCIsImZhY3RvcnkiLCJ3IiwiRXJyb3IiLCJ3aW5kb3ciLCJ0aGlzIiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImdldFByb3RvdHlwZU9mIiwiYXJyYXkiLCJjb25jYXQiLCJjbGFzczJ0eXBlIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwic3VwcG9ydCIsImlzRnVuY3Rpb24iLCJvYmoiLCJub2RlVHlwZSIsImlzV2luZG93IiwicHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyIsInR5cGUiLCJzcmMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJub2RlIiwiZG9jIiwidmFsIiwic2NyaXB0IiwiY3JlYXRlRWxlbWVudCIsInRleHQiLCJnZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJ0b1R5cGUiLCJ2ZXJzaW9uIiwialF1ZXJ5Iiwic2VsZWN0b3IiLCJjb250ZXh0IiwiZm4iLCJpbml0IiwiaXNBcnJheUxpa2UiLCJqcXVlcnkiLCJjb25zdHJ1Y3RvciIsInRvQXJyYXkiLCJnZXQiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsIm1lcmdlIiwicHJldk9iamVjdCIsImVhY2giLCJjYWxsYmFjayIsIm1hcCIsImZpcnN0IiwiZXEiLCJsYXN0IiwiZXZlbiIsImdyZXAiLCJfZWxlbSIsIm9kZCIsImxlbiIsImoiLCJlbmQiLCJzcGxpY2UiLCJleHRlbmQiLCJvcHRpb25zIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJ0YXJnZXQiLCJkZWVwIiwiaXNQbGFpbk9iamVjdCIsInVuZGVmaW5lZCIsImV4cGFuZG8iLCJyYW5kb20iLCJyZXBsYWNlIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJndWlkIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfaSIsInRvTG93ZXJDYXNlIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsInByZWZlcnJlZERvYyIsImRpcnJ1bnMiLCJkb25lIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaE5hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJ0cmltIiwicmNvbW1hIiwicmNvbWJpbmF0b3JzIiwicmRlc2NlbmQiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaHRtbCIsInJpbnB1dHMiLCJyaGVhZGVyIiwicm5hdGl2ZSIsInJxdWlja0V4cHIiLCJyc2libGluZyIsInJ1bmVzY2FwZSIsImZ1bmVzY2FwZSIsImVzY2FwZSIsIm5vbkhleCIsImhpZ2giLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJyY3NzZXNjYXBlIiwiZmNzc2VzY2FwZSIsImNoIiwiYXNDb2RlUG9pbnQiLCJjaGFyQ29kZUF0IiwidW5sb2FkSGFuZGxlciIsImluRGlzYWJsZWRGaWVsZHNldCIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsIm5vZGVOYW1lIiwiZGlyIiwibmV4dCIsImNoaWxkTm9kZXMiLCJlIiwiZWxzIiwic2VlZCIsIm0iLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidGVzdCIsInRlc3RDb250ZXh0Iiwic2NvcGUiLCJ0b1NlbGVjdG9yIiwicXVlcnlTZWxlY3RvckFsbCIsInFzYUVycm9yIiwicmVtb3ZlQXR0cmlidXRlIiwiY2FjaGUiLCJjYWNoZUxlbmd0aCIsInNoaWZ0IiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5hbWVzcGFjZSIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsInRtcCIsImlucHV0IiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImVsZW1lbnRzIiwiYXR0ciIsInNwZWNpZmllZCIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJ0ZXh0Q29udGVudCIsImZpcnN0Q2hpbGQiLCJub2RlVmFsdWUiLCJzZWxlY3RvcnMiLCJjcmVhdGVQc2V1ZG8iLCJyZWxhdGl2ZSIsInByZUZpbHRlciIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsInBhdHRlcm4iLCJvcGVyYXRvciIsImNoZWNrIiwicmVzdWx0Iiwid2hhdCIsIl9hcmd1bWVudCIsInNpbXBsZSIsImZvcndhcmQiLCJvZlR5cGUiLCJfY29udGV4dCIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsImFyZ3MiLCJzZXRGaWx0ZXJzIiwiaWR4IiwibWF0Y2hlZCIsIm1hdGNoZXIiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJoYXNoIiwibG9jYXRpb24iLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJocmVmIiwidGFiSW5kZXgiLCJjaGVja2VkIiwic2VsZWN0ZWQiLCJzZWxlY3RlZEluZGV4IiwiX21hdGNoSW5kZXhlcyIsInJhZGlvIiwiY2hlY2tib3giLCJmaWxlIiwicGFzc3dvcmQiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwidG9rZW5zIiwiY29tYmluYXRvciIsImJhc2UiLCJza2lwIiwiY2hlY2tOb25FbGVtZW50cyIsImRvbmVOYW1lIiwib2xkQ2FjaGUiLCJuZXdDYWNoZSIsImVsZW1lbnRNYXRjaGVyIiwibWF0Y2hlcnMiLCJjb25kZW5zZSIsIm5ld1VubWF0Y2hlZCIsIm1hcHBlZCIsInNldE1hdGNoZXIiLCJwb3N0RmlsdGVyIiwicG9zdEZpbmRlciIsInBvc3RTZWxlY3RvciIsInRlbXAiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiX25hbWUiLCJkZWZhdWx0VmFsdWUiLCJ1bmlxdWUiLCJpc1hNTERvYyIsImVzY2FwZVNlbGVjdG9yIiwidW50aWwiLCJ0cnVuY2F0ZSIsImlzIiwic2libGluZ3MiLCJuIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJzZWxmIiwicm9vdGpRdWVyeSIsInJvb3QiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsInNpYmxpbmciLCJoYXMiLCJ0YXJnZXRzIiwibCIsImNsb3Nlc3QiLCJwcmV2QWxsIiwiYWRkIiwiYWRkQmFjayIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlamVjdCIsIm5vVmFsdWUiLCJwcm9taXNlIiwiZmFpbCIsIkNhbGxiYWNrcyIsIm9iamVjdCIsIl8iLCJmbGFnIiwiY3JlYXRlT3B0aW9ucyIsImZpcmluZyIsIm1lbW9yeSIsImZpcmVkIiwibG9ja2VkIiwicXVldWUiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJyZW1vdmUiLCJlbXB0eSIsImRpc2FibGUiLCJsb2NrIiwiZmlyZVdpdGgiLCJEZWZlcnJlZCIsImZ1bmMiLCJ0dXBsZXMiLCJzdGF0ZSIsImFsd2F5cyIsImRlZmVycmVkIiwicGlwZSIsImZucyIsIm5ld0RlZmVyIiwidHVwbGUiLCJyZXR1cm5lZCIsInByb2dyZXNzIiwibm90aWZ5Iiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwib25Qcm9ncmVzcyIsIm1heERlcHRoIiwiZGVwdGgiLCJzcGVjaWFsIiwidGhhdCIsIm1pZ2h0VGhyb3ciLCJUeXBlRXJyb3IiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJwcm9jZXNzIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJyZWplY3RXaXRoIiwiZ2V0U3RhY2tIb29rIiwic2V0VGltZW91dCIsInN0YXRlU3RyaW5nIiwid2hlbiIsInNpbmdsZVZhbHVlIiwicmVtYWluaW5nIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsInByaW1hcnkiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImNhdGNoIiwicmVhZHlXYWl0Iiwid2FpdCIsInJlYWR5U3RhdGUiLCJkb1Njcm9sbCIsImFjY2VzcyIsImNoYWluYWJsZSIsImVtcHR5R2V0IiwicmF3IiwiYnVsayIsIl9rZXkiLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsIl9hbGwiLCJsZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsImNhbWVsQ2FzZSIsInN0cmluZyIsImFjY2VwdERhdGEiLCJvd25lciIsIkRhdGEiLCJ1aWQiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsInNldCIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJkYXRhQXR0ciIsImdldERhdGEiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzdG9wIiwic2V0dGVyIiwiY2xlYXJRdWV1ZSIsImRlZmVyIiwicG51bSIsInNvdXJjZSIsInJjc3NOdW0iLCJjc3NFeHBhbmQiLCJpc0F0dGFjaGVkIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsImlzSGlkZGVuV2l0aGluVHJlZSIsImRpc3BsYXkiLCJjc3MiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwiZGl2IiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsIm9wdGdyb3VwIiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJub2RlcyIsImh0bWxQcmVmaWx0ZXIiLCJjcmVhdGVUZXh0Tm9kZSIsInJ0eXBlbmFtZXNwYWNlIiwicmV0dXJuVHJ1ZSIsInJldHVybkZhbHNlIiwiZXhwZWN0U3luYyIsImVyciIsInNhZmVBY3RpdmVFbGVtZW50Iiwib24iLCJ0eXBlcyIsIm9uZSIsIm9yaWdGbiIsImV2ZW50Iiwib2ZmIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwidCIsImhhbmRsZU9iaiIsImhhbmRsZXJzIiwibmFtZXNwYWNlcyIsIm9yaWdUeXBlIiwiZWxlbURhdGEiLCJjcmVhdGUiLCJoYW5kbGUiLCJ0cmlnZ2VyZWQiLCJkaXNwYXRjaCIsImJpbmRUeXBlIiwiZGVsZWdhdGVDb3VudCIsInNldHVwIiwibWFwcGVkVHlwZXMiLCJvcmlnQ291bnQiLCJ0ZWFyZG93biIsInJlbW92ZUV2ZW50IiwibmF0aXZlRXZlbnQiLCJoYW5kbGVyUXVldWUiLCJmaXgiLCJkZWxlZ2F0ZVRhcmdldCIsInByZURpc3BhdGNoIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJjdXJyZW50VGFyZ2V0IiwiaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQiLCJybmFtZXNwYWNlIiwicG9zdERpc3BhdGNoIiwibWF0Y2hlZEhhbmRsZXJzIiwibWF0Y2hlZFNlbGVjdG9ycyIsImJ1dHRvbiIsImFkZFByb3AiLCJob29rIiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImNsaWNrIiwiYmVmb3JldW5sb2FkIiwicmV0dXJuVmFsdWUiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJkZWZhdWx0UHJldmVudGVkIiwicmVsYXRlZFRhcmdldCIsInRpbWVTdGFtcCIsIm5vdyIsImlzU2ltdWxhdGVkIiwiYWx0S2V5IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJjaGFuZ2VkVG91Y2hlcyIsImN0cmxLZXkiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwibWV0YUtleSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsInZpZXciLCJjaGFyQ29kZSIsImtleUNvZGUiLCJidXR0b25zIiwiY2xpZW50WCIsImNsaWVudFkiLCJvZmZzZXRYIiwib2Zmc2V0WSIsInBvaW50ZXJJZCIsInBvaW50ZXJUeXBlIiwic2NyZWVuWCIsInNjcmVlblkiLCJ0YXJnZXRUb3VjaGVzIiwidG9FbGVtZW50IiwidG91Y2hlcyIsIndoaWNoIiwiZm9jdXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJub0lubmVyaHRtbCIsInJjaGVja2VkIiwicmNsZWFuU2NyaXB0IiwibWFuaXB1bGF0aW9uVGFyZ2V0IiwiZGlzYWJsZVNjcmlwdCIsInJlc3RvcmVTY3JpcHQiLCJjbG9uZUNvcHlFdmVudCIsImRlc3QiLCJ1ZGF0YU9sZCIsInVkYXRhQ3VyIiwiZml4SW5wdXQiLCJkb21NYW5pcCIsImNvbGxlY3Rpb24iLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJodG1sIiwiX2V2YWxVcmwiLCJrZWVwRGF0YSIsImNsZWFuRGF0YSIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwiYXBwZW5kIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsInN3YXAiLCJvbGQiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInBhcnNlRmxvYXQiLCJyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsInJlbGlhYmxlVHJEaW1lbnNpb25zIiwidGFibGUiLCJ0ckNoaWxkIiwidHJTdHlsZSIsImhlaWdodCIsImJvcmRlclRvcFdpZHRoIiwiYm9yZGVyQm90dG9tV2lkdGgiLCJvZmZzZXRIZWlnaHQiLCJjc3NQcmVmaXhlcyIsImVtcHR5U3R5bGUiLCJ2ZW5kb3JQcm9wcyIsImZpbmFsUHJvcE5hbWUiLCJjc3NQcm9wcyIsImNhcE5hbWUiLCJ2ZW5kb3JQcm9wTmFtZSIsInJkaXNwbGF5c3dhcCIsInJjdXN0b21Qcm9wIiwiY3NzU2hvdyIsInZpc2liaWxpdHkiLCJjc3NOb3JtYWxUcmFuc2Zvcm0iLCJsZXR0ZXJTcGFjaW5nIiwiZm9udFdlaWdodCIsInNldFBvc2l0aXZlTnVtYmVyIiwic3VidHJhY3QiLCJtYXgiLCJib3hNb2RlbEFkanVzdG1lbnQiLCJkaW1lbnNpb24iLCJib3giLCJpc0JvcmRlckJveCIsImNvbXB1dGVkVmFsIiwiZXh0cmEiLCJkZWx0YSIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwibGluZWFyIiwicCIsInN3aW5nIiwiY29zIiwiUEkiLCJmeE5vdyIsImluUHJvZ3Jlc3MiLCJyZnh0eXBlcyIsInJydW4iLCJzY2hlZHVsZSIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImludGVydmFsIiwidGljayIsImNyZWF0ZUZ4Tm93IiwiZ2VuRngiLCJpbmNsdWRlV2lkdGgiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwicHJvcGVydGllcyIsInN0b3BwZWQiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiYmluZCIsImNvbXBsZXRlIiwidGltZXIiLCJhbmltIiwidHdlZW5lciIsIm9sZGZpcmUiLCJwcm9wVHdlZW4iLCJyZXN0b3JlRGlzcGxheSIsImlzQm94IiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwidG8iLCJhbmltYXRlIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImNsYXNzZXNUb0FycmF5IiwicmVtb3ZlUHJvcCIsInByb3BGaXgiLCJ0YWJpbmRleCIsImFkZENsYXNzIiwiY3VyVmFsdWUiLCJjbGF6eiIsImZpbmFsVmFsdWUiLCJyZW1vdmVDbGFzcyIsInRvZ2dsZUNsYXNzIiwic3RhdGVWYWwiLCJpc1ZhbGlkVmFsdWUiLCJoYXNDbGFzcyIsInJyZXR1cm4iLCJ2YWxIb29rcyIsIm9wdGlvblNldCIsImZvY3VzaW4iLCJyZm9jdXNNb3JwaCIsInN0b3BQcm9wYWdhdGlvbkNhbGxiYWNrIiwib25seUhhbmRsZXJzIiwiYnViYmxlVHlwZSIsIm9udHlwZSIsImxhc3RFbGVtZW50IiwiZXZlbnRQYXRoIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImF0dGFjaGVzIiwicnF1ZXJ5IiwicGFyc2VYTUwiLCJwYXJzZXJFcnJvckVsZW0iLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJyYnJhY2tldCIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwiYnVpbGRQYXJhbXMiLCJ0cmFkaXRpb25hbCIsInBhcmFtIiwicyIsInZhbHVlT3JGdW5jdGlvbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZUFycmF5IiwicjIwIiwicmhhc2giLCJyYW50aUNhY2hlIiwicmhlYWRlcnMiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwidHJhbnNwb3J0IiwiY2FjaGVVUkwiLCJyZXNwb25zZUhlYWRlcnNTdHJpbmciLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0VGltZXIiLCJ1cmxBbmNob3IiLCJmaXJlR2xvYmFscyIsInVuY2FjaGVkIiwiY2FsbGJhY2tDb250ZXh0IiwiZ2xvYmFsRXZlbnRDb250ZXh0IiwiY29tcGxldGVEZWZlcnJlZCIsInN0YXR1c0NvZGUiLCJyZXF1ZXN0SGVhZGVycyIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsImdldFJlc3BvbnNlSGVhZGVyIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJtaW1lVHlwZSIsInN0YXR1cyIsImFib3J0Iiwic3RhdHVzVGV4dCIsImZpbmFsVGV4dCIsImNyb3NzRG9tYWluIiwiaG9zdCIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJtb2RpZmllZCIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImdldEpTT04iLCJnZXRTY3JpcHQiLCJ3cmFwQWxsIiwiZmlyc3RFbGVtZW50Q2hpbGQiLCJ3cmFwSW5uZXIiLCJodG1sSXNGdW5jdGlvbiIsInVud3JhcCIsInZpc2libGUiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsInhoclN1Y2Nlc3NTdGF0dXMiLCIwIiwiMTIyMyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnRpbWVvdXQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJzY3JpcHRBdHRycyIsImNoYXJzZXQiLCJzY3JpcHRDaGFyc2V0IiwiZXZ0Iiwib2xkQ2FsbGJhY2tzIiwicmpzb25wIiwianNvbnAiLCJqc29ucENhbGxiYWNrIiwib3JpZ2luYWxTZXR0aW5ncyIsImNhbGxiYWNrTmFtZSIsIm92ZXJ3cml0dGVuIiwicmVzcG9uc2VDb250YWluZXIiLCJqc29uUHJvcCIsImNyZWF0ZUhUTUxEb2N1bWVudCIsImltcGxlbWVudGF0aW9uIiwia2VlcFNjcmlwdHMiLCJwYXJzZWQiLCJwYXJhbXMiLCJhbmltYXRlZCIsIm9mZnNldCIsInNldE9mZnNldCIsImN1clBvc2l0aW9uIiwiY3VyTGVmdCIsImN1ckNTU1RvcCIsImN1clRvcCIsImN1ck9mZnNldCIsImN1ckNTU0xlZnQiLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwicGFnZVlPZmZzZXQiLCJwYWdlWE9mZnNldCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsInVuYmluZCIsImRlbGVnYXRlIiwidW5kZWxlZ2F0ZSIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJwcm94eSIsImhvbGRSZWFkeSIsImhvbGQiLCJwYXJzZUpTT04iLCJpc051bWVyaWMiLCJpc05hTiIsInRyaW0iLCJfalF1ZXJ5IiwiXyQiLCJub0NvbmZsaWN0IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJhc3NpZ24iLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsInRlc3QzIiwic2hvdWxkVXNlTmF0aXZlIiwiZnJvbSIsInN5bWJvbHMiLCJhYSIsInIiLCJ5IiwiYyIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiZmEiLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIkQiLCJvYSIsInBhIiwicWEiLCJtYSIsIm5hIiwibGEiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInJhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJzYSIsInRhIiwidWEiLCJ3YSIsInhhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiZm9yIiwiRSIsIk1hIiwiS2EiLCJMYSIsIk5hIiwiT2EiLCJQYSIsInByZXBhcmVTdGFja1RyYWNlIiwiUmVmbGVjdCIsImNvbnN0cnVjdCIsImsiLCJoIiwiZGlzcGxheU5hbWUiLCJRYSIsInJlbmRlciIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX3BheWxvYWQiLCJfaW5pdCIsIlNhIiwiVGEiLCJWYSIsIl92YWx1ZVRyYWNrZXIiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRWYWx1ZSIsInNldFZhbHVlIiwic3RvcFRyYWNraW5nIiwiVWEiLCJXYSIsIlhhIiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwiZWIiLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJkZWZhdWx0U2VsZWN0ZWQiLCJnYiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJvYiIsInZhbHVlT2YiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJxYiIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsInJiIiwic2IiLCJ0YiIsImNoYXJBdCIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJlbWJlZCIsImhyIiwiaW1nIiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJ0cmFjayIsIndiciIsInZiIiwid2IiLCJ4YiIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsIk9iIiwiUGIiLCJRYiIsIlJiIiwib25FcnJvciIsIlNiIiwiVGIiLCJVYiIsIlZiIiwiV2IiLCJYYiIsIlpiIiwiYWx0ZXJuYXRlIiwicmV0dXJuIiwiZmxhZ3MiLCIkYiIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiYWMiLCJjYyIsImNoaWxkIiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsInNjIiwiZGVsZXRlIiwidGMiLCJ2YyIsIndjIiwibGFuZVByaW9yaXR5IiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwicHJpb3JpdHkiLCJoeWRyYXRlIiwiY29udGFpbmVySW5mbyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJDYyIsIkRjIiwiRWMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJGYyIsIkdjIiwiSGMiLCJ0cmFuc2l0aW9uIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwidW5zdGFibGVfbm93IiwiRiIsIlJjIiwiVWMiLCJwZW5kaW5nTGFuZXMiLCJleHBpcmVkTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiVmMiLCJlbnRhbmdsZWRMYW5lcyIsImVudGFuZ2xlbWVudHMiLCJXYyIsIlhjIiwiWWMiLCJaYyIsIiRjIiwiZXZlbnRUaW1lcyIsImNsejMyIiwiYmQiLCJjZCIsImxvZyIsIkxOMiIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImlzUGVyc2lzdGVudCIsIndkIiwieGQiLCJ5ZCIsInNkIiwiaXNUcnVzdGVkIiwidWQiLCJ2ZCIsIkFkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiZnJvbUVsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJCZCIsIkRkIiwiZGF0YVRyYW5zZmVyIiwiRmQiLCJIZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJKZCIsImNsaXBib2FyZERhdGEiLCJMZCIsIk1kIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsIk5kIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUmQiLCJyZXBlYXQiLCJsb2NhbGUiLCJUZCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwiaXNQcmltYXJ5IiwiVmQiLCJYZCIsIlpkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRldGltZSIsImVtYWlsIiwibnVtYmVyIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ3ZWVrIiwibWUiLCJuZSIsIm9lIiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwiTGUiLCJNZSIsIk5lIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50V2luZG93IiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsIlZlIiwiV2UiLCJYZSIsIlllIiwiWmUiLCJZYiIsImluc3RhbmNlIiwibGlzdGVuZXIiLCJHIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImNhcHR1cmUiLCJwYXNzaXZlIiwiTmIiLCJ4IiwieiIsInUiLCJxIiwiZWYiLCJmZiIsImdmIiwiaGYiLCJKIiwiSyIsIlEiLCJMIiwiamUiLCJjaGFyIiwia2UiLCJqZiIsImtmIiwibGYiLCJtZiIsImF1dG9Gb2N1cyIsIm5mIiwiX19odG1sIiwib2YiLCJwZiIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiY29udGV4dFR5cGVzIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJjaGlsZENvbnRleHRUeXBlcyIsIkdmIiwiSGYiLCJJZiIsImdldENoaWxkQ29udGV4dCIsIkpmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJLZiIsIkxmIiwiTWYiLCJOZiIsIk9mIiwiUGYiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsIlFmIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJSZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIlNmIiwiVGYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIlVmIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJWZiIsIldmIiwiWGYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIllmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiTyIsImVnIiwiZmciLCJnZyIsImhnIiwiaWciLCJqZyIsImtnIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWciLCJsZyIsImRlZmF1bHRQcm9wcyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsIl9jdXJyZW50VmFsdWUiLCJzZyIsImNoaWxkTGFuZXMiLCJ0ZyIsImRlcGVuZGVuY2llcyIsImZpcnN0Q29udGV4dCIsImxhbmVzIiwidWciLCJ2ZyIsIm9ic2VydmVkQml0cyIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiQWciLCJCZyIsIkNnIiwiQSIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJjb250ZXh0VHlwZSIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiVGciLCJVZyIsIm1vZGUiLCJlbGVtZW50VHlwZSIsIlZnIiwiV2ciLCJYZyIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJkaCIsImVoIiwidGFnTmFtZSIsImZoIiwiZ2giLCJoaCIsIlAiLCJpaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBlbmRpbmdQcm9wcyIsInBoIiwicWgiLCJyaCIsInNoIiwidWgiLCJfd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSIsInZoIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIndoIiwieGgiLCJSIiwiUyIsIlQiLCJ5aCIsInpoIiwiQWgiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsImJhc2VRdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJMaCIsIk1oIiwiX2dldFZlcnNpb24iLCJfc291cmNlIiwibXV0YWJsZVJlYWRMYW5lcyIsIk5oIiwiVSIsInVzZVN0YXRlIiwiZ2V0U25hcHNob3QiLCJzdWJzY3JpYmUiLCJ1c2VFZmZlY3QiLCJzZXRTbmFwc2hvdCIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiZGVzdHJveSIsImRlcHMiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIldoIiwiWGgiLCJZaCIsIlpoIiwiJGgiLCJhaSIsImJpIiwiY2kiLCJkaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZU9wYXF1ZUlkZW50aWZpZXIiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJ1ZiIsImVpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJmaSIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJsaSIsIm1pIiwiYmFzZUxhbmVzIiwibmkiLCJvaSIsInBpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwicWkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJyaSIsInBlbmRpbmdDb250ZXh0IiwiQmkiLCJEaSIsIkVpIiwic2kiLCJyZXRyeUxhbmUiLCJ0aSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJ1aSIsInVuc3RhYmxlX2V4cGVjdGVkTG9hZFRpbWUiLCJ2aSIsIndpIiwieGkiLCJ5aSIsInppIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiViIsIkhpIiwiSWkiLCJXIiwiSmkiLCJLaSIsIkxpIiwiTWkiLCJOaSIsIk9pIiwiV2Vha01hcCIsIlBpIiwiZWxlbWVudCIsIlFpIiwiUmkiLCJTaSIsImNvbXBvbmVudERpZENhdGNoIiwiVGkiLCJjb21wb25lbnRTdGFjayIsIlVpIiwiV2Vha1NldCIsIlZpIiwiV2kiLCJYaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiWWkiLCJaaSIsIiRpIiwiYWoiLCJiaiIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJjaiIsImRqIiwiZWoiLCJmaiIsImdqIiwiaGoiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaWoiLCJqaiIsImtqIiwibGoiLCJtaiIsIm5qIiwib2oiLCJwaiIsIlgiLCJZIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwiSW5maW5pdHkiLCJ3aiIsImNrIiwiWiIsInhqIiwieWoiLCJ6aiIsIkFqIiwiQmoiLCJDaiIsIkRqIiwiRWoiLCJGaiIsIkdqIiwiSGoiLCJJaiIsIkpqIiwiU2MiLCJLaiIsIkxqIiwiTWoiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJjYWxsYmFja1ByaW9yaXR5IiwiVGMiLCJOaiIsIk9qIiwiUGoiLCJRaiIsIlJqIiwiU2oiLCJUaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkTGFuZXMiLCJVaiIsInRpbWVvdXRIYW5kbGUiLCJXaiIsIlhqIiwicGluZ0NhY2hlIiwiWWoiLCJaaiIsInZhIiwiYWsiLCJiayIsImRrIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJlayIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInN0cmluZ2lmeSIsImZvcm0iLCJWaiIsInZrIiwiRXZlbnRzIiwid2siLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwieGsiLCJyZW5kZXJlckNvbmZpZyIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInlrIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsIkZyYWdtZW50IiwiU3RyaWN0TW9kZSIsIlByb2ZpbGVyIiwiU3VzcGVuc2UiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwib25seSIsIlB1cmVDb21wb25lbnQiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwicGVyZm9ybWFuY2UiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJmbG9vciIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiX19lc01vZHVsZSIsImRlZmluaXRpb24iLCJvIiwiZXh0ZW5kU3RhdGljcyIsIl9fZXh0ZW5kcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiX18iLCJBc3NlcnRpb25FcnJvciIsIl9zdXBlciIsIl90aGlzIiwib2JqZWN0VG9HZXRQYXJhbXMiLCJlbnRyaWVzIiwiX2EiLCJfX2Fzc2lnbiIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJfX2dlbmVyYXRvciIsImxhYmVsIiwic2VudCIsInRyeXMiLCJvcHMiLCJ2ZXJiIiwib3AiLCJfX3Jlc3QiLCJpc1Byb21pc2UiLCJnZXRCb3hQb3NpdGlvbk9uV2luZG93Q2VudGVyIiwib3V0ZXJXaWR0aCIsInNjcmVlbkxlZnQiLCJvdXRlckhlaWdodCIsInNjcmVlblRvcCIsImdldEJveFBvc2l0aW9uT25TY3JlZW5DZW50ZXIiLCJzY3JlZW4iLCJ3aW5kb3dPcGVuIiwib25DbG9zZSIsImNvbmZpZ1Jlc3QiLCJjb25maWciLCJ0b29sYmFyIiwiZGlyZWN0b3JpZXMiLCJtZW51YmFyIiwic2Nyb2xsYmFycyIsInJlc2l6YWJsZSIsImNlbnRlcnNjcmVlbiIsImNocm9tZSIsInNoYXJlRGlhbG9nIiwiaW50ZXJ2YWxfMSIsInNldEludGVydmFsIiwiY2xvc2VkIiwiY2xlYXJJbnRlcnZhbCIsIlNoYXJlQnV0dG9uIiwib3BlblNoYXJlRGlhbG9nIiwib25TaGFyZVdpbmRvd0Nsb3NlIiwiX2IiLCJ3aW5kb3dIZWlnaHQiLCJfYyIsIndpbmRvd1Bvc2l0aW9uIiwiX2QiLCJ3aW5kb3dXaWR0aCIsImhhbmRsZUNsaWNrIiwiYmVmb3JlT25DbGljayIsIm5ldHdvcmtMaW5rIiwib3BlblNoYXJlRGlhbG9nT25DbGljayIsInJldHVyblZhbCIsImRpc2FibGVkU3R5bGUiLCJmb3J3YXJkZWRSZWYiLCJuZXR3b3JrTmFtZSIsInJlc2V0QnV0dG9uU3R5bGUiLCJyZXN0IiwibmV3Q2xhc3NOYW1lIiwibmV3U3R5bGUiLCJiYWNrZ3JvdW5kQ29sb3IiLCJmb250IiwiY3Vyc29yIiwib3B0c01hcCIsIkNyZWF0ZWRCdXR0b24iLCJwYXNzZWRQcm9wcyIsInF1b3RlIiwiaGFzaHRhZyIsImNyZWF0ZUljb24iLCJpY29uQ29uZmlnIiwiSWNvbiIsImJnU3R5bGUiLCJib3JkZXJSYWRpdXMiLCJpY29uRmlsbENvbG9yIiwidmlld0JveCIsImN4IiwiY3kiLCJmaWxsIiwicngiLCJyeSIsInBhdGgiLCJ0aXRsZSIsInZpYSIsImhhc2h0YWdzIiwibWVkaWEiLCJkZXNjcmlwdGlvbiIsInNlbGVjdGVkU3R5bGUiLCJjdXJyUGhvdG9JbmRleCIsInBob3RvR2FsbGVyeSIsImFsdCIsInN0eWxlX2lkIiwidG9nZ2xlVmlldyIsImNsYXNzIiwiaGFuZGxlTGVmdENsaWNrIiwiaGFuZGxlUmlnaHRDbGljayIsInpvb21WaWV3IiwidG9nZ2xlWm9vbVZpZXciLCJoYW5kbGVNb3VzZU1vdmUiLCJ4UGVyY2VudCIsImNsaWVudFdpZHRoIiwieVBlcmNlbnQiLCJjbGllbnRIZWlnaHQiLCJiYWNrZ3JvdW5kUG9zaXRpb25YIiwiYmFja2dyb3VuZFBvc2l0aW9uWSIsInN0eWxlSW5mbyIsIm9uTW91c2VNb3ZlIiwiUmVhY3QiLCJkZWZhdWx0X3ByaWNlIiwiY2hhbmdlU3R5bGUiLCJpbmRleFN0eWxlU2VsZWN0ZWQiLCJhdmFpbGFibGVTaXplcyIsImhhbmRsZUFkZFRvQmFnU3VibWl0IiwicmVxdWlyZSIsInNlbGVjdGVkU2l6ZSIsInNlbGVjdGVkUXVhbnRpdHkiLCJtYXhRdWFudGl0eSIsInNob3dNZXNzYWdlIiwiaGFuZGxlU2l6ZUNoYW5nZSIsInVwZGF0ZU1heFF1YW50aXR5IiwiaGFuZGxlUXVhbnRpdHlDaGFuZ2UiLCJtYXhBdmFpbGFibGUiLCJza3VfaWQiLCJxdWFudGl0eUFyciIsImRlZmF1bHRTaXplT3B0aW9uIiwiZGVmYXVsdFF1YW50aXR5IiwicGxhY2Vob2xkZXIiLCJvbkNoYW5nZSIsInF1YW50aXR5Iiwic2xvZ2FuIiwiZmVhdHVyZXMiLCJpbmRleFNlbGVjdGVkIiwicGhvdG8iLCJoYW5kbGVQaG90b1NlbGVjdGlvbiIsImZpcnN0UGhvdG9JbmRleCIsInBob3RvSW5kZXhMaXN0IiwiaGFuZGxlVXBTY3JvbGwiLCJoYW5kbGVEb3duU2Nyb2xsIiwibmV3SW5kZXgiLCJyZW1haW5kZXIiLCJpbml0SW5kZXgiLCJmaW5hbEluZGV4IiwidG90YWxQaG90b3MiLCJza3VzIiwiaGFuZGxlU3R5bGVTZWxlY3Rpb24iLCJhcmlhLWxhYmVsIiwicXVlcnkiLCJoYW5kbGVTZWFyY2giLCJ2YWxpZGF0ZUZvcm1GaWVsZHMiLCJxdWVzdGlvbiIsIm5pY2tuYW1lIiwicHJvYmxlbSIsInZhbGlkYXRlRW1haWwiLCJyZW5kZXJSZXBvcnRlZExpbmsiLCJyZW5kZXJIZWxwZnVsTGluayIsImhlbHBmdWxJZHMiLCJjb250ZW50X3R5cGUiLCJyZXBvcnRlZCIsImhhbmRsZVJlcG9ydEJ1dHRvbkNsaWNrIiwiY29udGVudF9pZCIsImhhbmRsZUhlbHBmdWxCdXR0b25DbGljayIsImFuc3dlcl9pZCIsImhlbHBmdWxBbnN3ZXJzIiwic2V0SXRlbSIsImluY3JlbWVudEhlbHBmdWxBbnN3ZXIiLCJkYXRlVG9Gb3JtYXQiLCJkYXkiLCJhbnN3ZXIiLCJhbnN3ZXJlcl9uYW1lIiwiYW5zd2VycyIsInJlbWFpbmluZ0Fuc3dlcnMiLCJzaG93QW5zd2Vyc0xpc3QiLCJzaG93TG9hZE1vcmVBbnN3ZXJzQnV0dG9uIiwic2hvd0NvbGxhcHNlQW5zd2Vyc0xpc3RCdXR0b24iLCJpbml0aWFsaXplIiwiY29sbGFwc2VBbnN3ZXJzTGlzdCIsImxvYWRSZW1haW5pbmdBbnN3ZXJzIiwic29ydGVkQW5zd2Vyc0xpc3QiLCJ1bnNvcnRlZExpc3QiLCJzb3J0ZWRMaXN0Iiwic2VsbGVyUmVzcG9uc2VzIiwic29ydEFuc3dlcnNMaXN0IiwiZmlyc3RUd29BbnN3ZXJzIiwiYW5zd2VySWQiLCJoYW5kbGVDaGFuZ2UiLCJjbG9zZUFuc3dlck1vZGFsIiwib25TdWJtaXQiLCJoYW5kbGVBbnN3ZXJTdWJtaXQiLCJtYXhsZW5ndGgiLCJjb2xzIiwicm93cyIsInNob3dBbnN3ZXJNb2RhbCIsImhhbmRsZUFkZEFuc3dlckNsaWNrIiwicXVlc3Rpb25faWQiLCJoZWxwZnVsUXVlc3Rpb25zIiwiaW52YWxpZCIsImFsZXJ0Iiwic3VibWl0QW5zd2VyIiwicXVlc3Rpb25zIiwicXVlc3Rpb25fYm9keSIsInF1ZXN0aW9uX2hlbHBmdWxuZXNzIiwiY2xvc2VRdWVzdGlvbk1vZGFsIiwiaGFuZGxlUXVlc3Rpb25TdWJtaXQiLCJzaG93TW9yZUFuc3dlcmVkUXVlc3Rpb25zQnV0dG9uIiwicmVuZGVyZWRRdWVzdGlvbnMiLCJyZW1haW5pbmdRdWVzdGlvbnMiLCJzZWFyY2hSZXN1bHRzIiwic2hvd1NlYXJjaCIsInNob3dRdWVzdGlvbk1vZGFsIiwiaGFuZGxlTW9yZVF1ZXN0aW9uc0NsaWNrIiwiaGFuZGxlQWRkUXVlc3Rpb25DbGljayIsInByZXZQcm9wcyIsIm5leHRUd29RdWVzdGlvbnNUb1JlbmRlciIsInN1Ym1pdFF1ZXN0aW9uIiwiaGFuZGxlUmF0aW5nQnJlYWtkb3duQ2xpY2siLCJzdGFyIiwiaGVscGVycyIsImhhbmRsZVN0YXJGaWx0ZXJzIiwic3RhckZpbHRlciIsInJlbW92ZUZpbHRlcnMiLCJzb3J0aW5nVmFsdWUiLCJoYW5kbGVPcHRpb25DaGFuZ2VzIiwiY2xvc2VNb2RhbCIsInNob3dNb2RhbCIsInNob3dCb2R5Iiwic2hvd0FkZGl0aW9uYWxCb2R5Iiwic2hvd1JlY29tbWVuZCIsInNob3dSZXNwb25zZSIsInRvZ2dsZUFkZGl0aW9uYWxCb2R5IiwiaGFuZGxlQWRkSGVscGZ1bCIsImhhbmRsZVJlcG9ydCIsInJldmlld19pZCIsImN1cnJlbnRIZWxwZnVsUmV2aWV3cyIsImN1cnJlbnRSZXBvcnRlZFJldmlld3MiLCJmb3JtYXR0ZWRSZXZpZXdUaWxlSW5mbyIsInJlY29tbWVuZCIsImFsbFJldmlld3MiLCJjdXJyZW50UmV2aWV3cyIsIm90aGVyUmV2aWV3cyIsInNob3dNb3JlUmV2aWV3c0J1dHRvbiIsInNob3dMZXNzUmV2aWV3c0J1dHRvbiIsInNvcnRpbmdPcHRpb24iLCJzaG93TW9yZVJldmlld3MiLCJzaG93TGVzc1Jldmlld3MiLCJuZXh0UHJvcHMiLCJwaG90b0NvdW50Iiwic2hvd1VwbG9hZFBob3Rvc0J1dHRvbiIsImhhbmRsZVBob3RvVXBsb2FkIiwiaGFuZGxlU3VibWl0IiwidG9nZ2xlTW9kYWwiLCJ2YWxpZGF0ZUZvcm0iLCJjdXJyZW50Q2hhcmFjdGVyaXN0aWNzIiwiZGF0YVVSSSIsImZpbGVzIiwicmVhZGVyIiwiRmlsZVJlYWRlciIsImNsb3VkaW5hcnlVUkwiLCJjdXJyZW50UGhvdG9zIiwicmVhZEFzRGF0YVVSTCIsInZhbGlkIiwicHJvcGVydHkiLCJpbnZhbGlkQ2hhcmFjdGVyaXN0aWNzIiwidXBsb2FkZWRJbWFnZVByZXZpZXdzIiwicHJvZHVjdE5hbWUiLCJhY2NlcHQiLCJmaWx0ZXJlZFJldmlld3MiLCJ1cGRhdGVSZXZpZXdzIiwibmV3T3B0aW9uIiwibmV3RmlsdGVyZWRSZXZpZXdzIiwibmV3U3RhckZpbHRlcnMiLCJxdWVyaWVkUmV2aWV3cyIsImhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2siLCJwcm9kdWN0SW5mbyIsInByb2R1Y3RTdHlsZXMiLCJyYXRpbmdzTWV0YSIsIm1haW5Qcm9kdWN0IiwicHJvZHVjdFRvQ29tcGFyZSIsIml0ZW1Ub0NvbXBhcmUiLCJtYWluUHJvZHVjdEZlYXR1cmVzIiwiZmVhdHVyZXNUb0NvbXBhcmUiLCJzY3JvbGxSaWdodCIsInByb2R1Y3RGZWF0dXJlcyIsIml0ZW1zIiwiaXRlbUlkIiwiYWRkVG9PdXRmaXQiLCJyZW1vdmVGcm9tT3V0Zml0Iiwib3V0Zml0cyIsInN0b3JlZE91dGZpdHMiLCJmb3VuZER1cGxpY2F0ZSIsIm91dGZpdCIsInJlbW92ZWRJdGVtSWQiLCJjdXJyZW50T3V0Zml0cyIsInVwZGF0ZWRPdXRmaXRzIiwicmVsYXRlZEl0ZW1zSWRzIiwicmVsYXRlZEl0ZW1zIiwidW5pcXVlSXRlbXMiLCJDb21wb25lbnRUb1dyYXAiLCJtb2R1bGVOYW1lIiwib3V0ZXJIVE1MIiwid2lkZ2V0IiwiV3JhcHBlZFByb2R1Y3REZXRhaWxzIiwiQ2xpY2tXcmFwcGVyIiwiUHJvZHVjdERldGFpbHMiLCJXcmFwcGVkUmVsYXRlZEl0ZW1zIiwiUmVsYXRlZEl0ZW1zIiwiV3JhcHBlZFF1ZXN0aW9uc0Fuc3dlcnMiLCJRdWVzdGlvbnNBbnN3ZXJzIiwiV3JhcHBlZFJhdGluZ3NSZXZpZXdzIiwiUmF0aW5nc1Jldmlld3MiLCJBcHAiLCJhbGwiLCJwYXJzZWRSZXNwb25zZXMiLCJuZXdJZCIsIlJlYWN0RE9NIl0sIm1hcHBpbmdzIjoiO2tKQXNPQUEsRUFBT0MsUUFBVSxDQUNmQyxXQXZPaUIsU0FBQ0MsR0FDbEIsSSxJQUFBLEcsRUFBeUJBLEVBQVdDLE1BQU0sSyxFQUExQyxFLHN6QkFBS0MsRUFBTCxLQUFXQyxFQUFYLEtBNEJBLE1BMUJjLE9BQVZBLEVBQ0ZBLEVBQVEsVUFDVyxPQUFWQSxFQUNUQSxFQUFRLFdBQ1csT0FBVkEsRUFDVEEsRUFBUSxRQUNXLE9BQVZBLEVBQ1RBLEVBQVEsUUFDVyxPQUFWQSxFQUNUQSxFQUFRLE1BQ1csT0FBVkEsRUFDVEEsRUFBUSxPQUNXLE9BQVZBLEVBQ1RBLEVBQVEsT0FDVyxPQUFWQSxFQUNUQSxFQUFRLFNBQ1csT0FBVkEsRUFDVEEsRUFBUSxZQUNXLE9BQVZBLEVBQ1RBLEVBQVEsVUFDVyxPQUFWQSxFQUNUQSxFQUFRLFdBQ1csT0FBVkEsSUFDVEEsRUFBUSxZQUdIQSxFQUFRLElBNUJmLEtBNEIyQixLQUFPRCxHQTJNbENFLGFBeE1tQixXQUNuQixPQUFPQyxFQUFFQyxLQUFLLENBQ1pDLElBQUssdUJBQUYsT0FBeUIsRUFBS0MsTUFBTUMsV0FBcEMsbUNBQ0hDLE9BQVEsU0FzTVZDLHFCQWxNMkIsU0FBQ0MsR0FDNUIsR0FBdUIsSUFBbkJB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TTlkLEtBQ2pCZzFDLEtBQU1qeUMsS0FBSythLE1BQU1rM0IsYSxxQkF2R1RzK0IsYUE4R2xCOE0sU0FBZ0IsZ0JBQUNKLEdBQUQsTUFBUzErRSxTQUFTME0sZUFBZSxTIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZvcm1hdERhdGUgPSAoZGF0ZVN0cmluZykgPT4ge1xuICB2YXIgW3llYXIsIG1vbnRoLCBkYXldID0gZGF0ZVN0cmluZy5zcGxpdCgnLScpO1xuXG4gIGlmIChtb250aCA9PT0gJzAxJykge1xuICAgIG1vbnRoID0gJ0phbnVhcnknO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDInKSB7XG4gICAgbW9udGggPSAnRmVicnVhcnknO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDMnKSB7XG4gICAgbW9udGggPSAnTWFyY2gnO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDQnKSB7XG4gICAgbW9udGggPSAnQXByaWwnO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDUnKSB7XG4gICAgbW9udGggPSAnTWF5JztcbiAgfSBlbHNlIGlmIChtb250aCA9PT0gJzA2Jykge1xuICAgIG1vbnRoID0gJ0p1bmUnO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDcnKSB7XG4gICAgbW9udGggPSAnSnVseSc7XG4gIH0gZWxzZSBpZiAobW9udGggPT09ICcwOCcpIHtcbiAgICBtb250aCA9ICdBdWd1c3QnO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMDknKSB7XG4gICAgbW9udGggPSAnU2VwdGVtYmVyJztcbiAgfSBlbHNlIGlmIChtb250aCA9PT0gJzEwJykge1xuICAgIG1vbnRoID0gJ09jdG9iZXInO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMTEnKSB7XG4gICAgbW9udGggPSAnTm92ZW1iZXInO1xuICB9IGVsc2UgaWYgKG1vbnRoID09PSAnMTInKSB7XG4gICAgbW9udGggPSAnRGVjZW1iZXInO1xuICB9XG5cbiAgcmV0dXJuIG1vbnRoICsgJyAnICsgZGF5ICsgJywgJyArIHllYXI7XG59O1xuXG5jb25zdCBmZXRjaFJldmlld3MgPSAoKSA9PiB7XG4gIHJldHVybiAkLmFqYXgoe1xuICAgIHVybDogYHJldmlld3MvP3Byb2R1Y3RfaWQ9JHt0aGlzLnByb3BzLnByb2R1Y3RfaWR9JnBhZ2U9MSZjb3VudD0xMDAmc29ydD1yZWxldmFudGAsXG4gICAgbWV0aG9kOiAnR0VUJ1xuICB9KTtcbn07XG5cbmNvbnN0IGNvbXB1dGVBdmVyYWdlUmF0aW5nID0gKHJhdGluZ3MpID0+IHtcbiAgaWYgKHJhdGluZ3MubGVuZ3RoID09PSAwKSB7IHJldHVybjsgfVxuICB2YXIgY291bnQgPSAwO1xuICB2YXIgdG90YWwgPSAwO1xuICBmb3IgKHZhciByYXRpbmdWYWx1ZSBpbiByYXRpbmdzKSB7XG4gICAgdmFyIGZyZXEgPSByYXRpbmdzW3JhdGluZ1ZhbHVlXTtcbiAgICB0b3RhbCArPSByYXRpbmdWYWx1ZSAqIGZyZXE7XG4gICAgY291bnQgKz0gTnVtYmVyLnBhcnNlSW50KGZyZXEpO1xuICB9XG4gIHZhciBhdmVyYWdlID0gdG90YWwgLyBjb3VudDtcbiAgdmFyIHJvdW5kZWRBdmVyYWdlRm9yRGlzcGxheSA9IGF2ZXJhZ2UudG9GaXhlZCgxKTtcbiAgdmFyIHJvdW5kZWRBdmVyYWdlRm9yU3RhciA9IChNYXRoLnJvdW5kKGF2ZXJhZ2UgKiA0KSAvIDQpLnRvRml4ZWQoMik7XG4gIHJldHVybiBbcm91bmRlZEF2ZXJhZ2VGb3JEaXNwbGF5LCByb3VuZGVkQXZlcmFnZUZvclN0YXJdO1xufTtcblxuY29uc3QgY29tcHV0ZVJhdGluZ0JyZWFrZG93biA9IChyYXRpbmdzKSA9PiB7XG4gIHZhciBicmVha2Rvd24gPSBbXTtcbiAgdmFyIHRvdGFsID0gMDtcbiAgZm9yICh2YXIgcmF0aW5nVmFsdWUgaW4gcmF0aW5ncykge1xuICAgIHZhciBmcmVxID0gcmF0aW5nc1tyYXRpbmdWYWx1ZV07XG4gICAgdG90YWwgKz0gTnVtYmVyLnBhcnNlSW50KGZyZXEpO1xuICB9XG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IDU7IGkrKykge1xuICAgIHZhciBmcmVxID0gcmF0aW5nc1tpXSB8fCAwO1xuICAgIHZhciBwZXJjZW50YWdlID0gTnVtYmVyLnBhcnNlSW50KGZyZXEpIC8gdG90YWwgKiAxMDA7XG4gICAgYnJlYWtkb3duLnB1c2goW3BlcmNlbnRhZ2UsIGZyZXFdKTtcbiAgfVxuICByZXR1cm4gYnJlYWtkb3duO1xufTtcblxuY29uc3QgY29tcHV0ZVJlY29tbWVuZGVkUGVyY2VudGFnZSA9IChyZWNvbW1lbmRlZCkgPT4ge1xuICBpZiAoT2JqZWN0LmtleXMocmVjb21tZW5kZWQpLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gJzAlJzsgfVxuICBsZXQgdHJ1ZUNvdW50ID0gTnVtYmVyLnBhcnNlSW50KHJlY29tbWVuZGVkLnRydWUpIHx8IDA7XG4gIGxldCBmYWxzZUNvdW50ID0gTnVtYmVyLnBhcnNlSW50KHJlY29tbWVuZGVkLmZhbHNlKSB8fCAwO1xuICBsZXQgdG90YWwgPSB0cnVlQ291bnQgKyBmYWxzZUNvdW50O1xuICByZXR1cm4gKHRydWVDb3VudCAvIHRvdGFsICogMTAwKS50b0ZpeGVkKDApICsgJyUnO1xufTtcblxuY29uc3QgZm9ybWF0Q2hhcmFjdGVyaXN0aWNzID0gKGNoYXJhY3RlcmlzdGljcykgPT4ge1xuICB2YXIgZm9ybWF0dGVkQ2hhcmFjdGVyaXN0aWNzID0gW107XG4gIGZvciAodmFyIGNoYXJhY3RlcmlzdGljIGluIGNoYXJhY3RlcmlzdGljcykge1xuICAgIHZhciBuZXdGb3JtYXQgPSB7fTtcbiAgICBuZXdGb3JtYXQubmFtZSA9IGNoYXJhY3RlcmlzdGljO1xuICAgIG5ld0Zvcm1hdC52YWx1ZSA9IGNoYXJhY3RlcmlzdGljc1tjaGFyYWN0ZXJpc3RpY10udmFsdWU7XG4gICAgbmV3Rm9ybWF0LmlkID0gY2hhcmFjdGVyaXN0aWNzW2NoYXJhY3RlcmlzdGljXS5pZDtcbiAgICBmb3JtYXR0ZWRDaGFyYWN0ZXJpc3RpY3MucHVzaChuZXdGb3JtYXQpO1xuICB9XG4gIHJldHVybiBmb3JtYXR0ZWRDaGFyYWN0ZXJpc3RpY3M7XG59O1xuXG5jb25zdCBzb3J0UmV2aWV3cyA9IChyZXZpZXdzLCBvcHRpb24pID0+IHtcbiAgaWYgKHJldmlld3MubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHZhciByZXZpZXdzQ29weSA9IHJldmlld3Muc2xpY2UoKTtcbiAgaWYgKG9wdGlvbiA9PT0gJ2hlbHBmdWxuZXNzJykge1xuICAgIHJldHVybiByZXZpZXdzQ29weS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYi5oZWxwZnVsbmVzcyAtIGEuaGVscGZ1bG5lc3M7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAob3B0aW9uID09PSAnZGF0ZScpIHtcbiAgICByZXR1cm4gcmV2aWV3c0NvcHkuc29ydCgoYSwgYikgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlKGIuZGF0ZSkgLSBuZXcgRGF0ZShhLmRhdGUpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKG9wdGlvbiA9PT0gJ3JlbGV2YW5jZScpIHtcbiAgICByZXZpZXdzQ29weS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gbmV3IERhdGUoYi5kYXRlKSAtIG5ldyBEYXRlKGEuZGF0ZSk7XG4gICAgfSk7XG4gICAgdmFyIHNvcnRlZFJldmlld3MgPSBbXTtcbiAgICB2YXIgdGVtcFN0b3JhZ2UgPSBbXTtcbiAgICB2YXIgY3VycmVudERhdGUgPSByZXZpZXdzQ29weVswXS5kYXRlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmV2aWV3c0NvcHkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZXZpZXdzQ29weVtpXS5kYXRlID09PSBjdXJyZW50RGF0ZSkge1xuICAgICAgICB0ZW1wU3RvcmFnZS5wdXNoKHJldmlld3NDb3B5W2ldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNvcnRlZFJldmlld3MucHVzaCh0ZW1wU3RvcmFnZSk7XG4gICAgICAgIHRlbXBTdG9yYWdlID0gW107XG4gICAgICAgIHRlbXBTdG9yYWdlLnB1c2gocmV2aWV3c0NvcHlbaV0pO1xuICAgICAgICBjdXJyZW50RGF0ZSA9IHJldmlld3NDb3B5W2ldLmRhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvcnRlZFJldmlld3MucHVzaCh0ZW1wU3RvcmFnZSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWRSZXZpZXdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBzb3J0ZWRSZXZpZXdzW2ldLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGIuaGVscGZ1bG5lc3MgLSBhLmhlbHBmdWxuZXNzO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBzb3J0ZWRSZXZpZXdzLmZsYXQoKTtcbiAgfVxuICByZXR1cm4gcmV2aWV3cztcbn07XG5cbmNvbnN0IGFwcGx5U3RhckZpbHRlcnMgPSAocmV2aWV3cywgc3RhckZpbHRlcnMpID0+IHtcbiAgaWYgKHN0YXJGaWx0ZXJzLmxlbmd0aCA9PT0gMCkgeyByZXR1cm4gcmV2aWV3czsgfVxuICB2YXIgb3V0cHV0ID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmV2aWV3cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChzdGFyRmlsdGVycy5pbmRleE9mKHJldmlld3NbaV0ucmF0aW5nKSAhPT0gLTEpIHtcbiAgICAgIG91dHB1dC5wdXNoKHJldmlld3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0O1xufTtcblxuY29uc3QgYXBwbHlLZXl3b3JkID0gKHJldmlld3MsIGtleXdvcmQpID0+IHtcbiAgbGV0IG91dHB1dCA9IHJldmlld3MuZmlsdGVyKHJldmlldyA9PiB7XG4gICAgaWYgKHJldmlldy5yZXNwb25zZSA9PT0gbnVsbCkge1xuICAgICAgcmV2aWV3LnJlc3BvbnNlID0gJyc7XG4gICAgfVxuICAgIHJldHVybiByZXZpZXcuc3VtbWFyeS5pbmNsdWRlcyhrZXl3b3JkKSB8fCByZXZpZXcuYm9keS5pbmNsdWRlcyhrZXl3b3JkKSB8fCByZXZpZXcucmV2aWV3ZXJfbmFtZS5pbmNsdWRlcyhrZXl3b3JkKSB8fCByZXZpZXcucmVzcG9uc2UuaW5jbHVkZXMoa2V5d29yZCk7XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufTtcblxuY29uc3QgZm9ybWF0UmV2aWV3VGlsZSA9IChzdW1tYXJ5LCBib2R5LCBwaG90b3MsIHJldmlld0lkKSA9PiB7XG4gIHZhciBhZGRpdGlvbmFsQm9keSA9ICcnO1xuICB2YXIgc2hvd0FkZGl0aW9uYWxCb2R5QnV0dG9uID0gZmFsc2U7XG4gIHZhciBzaG93UGhvdG9zID0gZmFsc2U7XG4gIHZhciBoZWxwZnVsID0gMDtcbiAgdmFyIHNob3dBZGRIZWxwZnVsQnV0dG9uID0gdHJ1ZTtcbiAgdmFyIHJlcG9ydFN0YXR1cyA9IGZhbHNlO1xuICBpZiAoc3VtbWFyeS5sZW5ndGggPiA2MCkge1xuICAgIHN1bW1hcnkgPSBzdW1tYXJ5LnNsaWNlKDAsIDYxKSArICcuLi4nO1xuICB9XG4gIGlmIChib2R5Lmxlbmd0aCA+IDI1MCkge1xuICAgIGFkZGl0aW9uYWxCb2R5ID0gYm9keS5zbGljZSgpO1xuICAgIGJvZHkgPSBib2R5LnNsaWNlKDAsIDI1MSkgKyAnLi4uJztcbiAgICBzaG93QWRkaXRpb25hbEJvZHlCdXR0b24gPSB0cnVlO1xuICB9XG4gIGlmIChwaG90b3MubGVuZ3RoICE9PSAwKSB7XG4gICAgc2hvd1Bob3RvcyA9IHRydWU7XG4gIH1cbiAgdmFyIGN1cnJlbnRIZWxwZnVsUmV2aWV3cyA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnaGVscGZ1bFJldmlld3MnKSk7XG4gIGlmIChjdXJyZW50SGVscGZ1bFJldmlld3MuaW5kZXhPZihyZXZpZXdJZCkgIT09IC0xKSB7XG4gICAgaGVscGZ1bCA9IDE7XG4gICAgc2hvd0FkZEhlbHBmdWxCdXR0b24gPSBmYWxzZTtcbiAgfVxuICB2YXIgY3VycmVudFJlcG9ydGVkUmV2aWV3cyA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgncmVwb3J0ZWRSZXZpZXdzJykpO1xuICBpZiAoY3VycmVudFJlcG9ydGVkUmV2aWV3cy5pbmRleE9mKHJldmlld0lkKSAhPT0gLTEpIHtcbiAgICByZXBvcnRTdGF0dXMgPSB0cnVlO1xuICB9XG4gIHZhciBhbGxIZWxwZnVsUmV2aWV3cyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hlbHBmdWxSZXZpZXdzJykpO1xuICBpZiAoYWxsSGVscGZ1bFJldmlld3MgJiYgYWxsSGVscGZ1bFJldmlld3MuaW5kZXhPZihyZXZpZXdJZCkgIT09IC0xKSB7XG4gICAgc2hvd0FkZEhlbHBmdWxCdXR0b24gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gW3N1bW1hcnksIGJvZHksIGFkZGl0aW9uYWxCb2R5LCBzaG93QWRkaXRpb25hbEJvZHlCdXR0b24sIHNob3dQaG90b3MsIGhlbHBmdWwsIHNob3dBZGRIZWxwZnVsQnV0dG9uLCByZXBvcnRTdGF0dXNdO1xufTtcblxuY29uc3QgcHJvZHVjdENoYXJhY3RlcmlzdGljcyA9IHtcbiAgJ1NpemUnOiB7XG4gICAgMTogJ0Egc2l6ZSB0b28gc21hbGwnLFxuICAgIDI6ICfCvSBhIHNpemUgdG9vIHNtYWxsJyxcbiAgICAzOiAnUGVyZmVjdCcsXG4gICAgNDogJ8K9IGEgc2l6ZSB0b28gYmlnJyxcbiAgICA1OiAnQSBzaXplIHRvbyB3aWRlJ1xuICB9LFxuICAnV2lkdGgnOiB7XG4gICAgMTogJ1RvbyBuYXJyb3cnLFxuICAgIDI6ICdTbGlnaHRseSBuYXJyb3cnLFxuICAgIDM6ICdQZXJmZWN0JyxcbiAgICA0OiAnU2xpZ2h0bHkgd2lkZScsXG4gICAgNTogJ1RvbyB3aWRlJ1xuICB9LFxuICAnQ29tZm9ydCc6IHtcbiAgICAxOiAnVW5jb21mb3J0YWJsZScsXG4gICAgMjogJ1NsaWdodGx5IHVuY29tZm9ydGFibGUnLFxuICAgIDM6ICdPaycsXG4gICAgNDogJ0NvbWZvcnRhYmxlJyxcbiAgICA1OiAnUGVyZmVjdCdcbiAgfSxcbiAgJ1F1YWxpdHknOiB7XG4gICAgMTogJ1Bvb3InLFxuICAgIDI6ICdCZWxvdyBhdmVyYWdlJyxcbiAgICAzOiAnV2hhdCBJIGV4cGVjdGVkJyxcbiAgICA0OiAnUHJldHR5IGdyZWF0JyxcbiAgICA1OiAnUGVyZmVjdCdcbiAgfSxcbiAgJ0xlbmd0aCc6IHtcbiAgICAxOiAnUnVucyBzaG9ydCcsXG4gICAgMjogJ1J1bnMgc2xpZ2h0bHkgc2hvcnQnLFxuICAgIDM6ICdQZXJmZWN0JyxcbiAgICA0OiAnUnVucyBzbGlnaHRseSBsb25nJyxcbiAgICA1OiAnUnVucyBsb25nJ1xuICB9LFxuICAnRml0Jzoge1xuICAgIDE6ICdSdW5zIHRpZ2h0JyxcbiAgICAyOiAnUnVucyBzbGlnaHRseSB0aWdodCcsXG4gICAgMzogJ1BlcmZlY3QnLFxuICAgIDQ6ICdSdW5zIHNsaWdodGx5IGxvbmcnLFxuICAgIDU6ICdSdW5zIGxvbmcnXG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmb3JtYXREYXRlOiBmb3JtYXREYXRlLFxuICBmZXRjaFJldmlld3M6IGZldGNoUmV2aWV3cyxcbiAgY29tcHV0ZUF2ZXJhZ2VSYXRpbmc6IGNvbXB1dGVBdmVyYWdlUmF0aW5nLFxuICBjb21wdXRlUmF0aW5nQnJlYWtkb3duOiBjb21wdXRlUmF0aW5nQnJlYWtkb3duLFxuICBjb21wdXRlUmVjb21tZW5kZWRQZXJjZW50YWdlOiBjb21wdXRlUmVjb21tZW5kZWRQZXJjZW50YWdlLFxuICBmb3JtYXRDaGFyYWN0ZXJpc3RpY3M6IGZvcm1hdENoYXJhY3RlcmlzdGljcyxcbiAgc29ydFJldmlld3M6IHNvcnRSZXZpZXdzLFxuICBhcHBseVN0YXJGaWx0ZXJzOiBhcHBseVN0YXJGaWx0ZXJzLFxuICBhcHBseUtleXdvcmQ6IGFwcGx5S2V5d29yZCxcbiAgZm9ybWF0UmV2aWV3VGlsZTogZm9ybWF0UmV2aWV3VGlsZSxcbiAgcHJvZHVjdENoYXJhY3RlcmlzdGljczogcHJvZHVjdENoYXJhY3RlcmlzdGljc1xufTsiLCJjb25zdCBnZXRSZWxhdGVkSXRlbXMgPSAocHJvZHVjdElkKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSAocmVzb2x2ZSA9PiB7XG4gICAgZmV0Y2goYC9wcm9kdWN0cy8ke3Byb2R1Y3RJZH0vcmVsYXRlZGApXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgbGV0IG1haW5Qcm9kdWN0SWQgPSBwYXJzZUludChwcm9kdWN0SWQpO1xuICAgICAgICBsZXQgbm9EdXBsaWNhdGVzID0gZGF0YS5maWx0ZXIoaWQgPT4gaWQgIT09IG1haW5Qcm9kdWN0SWQpO1xuICAgICAgICByZXNvbHZlKG5vRHVwbGljYXRlcyk7XG4gICAgICB9KTtcbiAgfSk7XG59O1xuXG5jb25zdCBnZXRQcm9kdWN0SW5mbyA9IChwcm9kdWN0SWQpID0+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlIChyZXNvbHZlID0+IHtcbiAgICBmZXRjaChgL3Byb2R1Y3RzLyR7cHJvZHVjdElkfWApXG4gICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS5qc29uKCkpXG4gICAgICAudGhlbihkYXRhID0+IHJlc29sdmUoZGF0YSkpO1xuICB9KTtcbn07XG5cbmNvbnN0IGdldFByb2R1Y3RTdHlsZXMgPSAocHJvZHVjdElkKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSAocmVzb2x2ZSA9PiB7XG4gICAgZmV0Y2goYC9wcm9kdWN0cy8ke3Byb2R1Y3RJZH0vc3R5bGVzYClcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSlcbiAgICAgIC50aGVuKGRhdGEgPT4gcmVzb2x2ZShkYXRhKSk7XG4gIH0pO1xufTtcblxuY29uc3QgZ2V0UHJvZHVjdFJhdGluZ3MgPSAocHJvZHVjdElkKSA9PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSAocmVzb2x2ZSA9PiB7XG4gICAgZmV0Y2goYC9yZXZpZXdzL21ldGE/cHJvZHVjdF9pZD0ke3Byb2R1Y3RJZH1gKVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKVxuICAgICAgLnRoZW4oZGF0YSA9PiByZXNvbHZlKGRhdGEpKTtcbiAgfSk7XG59O1xuXG5jb25zdCBmaW5kRGVmYXVsdFN0eWxlID0gKHN0eWxlcykgPT4ge1xuICBsZXQgZm91bmREZWZhdWx0ID0gZmFsc2U7XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlIChyZXNvbHZlID0+IHtcbiAgICBzdHlsZXMuZm9yRWFjaChzdHlsZSA9PiB7XG4gICAgICBpZiAoc3R5bGVbJ2RlZmF1bHQ/J10gPT09IHRydWUpIHtcbiAgICAgICAgZm91bmREZWZhdWx0ID0gdHJ1ZTtcbiAgICAgICAgcmVzb2x2ZShzdHlsZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoIWZvdW5kRGVmYXVsdCkge1xuICAgICAgcmVzb2x2ZShzdHlsZXNbMF0pO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBkZWZpbmVNYWluUHJvZHVjdCA9IChpbmZvLCBkZWZhdWx0U3R5bGUsIGF2ZXJhZ2VSYXRpbmcpID0+IHtcbiAgbGV0IHByaWNlLCB0aHVtYm5haWxVcmwsIG1haW5Qcm9kdWN0LCByYXRpbmc7XG4gIGF2ZXJhZ2VSYXRpbmcgPT09ICdOYU4nID8gcmF0aW5nID0gJzAuMDAnIDogcmF0aW5nID0gYXZlcmFnZVJhdGluZztcblxuICAhZGVmYXVsdFN0eWxlLnNhbGVfcHJpY2VcbiAgICA/IHByaWNlID0gZGVmYXVsdFN0eWxlLm9yaWdpbmFsX3ByaWNlXG4gICAgOiBwcmljZSA9IGRlZmF1bHRTdHlsZS5zYWxlX3ByaWNlO1xuXG4gICFkZWZhdWx0U3R5bGUucGhvdG9zWzBdLnRodW1ibmFpbF91cmxcbiAgICA/IHRodW1ibmFpbFVybCA9ICdodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMDUzMy8yMDg5L2ZpbGVzL3BsYWNlaG9sZGVyLWltYWdlcy1pbWFnZV9sYXJnZS5wbmc/Zm9ybWF0PXdlYnAmdj0xNTMwMTI5MDgxJ1xuICAgIDogdGh1bWJuYWlsVXJsID0gZGVmYXVsdFN0eWxlLnBob3Rvc1swXS50aHVtYm5haWxfdXJsO1xuXG4gIG1haW5Qcm9kdWN0ID0ge1xuICAgIHRodW1ibmFpbFVybDogdGh1bWJuYWlsVXJsLFxuICAgIGNhdGVnb3J5OiBpbmZvLmNhdGVnb3J5LFxuICAgIG5hbWU6IGluZm8ubmFtZSxcbiAgICBwcmljZTogcHJpY2UsXG4gICAgcmF0aW5nOiByYXRpbmcsXG4gICAgaWQ6IGluZm8uaWRcbiAgfTtcblxuICByZXR1cm4gbWFpblByb2R1Y3Q7XG59O1xuXG5jb25zdCBmaW5kQ29tcGFyaXNvbkZlYXR1cmVzID0gKG1haW5GZWF0dXJlcywgY29tcGFyaXNvbkZlYXR1cmVzKSA9PiB7XG4gIGxldCBhbGxGZWF0dXJlcyA9IFtdO1xuXG4gIG1haW5GZWF0dXJlcy5mb3JFYWNoKGZlYXR1cmUgPT4ge1xuICAgIGlmIChmZWF0dXJlLnZhbHVlID09PSBudWxsKSB7IGZlYXR1cmUudmFsdWUgPSAnLS0nOyB9XG4gICAgZmVhdHVyZS5jb21wVmFsdWUgPSAnLS0nO1xuICAgIGZlYXR1cmUucHJvZHVjdCA9ICdtYWluJztcbiAgICBhbGxGZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICB9KTtcblxuICBjb21wYXJpc29uRmVhdHVyZXMuZm9yRWFjaChjb21wRmVhdHVyZSA9PiB7XG4gICAgaWYgKGNvbXBGZWF0dXJlLnZhbHVlID09PSBudWxsKSB7IGNvbXBGZWF0dXJlLnZhbHVlID0gJy0tJzsgfVxuICAgIHZhciBpbmRleCA9IGFsbEZlYXR1cmVzLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uZmVhdHVyZSA9PT0gY29tcEZlYXR1cmUuZmVhdHVyZSk7XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBhbGxGZWF0dXJlc1tpbmRleF0uY29tcFZhbHVlID0gY29tcEZlYXR1cmUudmFsdWU7XG4gICAgICBjb21wRmVhdHVyZS5wcm9kdWN0ID0gJ2NvbXAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wRmVhdHVyZS5jb21wVmFsdWUgPSAnLS0nO1xuICAgICAgY29tcEZlYXR1cmUucHJvZHVjdCA9ICdjb21wJztcbiAgICAgIGFsbEZlYXR1cmVzLnB1c2goY29tcEZlYXR1cmUpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGFsbEZlYXR1cmVzO1xufTtcblxuY29uc3QgcHJldmVudFNjcm9sbCA9ICgpID0+IHtcbiAgbGV0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuXG4gIGlmIChlbGVtLnN0eWxlLm92ZXJmbG93ID09PSAnJykge1xuICAgIGVsZW0uc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgfSBlbHNlIGlmIChlbGVtLnN0eWxlLm92ZXJmbG93ID09PSAnaGlkZGVuJykge1xuICAgIGVsZW0uc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7IGdldFJlbGF0ZWRJdGVtcywgZ2V0UHJvZHVjdEluZm8sIGdldFByb2R1Y3RTdHlsZXMsIGdldFByb2R1Y3RSYXRpbmdzLCBmaW5kRGVmYXVsdFN0eWxlLCBkZWZpbmVNYWluUHJvZHVjdCwgZmluZENvbXBhcmlzb25GZWF0dXJlcywgcHJldmVudFNjcm9sbCB9OyIsIi8qIVxuICBDb3B5cmlnaHQgKGMpIDIwMTggSmVkIFdhdHNvbi5cbiAgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChNSVQpLCBzZWVcbiAgaHR0cDovL2plZHdhdHNvbi5naXRodWIuaW8vY2xhc3NuYW1lc1xuKi9cbi8qIGdsb2JhbCBkZWZpbmUgKi9cblxuKGZ1bmN0aW9uICgpIHtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdHZhciBoYXNPd24gPSB7fS5oYXNPd25Qcm9wZXJ0eTtcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgPT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcblx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gYXJnKSB7XG5cdFx0XHRcdFx0XHRpZiAoaGFzT3duLmNhbGwoYXJnLCBrZXkpICYmIGFyZ1trZXldKSB7XG5cdFx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNsYXNzZXMuam9pbignICcpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG5cdFx0Y2xhc3NOYW1lcy5kZWZhdWx0ID0gY2xhc3NOYW1lcztcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGNsYXNzTmFtZXM7XG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZGVmaW5lLmFtZCA9PT0gJ29iamVjdCcgJiYgZGVmaW5lLmFtZCkge1xuXHRcdC8vIHJlZ2lzdGVyIGFzICdjbGFzc25hbWVzJywgY29uc2lzdGVudCB3aXRoIG5wbSBwYWNrYWdlIG5hbWVcblx0XHRkZWZpbmUoJ2NsYXNzbmFtZXMnLCBbXSwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGNsYXNzTmFtZXM7XG5cdFx0fSk7XG5cdH0gZWxzZSB7XG5cdFx0d2luZG93LmNsYXNzTmFtZXMgPSBjbGFzc05hbWVzO1xuXHR9XG59KCkpO1xuIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjYuMFxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDIxLTAzLTAyVDE3OjA4WlxuICovXG4oIGZ1bmN0aW9uKCBnbG9iYWwsIGZhY3RvcnkgKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cblx0aWYgKCB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUuZXhwb3J0cyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIEZvciBDb21tb25KUyBhbmQgQ29tbW9uSlMtbGlrZSBlbnZpcm9ubWVudHMgd2hlcmUgYSBwcm9wZXIgYHdpbmRvd2Bcblx0XHQvLyBpcyBwcmVzZW50LCBleGVjdXRlIHRoZSBmYWN0b3J5IGFuZCBnZXQgalF1ZXJ5LlxuXHRcdC8vIEZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3QgaGF2ZSBhIGB3aW5kb3dgIHdpdGggYSBgZG9jdW1lbnRgXG5cdFx0Ly8gKHN1Y2ggYXMgTm9kZS5qcyksIGV4cG9zZSBhIGZhY3RvcnkgYXMgbW9kdWxlLmV4cG9ydHMuXG5cdFx0Ly8gVGhpcyBhY2NlbnR1YXRlcyB0aGUgbmVlZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgcmVhbCBgd2luZG93YC5cblx0XHQvLyBlLmcuIHZhciBqUXVlcnkgPSByZXF1aXJlKFwianF1ZXJ5XCIpKHdpbmRvdyk7XG5cdFx0Ly8gU2VlIHRpY2tldCAjMTQ1NDkgZm9yIG1vcmUgaW5mby5cblx0XHRtb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5kb2N1bWVudCA/XG5cdFx0XHRmYWN0b3J5KCBnbG9iYWwsIHRydWUgKSA6XG5cdFx0XHRmdW5jdGlvbiggdyApIHtcblx0XHRcdFx0aWYgKCAhdy5kb2N1bWVudCApIHtcblx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoIFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIGZhY3RvcnkoIHcgKTtcblx0XHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeSggZ2xvYmFsICk7XG5cdH1cblxuLy8gUGFzcyB0aGlzIGlmIHdpbmRvdyBpcyBub3QgZGVmaW5lZCB5ZXRcbn0gKSggdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHRoaXMsIGZ1bmN0aW9uKCB3aW5kb3csIG5vR2xvYmFsICkge1xuXG4vLyBFZGdlIDw9IDEyIC0gMTMrLCBGaXJlZm94IDw9MTggLSA0NSssIElFIDEwIC0gMTEsIFNhZmFyaSA1LjEgLSA5KywgaU9TIDYgLSA5LjFcbi8vIHRocm93IGV4Y2VwdGlvbnMgd2hlbiBub24tc3RyaWN0IGNvZGUgKGUuZy4sIEFTUC5ORVQgNC41KSBhY2Nlc3NlcyBzdHJpY3QgbW9kZVxuLy8gYXJndW1lbnRzLmNhbGxlZS5jYWxsZXIgKHRyYWMtMTMzMzUpLiBCdXQgYXMgb2YgalF1ZXJ5IDMuMCAoMjAxNiksIHN0cmljdCBtb2RlIHNob3VsZCBiZSBjb21tb25cbi8vIGVub3VnaCB0aGF0IGFsbCBzdWNoIGF0dGVtcHRzIGFyZSBndWFyZGVkIGluIGEgdHJ5IGJsb2NrLlxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBhcnIgPSBbXTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBmbGF0ID0gYXJyLmZsYXQgPyBmdW5jdGlvbiggYXJyYXkgKSB7XG5cdHJldHVybiBhcnIuZmxhdC5jYWxsKCBhcnJheSApO1xufSA6IGZ1bmN0aW9uKCBhcnJheSApIHtcblx0cmV0dXJuIGFyci5jb25jYXQuYXBwbHkoIFtdLCBhcnJheSApO1xufTtcblxuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuXHRcdC8vIEluIHNvbWUgYnJvd3NlcnMsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCA8b2JqZWN0PiBlbGVtZW50c1xuXHRcdC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG5cdFx0Ly8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuXHRcdC8vIFN1cHBvcnQ6IFF0V2ViIDw9My44LjUsIFdlYktpdCA8PTUzNC4zNCwgd2todG1sdG9wZGYgdG9vbCA8PTAuMTIuNVxuXHRcdC8vIFBsdXMgZm9yIG9sZCBXZWJLaXQsIHR5cGVvZiByZXR1cm5zIFwiZnVuY3Rpb25cIiBmb3IgSFRNTCBjb2xsZWN0aW9uc1xuXHRcdC8vIChlLmcuLCBgdHlwZW9mIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGl2XCIpID09PSBcImZ1bmN0aW9uXCJgKS4gKGdoLTQ3NTYpXG5cdFx0cmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiICYmXG5cdFx0XHR0eXBlb2Ygb2JqLml0ZW0gIT09IFwiZnVuY3Rpb25cIjtcblx0fTtcblxuXG52YXIgaXNXaW5kb3cgPSBmdW5jdGlvbiBpc1dpbmRvdyggb2JqICkge1xuXHRcdHJldHVybiBvYmogIT0gbnVsbCAmJiBvYmogPT09IG9iai53aW5kb3c7XG5cdH07XG5cblxudmFyIGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub25jZTogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIG5vZGUsIGRvYyApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSwgdmFsLFxuXHRcdFx0c2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoIFwic2NyaXB0XCIgKTtcblxuXHRcdHNjcmlwdC50ZXh0ID0gY29kZTtcblx0XHRpZiAoIG5vZGUgKSB7XG5cdFx0XHRmb3IgKCBpIGluIHByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA2NCssIEVkZ2UgMTgrXG5cdFx0XHRcdC8vIFNvbWUgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgXCJub25jZVwiIHByb3BlcnR5IG9uIHNjcmlwdHMuXG5cdFx0XHRcdC8vIE9uIHRoZSBvdGhlciBoYW5kLCBqdXN0IHVzaW5nIGBnZXRBdHRyaWJ1dGVgIGlzIG5vdCBlbm91Z2ggYXNcblx0XHRcdFx0Ly8gdGhlIGBub25jZWAgYXR0cmlidXRlIGlzIHJlc2V0IHRvIGFuIGVtcHR5IHN0cmluZyB3aGVuZXZlciBpdFxuXHRcdFx0XHQvLyBiZWNvbWVzIGJyb3dzaW5nLWNvbnRleHQgY29ubmVjdGVkLlxuXHRcdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3doYXR3Zy9odG1sL2lzc3Vlcy8yMzY5XG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNub25jZS1hdHRyaWJ1dGVzXG5cdFx0XHRcdC8vIFRoZSBgbm9kZS5nZXRBdHRyaWJ1dGVgIGNoZWNrIHdhcyBhZGRlZCBmb3IgdGhlIHNha2Ugb2Zcblx0XHRcdFx0Ly8gYGpRdWVyeS5nbG9iYWxFdmFsYCBzbyB0aGF0IGl0IGNhbiBmYWtlIGEgbm9uY2UtY29udGFpbmluZyBub2RlXG5cdFx0XHRcdC8vIHZpYSBhbiBvYmplY3QuXG5cdFx0XHRcdHZhbCA9IG5vZGVbIGkgXSB8fCBub2RlLmdldEF0dHJpYnV0ZSAmJiBub2RlLmdldEF0dHJpYnV0ZSggaSApO1xuXHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCBpLCB2YWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuNi4wXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9O1xuXG5qUXVlcnkuZm4gPSBqUXVlcnkucHJvdG90eXBlID0ge1xuXG5cdC8vIFRoZSBjdXJyZW50IHZlcnNpb24gb2YgalF1ZXJ5IGJlaW5nIHVzZWRcblx0anF1ZXJ5OiB2ZXJzaW9uLFxuXG5cdGNvbnN0cnVjdG9yOiBqUXVlcnksXG5cblx0Ly8gVGhlIGRlZmF1bHQgbGVuZ3RoIG9mIGEgalF1ZXJ5IG9iamVjdCBpcyAwXG5cdGxlbmd0aDogMCxcblxuXHR0b0FycmF5OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgTnRoIGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgZWxlbWVudCBzZXQgT1Jcblx0Ly8gR2V0IHRoZSB3aG9sZSBtYXRjaGVkIGVsZW1lbnQgc2V0IGFzIGEgY2xlYW4gYXJyYXlcblx0Z2V0OiBmdW5jdGlvbiggbnVtICkge1xuXG5cdFx0Ly8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgaW4gYSBjbGVhbiBhcnJheVxuXHRcdGlmICggbnVtID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gc2xpY2UuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiBqdXN0IHRoZSBvbmUgZWxlbWVudCBmcm9tIHRoZSBzZXRcblx0XHRyZXR1cm4gbnVtIDwgMCA/IHRoaXNbIG51bSArIHRoaXMubGVuZ3RoIF0gOiB0aGlzWyBudW0gXTtcblx0fSxcblxuXHQvLyBUYWtlIGFuIGFycmF5IG9mIGVsZW1lbnRzIGFuZCBwdXNoIGl0IG9udG8gdGhlIHN0YWNrXG5cdC8vIChyZXR1cm5pbmcgdGhlIG5ldyBtYXRjaGVkIGVsZW1lbnQgc2V0KVxuXHRwdXNoU3RhY2s6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblxuXHRcdC8vIEJ1aWxkIGEgbmV3IGpRdWVyeSBtYXRjaGVkIGVsZW1lbnQgc2V0XG5cdFx0dmFyIHJldCA9IGpRdWVyeS5tZXJnZSggdGhpcy5jb25zdHJ1Y3RvcigpLCBlbGVtcyApO1xuXG5cdFx0Ly8gQWRkIHRoZSBvbGQgb2JqZWN0IG9udG8gdGhlIHN0YWNrIChhcyBhIHJlZmVyZW5jZSlcblx0XHRyZXQucHJldk9iamVjdCA9IHRoaXM7XG5cblx0XHQvLyBSZXR1cm4gdGhlIG5ld2x5LWZvcm1lZCBlbGVtZW50IHNldFxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0Ly8gRXhlY3V0ZSBhIGNhbGxiYWNrIGZvciBldmVyeSBlbGVtZW50IGluIHRoZSBtYXRjaGVkIHNldC5cblx0ZWFjaDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZWFjaCggdGhpcywgY2FsbGJhY2sgKTtcblx0fSxcblxuXHRtYXA6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5tYXAoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuIGNhbGxiYWNrLmNhbGwoIGVsZW0sIGksIGVsZW0gKTtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRzbGljZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBzbGljZS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgKTtcblx0fSxcblxuXHRmaXJzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIDAgKTtcblx0fSxcblxuXHRsYXN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggLTEgKTtcblx0fSxcblxuXHRldmVuOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeS5ncmVwKCB0aGlzLCBmdW5jdGlvbiggX2VsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gKCBpICsgMSApICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRvZGQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5LmdyZXAoIHRoaXMsIGZ1bmN0aW9uKCBfZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBpICUgMjtcblx0XHR9ICkgKTtcblx0fSxcblxuXHRlcTogZnVuY3Rpb24oIGkgKSB7XG5cdFx0dmFyIGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0aiA9ICtpICsgKCBpIDwgMCA/IGxlbiA6IDAgKTtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGogPj0gMCAmJiBqIDwgbGVuID8gWyB0aGlzWyBqIF0gXSA6IFtdICk7XG5cdH0sXG5cblx0ZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wcmV2T2JqZWN0IHx8IHRoaXMuY29uc3RydWN0b3IoKTtcblx0fSxcblxuXHQvLyBGb3IgaW50ZXJuYWwgdXNlIG9ubHkuXG5cdC8vIEJlaGF2ZXMgbGlrZSBhbiBBcnJheSdzIG1ldGhvZCwgbm90IGxpa2UgYSBqUXVlcnkgbWV0aG9kLlxuXHRwdXNoOiBwdXNoLFxuXHRzb3J0OiBhcnIuc29ydCxcblx0c3BsaWNlOiBhcnIuc3BsaWNlXG59O1xuXG5qUXVlcnkuZXh0ZW5kID0galF1ZXJ5LmZuLmV4dGVuZCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjb3B5SXNBcnJheSwgY2xvbmUsXG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyAwIF0gfHwge30sXG5cdFx0aSA9IDEsXG5cdFx0bGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcblx0XHRkZWVwID0gZmFsc2U7XG5cblx0Ly8gSGFuZGxlIGEgZGVlcCBjb3B5IHNpdHVhdGlvblxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGRlZXAgPSB0YXJnZXQ7XG5cblx0XHQvLyBTa2lwIHRoZSBib29sZWFuIGFuZCB0aGUgdGFyZ2V0XG5cdFx0dGFyZ2V0ID0gYXJndW1lbnRzWyBpIF0gfHwge307XG5cdFx0aSsrO1xuXHR9XG5cblx0Ly8gSGFuZGxlIGNhc2Ugd2hlbiB0YXJnZXQgaXMgYSBzdHJpbmcgb3Igc29tZXRoaW5nIChwb3NzaWJsZSBpbiBkZWVwIGNvcHkpXG5cdGlmICggdHlwZW9mIHRhcmdldCAhPT0gXCJvYmplY3RcIiAmJiAhaXNGdW5jdGlvbiggdGFyZ2V0ICkgKSB7XG5cdFx0dGFyZ2V0ID0ge307XG5cdH1cblxuXHQvLyBFeHRlbmQgalF1ZXJ5IGl0c2VsZiBpZiBvbmx5IG9uZSBhcmd1bWVudCBpcyBwYXNzZWRcblx0aWYgKCBpID09PSBsZW5ndGggKSB7XG5cdFx0dGFyZ2V0ID0gdGhpcztcblx0XHRpLS07XG5cdH1cblxuXHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblxuXHRcdC8vIE9ubHkgZGVhbCB3aXRoIG5vbi1udWxsL3VuZGVmaW5lZCB2YWx1ZXNcblx0XHRpZiAoICggb3B0aW9ucyA9IGFyZ3VtZW50c1sgaSBdICkgIT0gbnVsbCApIHtcblxuXHRcdFx0Ly8gRXh0ZW5kIHRoZSBiYXNlIG9iamVjdFxuXHRcdFx0Zm9yICggbmFtZSBpbiBvcHRpb25zICkge1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgT2JqZWN0LnByb3RvdHlwZSBwb2xsdXRpb25cblx0XHRcdFx0Ly8gUHJldmVudCBuZXZlci1lbmRpbmcgbG9vcFxuXHRcdFx0XHRpZiAoIG5hbWUgPT09IFwiX19wcm90b19fXCIgfHwgdGFyZ2V0ID09PSBjb3B5ICkge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVjdXJzZSBpZiB3ZSdyZSBtZXJnaW5nIHBsYWluIG9iamVjdHMgb3IgYXJyYXlzXG5cdFx0XHRcdGlmICggZGVlcCAmJiBjb3B5ICYmICggalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvcHkgKSB8fFxuXHRcdFx0XHRcdCggY29weUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KCBjb3B5ICkgKSApICkge1xuXHRcdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXG5cdFx0XHRcdFx0Ly8gRW5zdXJlIHByb3BlciB0eXBlIGZvciB0aGUgc291cmNlIHZhbHVlXG5cdFx0XHRcdFx0aWYgKCBjb3B5SXNBcnJheSAmJiAhQXJyYXkuaXNBcnJheSggc3JjICkgKSB7XG5cdFx0XHRcdFx0XHRjbG9uZSA9IFtdO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAoICFjb3B5SXNBcnJheSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSB7fTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvcHlJc0FycmF5ID0gZmFsc2U7XG5cblx0XHRcdFx0XHQvLyBOZXZlciBtb3ZlIG9yaWdpbmFsIG9iamVjdHMsIGNsb25lIHRoZW1cblx0XHRcdFx0XHR0YXJnZXRbIG5hbWUgXSA9IGpRdWVyeS5leHRlbmQoIGRlZXAsIGNsb25lLCBjb3B5ICk7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgYnJpbmcgaW4gdW5kZWZpbmVkIHZhbHVlc1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb3B5ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBjb3B5O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBtb2RpZmllZCBvYmplY3Rcblx0cmV0dXJuIHRhcmdldDtcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBVbmlxdWUgZm9yIGVhY2ggY29weSBvZiBqUXVlcnkgb24gdGhlIHBhZ2Vcblx0ZXhwYW5kbzogXCJqUXVlcnlcIiArICggdmVyc2lvbiArIE1hdGgucmFuZG9tKCkgKS5yZXBsYWNlKCAvXFxEL2csIFwiXCIgKSxcblxuXHQvLyBBc3N1bWUgalF1ZXJ5IGlzIHJlYWR5IHdpdGhvdXQgdGhlIHJlYWR5IG1vZHVsZVxuXHRpc1JlYWR5OiB0cnVlLFxuXG5cdGVycm9yOiBmdW5jdGlvbiggbXNnICkge1xuXHRcdHRocm93IG5ldyBFcnJvciggbXNnICk7XG5cdH0sXG5cblx0bm9vcDogZnVuY3Rpb24oKSB7fSxcblxuXHRpc1BsYWluT2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBwcm90bywgQ3RvcjtcblxuXHRcdC8vIERldGVjdCBvYnZpb3VzIG5lZ2F0aXZlc1xuXHRcdC8vIFVzZSB0b1N0cmluZyBpbnN0ZWFkIG9mIGpRdWVyeS50eXBlIHRvIGNhdGNoIGhvc3Qgb2JqZWN0c1xuXHRcdGlmICggIW9iaiB8fCB0b1N0cmluZy5jYWxsKCBvYmogKSAhPT0gXCJbb2JqZWN0IE9iamVjdF1cIiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRwcm90byA9IGdldFByb3RvKCBvYmogKTtcblxuXHRcdC8vIE9iamVjdHMgd2l0aCBubyBwcm90b3R5cGUgKGUuZy4sIGBPYmplY3QuY3JlYXRlKCBudWxsIClgKSBhcmUgcGxhaW5cblx0XHRpZiAoICFwcm90byApIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIE9iamVjdHMgd2l0aCBwcm90b3R5cGUgYXJlIHBsYWluIGlmZiB0aGV5IHdlcmUgY29uc3RydWN0ZWQgYnkgYSBnbG9iYWwgT2JqZWN0IGZ1bmN0aW9uXG5cdFx0Q3RvciA9IGhhc093bi5jYWxsKCBwcm90bywgXCJjb25zdHJ1Y3RvclwiICkgJiYgcHJvdG8uY29uc3RydWN0b3I7XG5cdFx0cmV0dXJuIHR5cGVvZiBDdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgZm5Ub1N0cmluZy5jYWxsKCBDdG9yICkgPT09IE9iamVjdEZ1bmN0aW9uU3RyaW5nO1xuXHR9LFxuXG5cdGlzRW1wdHlPYmplY3Q6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0dmFyIG5hbWU7XG5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgcHJvdmlkZWQgY29udGV4dDsgZmFsbHMgYmFjayB0byB0aGUgZ2xvYmFsIG9uZVxuXHQvLyBpZiBub3Qgc3BlY2lmaWVkLlxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSwgb3B0aW9ucywgZG9jICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9LCBkb2MgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBmbGF0KCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHRcdGNsYXNzMnR5cGVbIFwiW29iamVjdCBcIiArIG5hbWUgKyBcIl1cIiBdID0gbmFtZS50b0xvd2VyQ2FzZSgpO1xuXHR9ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjZcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMjEtMDItMTZcbiAqL1xuKCBmdW5jdGlvbiggd2luZG93ICkge1xudmFyIGksXG5cdHN1cHBvcnQsXG5cdEV4cHIsXG5cdGdldFRleHQsXG5cdGlzWE1MLFxuXHR0b2tlbml6ZSxcblx0Y29tcGlsZSxcblx0c2VsZWN0LFxuXHRvdXRlcm1vc3RDb250ZXh0LFxuXHRzb3J0SW5wdXQsXG5cdGhhc0R1cGxpY2F0ZSxcblxuXHQvLyBMb2NhbCBkb2N1bWVudCB2YXJzXG5cdHNldERvY3VtZW50LFxuXHRkb2N1bWVudCxcblx0ZG9jRWxlbSxcblx0ZG9jdW1lbnRJc0hUTUwsXG5cdHJidWdneVFTQSxcblx0cmJ1Z2d5TWF0Y2hlcyxcblx0bWF0Y2hlcyxcblx0Y29udGFpbnMsXG5cblx0Ly8gSW5zdGFuY2Utc3BlY2lmaWMgZGF0YVxuXHRleHBhbmRvID0gXCJzaXp6bGVcIiArIDEgKiBuZXcgRGF0ZSgpLFxuXHRwcmVmZXJyZWREb2MgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdGRpcnJ1bnMgPSAwLFxuXHRkb25lID0gMCxcblx0Y2xhc3NDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHRva2VuQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRjb21waWxlckNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdHNvcnRPcmRlciA9IGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdGlmICggYSA9PT0gYiApIHtcblx0XHRcdGhhc0R1cGxpY2F0ZSA9IHRydWU7XG5cdFx0fVxuXHRcdHJldHVybiAwO1xuXHR9LFxuXG5cdC8vIEluc3RhbmNlIG1ldGhvZHNcblx0aGFzT3duID0gKCB7fSApLmhhc093blByb3BlcnR5LFxuXHRhcnIgPSBbXSxcblx0cG9wID0gYXJyLnBvcCxcblx0cHVzaE5hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXG5cdC8vIFVzZSBhIHN0cmlwcGVkLWRvd24gaW5kZXhPZiBhcyBpdCdzIGZhc3RlciB0aGFuIG5hdGl2ZVxuXHQvLyBodHRwczovL2pzcGVyZi5jb20vdGhvci1pbmRleG9mLXZzLWZvci81XG5cdGluZGV4T2YgPSBmdW5jdGlvbiggbGlzdCwgZWxlbSApIHtcblx0XHR2YXIgaSA9IDAsXG5cdFx0XHRsZW4gPSBsaXN0Lmxlbmd0aDtcblx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGlmICggbGlzdFsgaSBdID09PSBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gaTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIC0xO1xuXHR9LFxuXG5cdGJvb2xlYW5zID0gXCJjaGVja2VkfHNlbGVjdGVkfGFzeW5jfGF1dG9mb2N1c3xhdXRvcGxheXxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58XCIgK1xuXHRcdFwiaXNtYXB8bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZFwiLFxuXG5cdC8vIFJlZ3VsYXIgZXhwcmVzc2lvbnNcblxuXHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9jc3MzLXNlbGVjdG9ycy8jd2hpdGVzcGFjZVxuXHR3aGl0ZXNwYWNlID0gXCJbXFxcXHgyMFxcXFx0XFxcXHJcXFxcblxcXFxmXVwiLFxuXG5cdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc3ludGF4LTMvI2lkZW50LXRva2VuLWRpYWdyYW1cblx0aWRlbnRpZmllciA9IFwiKD86XFxcXFxcXFxbXFxcXGRhLWZBLUZdezEsNn1cIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiP3xcXFxcXFxcXFteXFxcXHJcXFxcblxcXFxmXXxbXFxcXHctXXxbXlxcMC1cXFxceDdmXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBPcGVyYXRvciAoY2FwdHVyZSAyKVxuXHRcdFwiKihbKl4kfCF+XT89KVwiICsgd2hpdGVzcGFjZSArXG5cblx0XHQvLyBcIkF0dHJpYnV0ZSB2YWx1ZXMgbXVzdCBiZSBDU1MgaWRlbnRpZmllcnMgW2NhcHR1cmUgNV1cblx0XHQvLyBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArXG5cdFx0d2hpdGVzcGFjZSArIFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cblx0XHQvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBzZWxlY3RvcnMgbmVlZGluZyB0b2tlbml6ZSBpbiB0aGUgcHJlRmlsdGVyLCBwcmVmZXIgYXJndW1lbnRzOlxuXHRcdC8vIDEuIHF1b3RlZCAoY2FwdHVyZSAzOyBjYXB0dXJlIDQgb3IgY2FwdHVyZSA1KVxuXHRcdFwiKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8XCIgK1xuXG5cdFx0Ly8gMi4gc2ltcGxlIChjYXB0dXJlIDYpXG5cdFx0XCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKVtcXFxcXV18XCIgKyBhdHRyaWJ1dGVzICsgXCIpKil8XCIgK1xuXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICtcblx0XHR3aGl0ZXNwYWNlICsgXCIrJFwiLCBcImdcIiApLFxuXG5cdHJjb21tYSA9IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKixcIiArIHdoaXRlc3BhY2UgKyBcIipcIiApLFxuXHRyY29tYmluYXRvcnMgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiooWz4rfl18XCIgKyB3aGl0ZXNwYWNlICsgXCIpXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcIipcIiApLFxuXHRyZGVzY2VuZCA9IG5ldyBSZWdFeHAoIHdoaXRlc3BhY2UgKyBcInw+XCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaHRtbCA9IC9IVE1MJC9pLFxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXFtcXFxcZGEtZkEtRl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3xcXFxcXFxcXChbXlxcXFxyXFxcXG5cXFxcZl0pXCIsIFwiZ1wiICksXG5cdGZ1bmVzY2FwZSA9IGZ1bmN0aW9uKCBlc2NhcGUsIG5vbkhleCApIHtcblx0XHR2YXIgaGlnaCA9IFwiMHhcIiArIGVzY2FwZS5zbGljZSggMSApIC0gMHgxMDAwMDtcblxuXHRcdHJldHVybiBub25IZXggP1xuXG5cdFx0XHQvLyBTdHJpcCB0aGUgYmFja3NsYXNoIHByZWZpeCBmcm9tIGEgbm9uLWhleCBlc2NhcGUgc2VxdWVuY2Vcblx0XHRcdG5vbkhleCA6XG5cblx0XHRcdC8vIFJlcGxhY2UgYSBoZXhhZGVjaW1hbCBlc2NhcGUgc2VxdWVuY2Ugd2l0aCB0aGUgZW5jb2RlZCBVbmljb2RlIGNvZGUgcG9pbnRcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9MTErXG5cdFx0XHQvLyBGb3IgdmFsdWVzIG91dHNpZGUgdGhlIEJhc2ljIE11bHRpbGluZ3VhbCBQbGFuZSAoQk1QKSwgbWFudWFsbHkgY29uc3RydWN0IGFcblx0XHRcdC8vIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggKyAweDEwMDAwICkgOlxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICtcblx0XHRcdFx0Y2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGluRGlzYWJsZWRGaWVsZHNldCA9IGFkZENvbWJpbmF0b3IoXG5cdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gdHJ1ZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZmllbGRzZXRcIjtcblx0XHR9LFxuXHRcdHsgZGlyOiBcInBhcmVudE5vZGVcIiwgbmV4dDogXCJsZWdlbmRcIiB9XG5cdCk7XG5cbi8vIE9wdGltaXplIGZvciBwdXNoLmFwcGx5KCBfLCBOb2RlTGlzdCApXG50cnkge1xuXHRwdXNoLmFwcGx5KFxuXHRcdCggYXJyID0gc2xpY2UuY2FsbCggcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMgKSApLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZDw0LjBcblx0Ly8gRGV0ZWN0IHNpbGVudGx5IGZhaWxpbmcgcHVzaC5hcHBseVxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLWV4cHJlc3Npb25zXG5cdGFyclsgcHJlZmVycmVkRG9jLmNoaWxkTm9kZXMubGVuZ3RoIF0ubm9kZVR5cGU7XG59IGNhdGNoICggZSApIHtcblx0cHVzaCA9IHsgYXBwbHk6IGFyci5sZW5ndGggP1xuXG5cdFx0Ly8gTGV2ZXJhZ2Ugc2xpY2UgaWYgcG9zc2libGVcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHRwdXNoTmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoIGVscyApICk7XG5cdFx0fSA6XG5cblx0XHQvLyBTdXBwb3J0OiBJRTw5XG5cdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZCBkaXJlY3RseVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHZhciBqID0gdGFyZ2V0Lmxlbmd0aCxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdC8vIENhbid0IHRydXN0IE5vZGVMaXN0Lmxlbmd0aFxuXHRcdFx0d2hpbGUgKCAoIHRhcmdldFsgaisrIF0gPSBlbHNbIGkrKyBdICkgKSB7fVxuXHRcdFx0dGFyZ2V0Lmxlbmd0aCA9IGogLSAxO1xuXHRcdH1cblx0fTtcbn1cblxuZnVuY3Rpb24gU2l6emxlKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIG0sIGksIGVsZW0sIG5pZCwgbWF0Y2gsIGdyb3VwcywgbmV3U2VsZWN0b3IsXG5cdFx0bmV3Q29udGV4dCA9IGNvbnRleHQgJiYgY29udGV4dC5vd25lckRvY3VtZW50LFxuXG5cdFx0Ly8gbm9kZVR5cGUgZGVmYXVsdHMgdG8gOSwgc2luY2UgY29udGV4dCBkZWZhdWx0cyB0byBkb2N1bWVudFxuXHRcdG5vZGVUeXBlID0gY29udGV4dCA/IGNvbnRleHQubm9kZVR5cGUgOiA5O1xuXG5cdHJlc3VsdHMgPSByZXN1bHRzIHx8IFtdO1xuXG5cdC8vIFJldHVybiBlYXJseSBmcm9tIGNhbGxzIHdpdGggaW52YWxpZCBzZWxlY3RvciBvciBjb250ZXh0XG5cdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiIHx8ICFzZWxlY3RvciB8fFxuXHRcdG5vZGVUeXBlICE9PSAxICYmIG5vZGVUeXBlICE9PSA5ICYmIG5vZGVUeXBlICE9PSAxMSApIHtcblxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG5cblx0Ly8gVHJ5IHRvIHNob3J0Y3V0IGZpbmQgb3BlcmF0aW9ucyAoYXMgb3Bwb3NlZCB0byBmaWx0ZXJzKSBpbiBIVE1MIGRvY3VtZW50c1xuXHRpZiAoICFzZWVkICkge1xuXHRcdHNldERvY3VtZW50KCBjb250ZXh0ICk7XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKCBtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKSApICkge1xuXG5cdFx0XHRcdC8vIElEIHNlbGVjdG9yXG5cdFx0XHRcdGlmICggKCBtID0gbWF0Y2hbIDEgXSApICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHRcdC8vIFRPRE86IGlkZW50aWZ5IHZlcnNpb25zXG5cdFx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdFx0aWYgKCBlbGVtLmlkID09PSBtICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEVsZW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFLCBPcGVyYSwgV2Via2l0XG5cdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgY2FuIG1hdGNoIGVsZW1lbnRzIGJ5IG5hbWUgaW5zdGVhZCBvZiBJRFxuXHRcdFx0XHRcdFx0aWYgKCBuZXdDb250ZXh0ICYmICggZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSApICYmXG5cdFx0XHRcdFx0XHRcdGNvbnRhaW5zKCBjb250ZXh0LCBlbGVtICkgJiZcblx0XHRcdFx0XHRcdFx0ZWxlbS5pZCA9PT0gbSApIHtcblxuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFR5cGUgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbIDIgXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKCBtID0gbWF0Y2hbIDMgXSApICYmIHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJlxuXHRcdFx0XHRcdGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSggbSApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBhZHZhbnRhZ2Ugb2YgcXVlcnlTZWxlY3RvckFsbFxuXHRcdFx0aWYgKCBzdXBwb3J0LnFzYSAmJlxuXHRcdFx0XHQhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdICYmXG5cdFx0XHRcdCggIXJidWdneVFTQSB8fCAhcmJ1Z2d5UVNBLnRlc3QoIHNlbGVjdG9yICkgKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQoIG5vZGVUeXBlICE9PSAxIHx8IGNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSAhPT0gXCJvYmplY3RcIiApICkge1xuXG5cdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXG5cdFx0XHRcdC8vIHFTQSBjb25zaWRlcnMgZWxlbWVudHMgb3V0c2lkZSBhIHNjb3Bpbmcgcm9vdCB3aGVuIGV2YWx1YXRpbmcgY2hpbGQgb3Jcblx0XHRcdFx0Ly8gZGVzY2VuZGFudCBjb21iaW5hdG9ycywgd2hpY2ggaXMgbm90IHdoYXQgd2Ugd2FudC5cblx0XHRcdFx0Ly8gSW4gc3VjaCBjYXNlcywgd2Ugd29yayBhcm91bmQgdGhlIGJlaGF2aW9yIGJ5IHByZWZpeGluZyBldmVyeSBzZWxlY3RvciBpbiB0aGVcblx0XHRcdFx0Ly8gbGlzdCB3aXRoIGFuIElEIHNlbGVjdG9yIHJlZmVyZW5jaW5nIHRoZSBzY29wZSBjb250ZXh0LlxuXHRcdFx0XHQvLyBUaGUgdGVjaG5pcXVlIGhhcyB0byBiZSB1c2VkIGFzIHdlbGwgd2hlbiBhIGxlYWRpbmcgY29tYmluYXRvciBpcyB1c2VkXG5cdFx0XHRcdC8vIGFzIHN1Y2ggc2VsZWN0b3JzIGFyZSBub3QgcmVjb2duaXplZCBieSBxdWVyeVNlbGVjdG9yQWxsLlxuXHRcdFx0XHQvLyBUaGFua3MgdG8gQW5kcmV3IER1cG9udCBmb3IgdGhpcyB0ZWNobmlxdWUuXG5cdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHQoIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgfHwgcmNvbWJpbmF0b3JzLnRlc3QoIHNlbGVjdG9yICkgKSApIHtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblxuXHRcdFx0XHRcdC8vIFdlIGNhbiB1c2UgOnNjb3BlIGluc3RlYWQgb2YgdGhlIElEIGhhY2sgaWYgdGhlIGJyb3dzZXJcblx0XHRcdFx0XHQvLyBzdXBwb3J0cyBpdCAmIGlmIHdlJ3JlIG5vdCBjaGFuZ2luZyB0aGUgY29udGV4dC5cblx0XHRcdFx0XHRpZiAoIG5ld0NvbnRleHQgIT09IGNvbnRleHQgfHwgIXN1cHBvcnQuc2NvcGUgKSB7XG5cblx0XHRcdFx0XHRcdC8vIENhcHR1cmUgdGhlIGNvbnRleHQgSUQsIHNldHRpbmcgaXQgZmlyc3QgaWYgbmVjZXNzYXJ5XG5cdFx0XHRcdFx0XHRpZiAoICggbmlkID0gY29udGV4dC5nZXRBdHRyaWJ1dGUoIFwiaWRcIiApICkgKSB7XG5cdFx0XHRcdFx0XHRcdG5pZCA9IG5pZC5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAoIG5pZCA9IGV4cGFuZG8gKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZWZpeCBldmVyeSBzZWxlY3RvciBpbiB0aGUgbGlzdFxuXHRcdFx0XHRcdGdyb3VwcyA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdFx0XHRcdGkgPSBncm91cHMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0Z3JvdXBzWyBpIF0gPSAoIG5pZCA/IFwiI1wiICsgbmlkIDogXCI6c2NvcGVcIiApICsgXCIgXCIgK1xuXHRcdFx0XHRcdFx0XHR0b1NlbGVjdG9yKCBncm91cHNbIGkgXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRuZXdTZWxlY3RvciA9IGdyb3Vwcy5qb2luKCBcIixcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLFxuXHRcdFx0XHRcdFx0bmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCBuZXdTZWxlY3RvciApXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fSBjYXRjaCAoIHFzYUVycm9yICkge1xuXHRcdFx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIHNlbGVjdG9yLCB0cnVlICk7XG5cdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZSggXCJpZFwiICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQWxsIG90aGVyc1xuXHRyZXR1cm4gc2VsZWN0KCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKTtcbn1cblxuLyoqXG4gKiBDcmVhdGUga2V5LXZhbHVlIGNhY2hlcyBvZiBsaW1pdGVkIHNpemVcbiAqIEByZXR1cm5zIHtmdW5jdGlvbihzdHJpbmcsIG9iamVjdCl9IFJldHVybnMgdGhlIE9iamVjdCBkYXRhIGFmdGVyIHN0b3JpbmcgaXQgb24gaXRzZWxmIHdpdGhcbiAqXHRwcm9wZXJ0eSBuYW1lIHRoZSAoc3BhY2Utc3VmZml4ZWQpIHN0cmluZyBhbmQgKGlmIHRoZSBjYWNoZSBpcyBsYXJnZXIgdGhhbiBFeHByLmNhY2hlTGVuZ3RoKVxuICpcdGRlbGV0aW5nIHRoZSBvbGRlc3QgZW50cnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FjaGUoKSB7XG5cdHZhciBrZXlzID0gW107XG5cblx0ZnVuY3Rpb24gY2FjaGUoIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblxuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKCBjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlICk7XG5cdH1cblx0cmV0dXJuIGNhY2hlO1xufVxuXG4vKipcbiAqIE1hcmsgYSBmdW5jdGlvbiBmb3Igc3BlY2lhbCB1c2UgYnkgU2l6emxlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gbWFya1xuICovXG5mdW5jdGlvbiBtYXJrRnVuY3Rpb24oIGZuICkge1xuXHRmblsgZXhwYW5kbyBdID0gdHJ1ZTtcblx0cmV0dXJuIGZuO1xufVxuXG4vKipcbiAqIFN1cHBvcnQgdGVzdGluZyB1c2luZyBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBQYXNzZWQgdGhlIGNyZWF0ZWQgZWxlbWVudCBhbmQgcmV0dXJucyBhIGJvb2xlYW4gcmVzdWx0XG4gKi9cbmZ1bmN0aW9uIGFzc2VydCggZm4gKSB7XG5cdHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZmllbGRzZXRcIiApO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKCBlICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblxuXHRcdC8vIFJlbW92ZSBmcm9tIGl0cyBwYXJlbnQgYnkgZGVmYXVsdFxuXHRcdGlmICggZWwucGFyZW50Tm9kZSApIHtcblx0XHRcdGVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIGVsICk7XG5cdFx0fVxuXG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KCBcInxcIiApLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyWyBpIF0gXSA9IGhhbmRsZXI7XG5cdH1cbn1cblxuLyoqXG4gKiBDaGVja3MgZG9jdW1lbnQgb3JkZXIgb2YgdHdvIHNpYmxpbmdzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGFcbiAqIEBwYXJhbSB7RWxlbWVudH0gYlxuICogQHJldHVybnMge051bWJlcn0gUmV0dXJucyBsZXNzIHRoYW4gMCBpZiBhIHByZWNlZGVzIGIsIGdyZWF0ZXIgdGhhbiAwIGlmIGEgZm9sbG93cyBiXG4gKi9cbmZ1bmN0aW9uIHNpYmxpbmdDaGVjayggYSwgYiApIHtcblx0dmFyIGN1ciA9IGIgJiYgYSxcblx0XHRkaWZmID0gY3VyICYmIGEubm9kZVR5cGUgPT09IDEgJiYgYi5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0YS5zb3VyY2VJbmRleCAtIGIuc291cmNlSW5kZXg7XG5cblx0Ly8gVXNlIElFIHNvdXJjZUluZGV4IGlmIGF2YWlsYWJsZSBvbiBib3RoIG5vZGVzXG5cdGlmICggZGlmZiApIHtcblx0XHRyZXR1cm4gZGlmZjtcblx0fVxuXG5cdC8vIENoZWNrIGlmIGIgZm9sbG93cyBhXG5cdGlmICggY3VyICkge1xuXHRcdHdoaWxlICggKCBjdXIgPSBjdXIubmV4dFNpYmxpbmcgKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAoIG5hbWUgPT09IFwiaW5wdXRcIiB8fCBuYW1lID09PSBcImJ1dHRvblwiICkgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0aW5EaXNhYmxlZEZpZWxkc2V0KCBlbGVtICkgPT09IGRpc2FibGVkO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cblx0XHQvLyBUcnkgdG8gd2lubm93IG91dCBlbGVtZW50cyB0aGF0IGNhbid0IGJlIGRpc2FibGVkIGJlZm9yZSB0cnVzdGluZyB0aGUgZGlzYWJsZWQgcHJvcGVydHkuXG5cdFx0Ly8gU29tZSB2aWN0aW1zIGdldCBjYXVnaHQgaW4gb3VyIG5ldCAobGFiZWwsIGxlZ2VuZCwgbWVudSwgdHJhY2spLCBidXQgaXQgc2hvdWxkbid0XG5cdFx0Ly8gZXZlbiBleGlzdCBvbiB0aGVtLCBsZXQgYWxvbmUgaGF2ZSBhIGJvb2xlYW4gdmFsdWUuXG5cdFx0fSBlbHNlIGlmICggXCJsYWJlbFwiIGluIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVtYWluaW5nIGVsZW1lbnRzIGFyZSBuZWl0aGVyIDplbmFibGVkIG5vciA6ZGlzYWJsZWRcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBwb3NpdGlvbmFsc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZm4gKSB7XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoIGogPSBtYXRjaEluZGV4ZXNbIGkgXSApIF0gKSB7XG5cdFx0XHRcdFx0c2VlZFsgaiBdID0gISggbWF0Y2hlc1sgaiBdID0gc2VlZFsgaiBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0gKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBuYW1lc3BhY2UgPSBlbGVtICYmIGVsZW0ubmFtZXNwYWNlVVJJLFxuXHRcdGRvY0VsZW0gPSBlbGVtICYmICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD04XG5cdC8vIEFzc3VtZSBIVE1MIHdoZW4gZG9jdW1lbnRFbGVtZW50IGRvZXNuJ3QgeWV0IGV4aXN0LCBzdWNoIGFzIGluc2lkZSBsb2FkaW5nIGlmcmFtZXNcblx0Ly8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzQ4MzNcblx0cmV0dXJuICFyaHRtbC50ZXN0KCBuYW1lc3BhY2UgfHwgZG9jRWxlbSAmJiBkb2NFbGVtLm5vZGVOYW1lIHx8IFwiSFRNTFwiICk7XG59O1xuXG4vKipcbiAqIFNldHMgZG9jdW1lbnQtcmVsYXRlZCB2YXJpYWJsZXMgb25jZSBiYXNlZCBvbiB0aGUgY3VycmVudCBkb2N1bWVudFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdH0gW2RvY10gQW4gZWxlbWVudCBvciBkb2N1bWVudCBvYmplY3QgdG8gdXNlIHRvIHNldCB0aGUgZG9jdW1lbnRcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqL1xuc2V0RG9jdW1lbnQgPSBTaXp6bGUuc2V0RG9jdW1lbnQgPSBmdW5jdGlvbiggbm9kZSApIHtcblx0dmFyIGhhc0NvbXBhcmUsIHN1YldpbmRvdyxcblx0XHRkb2MgPSBub2RlID8gbm9kZS5vd25lckRvY3VtZW50IHx8IG5vZGUgOiBwcmVmZXJyZWREb2M7XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGlmIGRvYyBpcyBpbnZhbGlkIG9yIGFscmVhZHkgc2VsZWN0ZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBkb2MgPT0gZG9jdW1lbnQgfHwgZG9jLm5vZGVUeXBlICE9PSA5IHx8ICFkb2MuZG9jdW1lbnRFbGVtZW50ICkge1xuXHRcdHJldHVybiBkb2N1bWVudDtcblx0fVxuXG5cdC8vIFVwZGF0ZSBnbG9iYWwgdmFyaWFibGVzXG5cdGRvY3VtZW50ID0gZG9jO1xuXHRkb2NFbGVtID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXHRkb2N1bWVudElzSFRNTCA9ICFpc1hNTCggZG9jdW1lbnQgKTtcblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDEyIC0gMTgrXG5cdC8vIEFjY2Vzc2luZyBpZnJhbWUgZG9jdW1lbnRzIGFmdGVyIHVubG9hZCB0aHJvd3MgXCJwZXJtaXNzaW9uIGRlbmllZFwiIGVycm9ycyAoalF1ZXJ5ICMxMzkzNilcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCBwcmVmZXJyZWREb2MgIT0gZG9jdW1lbnQgJiZcblx0XHQoIHN1YldpbmRvdyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3ICkgJiYgc3ViV2luZG93LnRvcCAhPT0gc3ViV2luZG93ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgMTEsIEVkZ2Vcblx0XHRpZiAoIHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0c3ViV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwidW5sb2FkXCIsIHVubG9hZEhhbmRsZXIsIGZhbHNlICk7XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTAgb25seVxuXHRcdH0gZWxzZSBpZiAoIHN1YldpbmRvdy5hdHRhY2hFdmVudCApIHtcblx0XHRcdHN1YldpbmRvdy5hdHRhY2hFdmVudCggXCJvbnVubG9hZFwiLCB1bmxvYWRIYW5kbGVyICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDExKywgRWRnZSAxMiAtIDE4KywgQ2hyb21lIDw9MTYgLSAyNSBvbmx5LCBGaXJlZm94IDw9My42IC0gMzEgb25seSxcblx0Ly8gU2FmYXJpIDQgLSA1IG9ubHksIE9wZXJhIDw9MTEuNiAtIDEyLnggb25seVxuXHQvLyBJRS9FZGdlICYgb2xkZXIgYnJvd3NlcnMgZG9uJ3Qgc3VwcG9ydCB0aGUgOnNjb3BlIHBzZXVkby1jbGFzcy5cblx0Ly8gU3VwcG9ydDogU2FmYXJpIDYuMCBvbmx5XG5cdC8vIFNhZmFyaSA2LjAgc3VwcG9ydHMgOnNjb3BlIGJ1dCBpdCdzIGFuIGFsaWFzIG9mIDpyb290IHRoZXJlLlxuXHRzdXBwb3J0LnNjb3BlID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cdFx0cmV0dXJuIHR5cGVvZiBlbC5xdWVyeVNlbGVjdG9yQWxsICE9PSBcInVuZGVmaW5lZFwiICYmXG5cdFx0XHQhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6c2NvcGUgZmllbGRzZXQgZGl2XCIgKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvKiBBdHRyaWJ1dGVzXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBTdXBwb3J0OiBJRTw4XG5cdC8vIFZlcmlmeSB0aGF0IGdldEF0dHJpYnV0ZSByZWFsbHkgcmV0dXJucyBhdHRyaWJ1dGVzIGFuZCBub3QgcHJvcGVydGllc1xuXHQvLyAoZXhjZXB0aW5nIElFOCBib29sZWFucylcblx0c3VwcG9ydC5hdHRyaWJ1dGVzID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZWwuY2xhc3NOYW1lID0gXCJpXCI7XG5cdFx0cmV0dXJuICFlbC5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NOYW1lXCIgKTtcblx0fSApO1xuXG5cdC8qIGdldEVsZW1lbnQocylCeSpcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRzQnlUYWdOYW1lKFwiKlwiKSByZXR1cm5zIG9ubHkgZWxlbWVudHNcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA9IGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KCBcIlwiICkgKTtcblx0XHRyZXR1cm4gIWVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCBcIipcIiApLmxlbmd0aDtcblx0fSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDlcblx0c3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lID0gcm5hdGl2ZS50ZXN0KCBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICk7XG5cblx0Ly8gU3VwcG9ydDogSUU8MTBcblx0Ly8gQ2hlY2sgaWYgZ2V0RWxlbWVudEJ5SWQgcmV0dXJucyBlbGVtZW50cyBieSBuYW1lXG5cdC8vIFRoZSBicm9rZW4gZ2V0RWxlbWVudEJ5SWQgbWV0aG9kcyBkb24ndCBwaWNrIHVwIHByb2dyYW1tYXRpY2FsbHktc2V0IG5hbWVzLFxuXHQvLyBzbyB1c2UgYSByb3VuZGFib3V0IGdldEVsZW1lbnRzQnlOYW1lIHRlc3Rcblx0c3VwcG9ydC5nZXRCeUlkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0gKTtcblxuXHQvLyBJRCBmaWx0ZXIgYW5kIGZpbmRcblx0aWYgKCBzdXBwb3J0LmdldEJ5SWQgKSB7XG5cdFx0RXhwci5maWx0ZXJbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJpZFwiICkgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0XHRFeHByLmZpbmRbIFwiSURcIiBdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXHRcdFx0XHRyZXR1cm4gZWxlbSA/IFsgZWxlbSBdIDogW107XG5cdFx0XHR9XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRFeHByLmZpbHRlclsgXCJJRFwiIF0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggXCJpZFwiICk7XG5cdFx0XHRcdHJldHVybiBub2RlICYmIG5vZGUudmFsdWUgPT09IGF0dHJJZDtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDYgLSA3IG9ubHlcblx0XHQvLyBnZXRFbGVtZW50QnlJZCBpcyBub3QgcmVsaWFibGUgYXMgYSBmaW5kIHNob3J0Y3V0XG5cdFx0RXhwci5maW5kWyBcIklEXCIgXSA9IGZ1bmN0aW9uKCBpZCwgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRcdHZhciBub2RlLCBpLCBlbGVtcyxcblx0XHRcdFx0XHRlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggaWQgKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHQvLyBWZXJpZnkgdGhlIGlkIGF0dHJpYnV0ZVxuXHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kWyBcIlRBR1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lID9cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBEb2N1bWVudEZyYWdtZW50IG5vZGVzIGRvbid0IGhhdmUgZ0VCVE5cblx0XHRcdH0gZWxzZSBpZiAoIHN1cHBvcnQucXNhICkge1xuXHRcdFx0XHRyZXR1cm4gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgKTtcblx0XHRcdH1cblx0XHR9IDpcblxuXHRcdGZ1bmN0aW9uKCB0YWcsIGNvbnRleHQgKSB7XG5cdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0dG1wID0gW10sXG5cdFx0XHRcdGkgPSAwLFxuXG5cdFx0XHRcdC8vIEJ5IGhhcHB5IGNvaW5jaWRlbmNlLCBhIChicm9rZW4pIGdFQlROIGFwcGVhcnMgb24gRG9jdW1lbnRGcmFnbWVudCBub2RlcyB0b29cblx0XHRcdFx0cmVzdWx0cyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyApO1xuXG5cdFx0XHQvLyBGaWx0ZXIgb3V0IHBvc3NpYmxlIGNvbW1lbnRzXG5cdFx0XHRpZiAoIHRhZyA9PT0gXCIqXCIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHR0bXAucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB0bXA7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9O1xuXG5cdC8vIENsYXNzXG5cdEV4cHIuZmluZFsgXCJDTEFTU1wiIF0gPSBzdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgJiYgZnVuY3Rpb24oIGNsYXNzTmFtZSwgY29udGV4dCApIHtcblx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgZG9jdW1lbnRJc0hUTUwgKSB7XG5cdFx0XHRyZXR1cm4gY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBjbGFzc05hbWUgKTtcblx0XHR9XG5cdH07XG5cblx0LyogUVNBL21hdGNoZXNTZWxlY3RvclxuXHQtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cblx0Ly8gUVNBIGFuZCBtYXRjaGVzU2VsZWN0b3Igc3VwcG9ydFxuXG5cdC8vIG1hdGNoZXNTZWxlY3Rvcig6YWN0aXZlKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoSUU5L09wZXJhIDExLjUpXG5cdHJidWdneU1hdGNoZXMgPSBbXTtcblxuXHQvLyBxU2EoOmZvY3VzKSByZXBvcnRzIGZhbHNlIHdoZW4gdHJ1ZSAoQ2hyb21lIDIxKVxuXHQvLyBXZSBhbGxvdyB0aGlzIGJlY2F1c2Ugb2YgYSBidWcgaW4gSUU4LzkgdGhhdCB0aHJvd3MgYW4gZXJyb3Jcblx0Ly8gd2hlbmV2ZXIgYGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRgIGlzIGFjY2Vzc2VkIG9uIGFuIGlmcmFtZVxuXHQvLyBTbywgd2UgYWxsb3cgOmZvY3VzIHRvIHBhc3MgdGhyb3VnaCBRU0EgYWxsIHRoZSB0aW1lIHRvIGF2b2lkIHRoZSBJRSBlcnJvclxuXHQvLyBTZWUgaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzc4XG5cdHJidWdneVFTQSA9IFtdO1xuXG5cdGlmICggKCBzdXBwb3J0LnFzYSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCApICkgKSB7XG5cblx0XHQvLyBCdWlsZCBRU0EgcmVnZXhcblx0XHQvLyBSZWdleCBzdHJhdGVneSBhZG9wdGVkIGZyb20gRGllZ28gUGVyaW5pXG5cdFx0YXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0XHRcdHZhciBpbnB1dDtcblxuXHRcdFx0Ly8gU2VsZWN0IGlzIHNldCB0byBlbXB0eSBzdHJpbmcgb24gcHVycG9zZVxuXHRcdFx0Ly8gVGhpcyBpcyB0byB0ZXN0IElFJ3MgdHJlYXRtZW50IG9mIG5vdCBleHBsaWNpdGx5XG5cdFx0XHQvLyBzZXR0aW5nIGEgYm9vbGVhbiBjb250ZW50IGF0dHJpYnV0ZSxcblx0XHRcdC8vIHNpbmNlIGl0cyBwcmVzZW5jZSBzaG91bGQgYmUgZW5vdWdoXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTIzNTlcblx0XHRcdGRvY0VsZW0uYXBwZW5kQ2hpbGQoIGVsICkuaW5uZXJIVE1MID0gXCI8YSBpZD0nXCIgKyBleHBhbmRvICsgXCInPjwvYT5cIiArXG5cdFx0XHRcdFwiPHNlbGVjdCBpZD0nXCIgKyBleHBhbmRvICsgXCItXFxyXFxcXCcgbXNhbGxvd2NhcHR1cmU9Jyc+XCIgK1xuXHRcdFx0XHRcIjxvcHRpb24gc2VsZWN0ZWQ9Jyc+PC9vcHRpb24+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOCwgT3BlcmEgMTEtMTIuMTZcblx0XHRcdC8vIE5vdGhpbmcgc2hvdWxkIGJlIHNlbGVjdGVkIHdoZW4gZW1wdHkgc3RyaW5ncyBmb2xsb3cgXj0gb3IgJD0gb3IgKj1cblx0XHRcdC8vIFRoZSB0ZXN0IGF0dHJpYnV0ZSBtdXN0IGJlIHVua25vd24gaW4gT3BlcmEgYnV0IFwic2FmZVwiIGZvciBXaW5SVFxuXHRcdFx0Ly8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9oaDQ2NTM4OC5hc3B4I2F0dHJpYnV0ZV9zZWN0aW9uXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW21zYWxsb3djYXB0dXJlXj0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltzZWxlY3RlZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIiooPzp2YWx1ZXxcIiArIGJvb2xlYW5zICsgXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lPDI5LCBBbmRyb2lkPDQuNCwgU2FmYXJpPDcuMCssIGlPUzw3LjArLCBQaGFudG9tSlM8MS45LjgrXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIltpZH49XCIgKyBleHBhbmRvICsgXCItXVwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJ+PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNSAtIDE4K1xuXHRcdFx0Ly8gSUUgMTEvRWRnZSBkb24ndCBmaW5kIGVsZW1lbnRzIG9uIGEgYFtuYW1lPScnXWAgcXVlcnkgaW4gc29tZSBjYXNlcy5cblx0XHRcdC8vIEFkZGluZyBhIHRlbXBvcmFyeSBhdHRyaWJ1dGUgdG8gdGhlIGRvY3VtZW50IGJlZm9yZSB0aGUgc2VsZWN0aW9uIHdvcmtzXG5cdFx0XHQvLyBhcm91bmQgdGhlIGlzc3VlLlxuXHRcdFx0Ly8gSW50ZXJlc3RpbmdseSwgSUUgMTAgJiBvbGRlciBkb24ndCBzZWVtIHRvIGhhdmUgdGhlIGlzc3VlLlxuXHRcdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbbmFtZT0nJ11cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiXFxcXFtcIiArIHdoaXRlc3BhY2UgKyBcIipuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqPVwiICtcblx0XHRcdFx0XHR3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCI6Y2hlY2tlZFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6Y2hlY2tlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4KywgaU9TIDgrXG5cdFx0XHQvLyBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTM2ODUxXG5cdFx0XHQvLyBJbi1wYWdlIGBzZWxlY3RvciNpZCBzaWJsaW5nLWNvbWJpbmF0b3Igc2VsZWN0b3JgIGZhaWxzXG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKCBcImEjXCIgKyBleHBhbmRvICsgXCIrKlwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCIuIy4rWyt+XVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD0zLjYgLSA1IG9ubHlcblx0XHRcdC8vIE9sZCBGaXJlZm94IGRvZXNuJ3QgdGhyb3cgb24gYSBiYWRseS1lc2NhcGVkIGlkZW50aWZpZXIuXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKCBcIlxcXFxcXGZcIiApO1xuXHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiW1xcXFxyXFxcXG5cXFxcZl1cIiApO1xuXHRcdH0gKTtcblxuXHRcdGFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0XHRcdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwiaGlkZGVuXCIgKTtcblx0XHRcdGVsLmFwcGVuZENoaWxkKCBpbnB1dCApLnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwiRFwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOFxuXHRcdFx0Ly8gRW5mb3JjZSBjYXNlLXNlbnNpdGl2aXR5IG9mIG5hbWUgYXR0cmlidXRlXG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiW25hbWU9ZF1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwibmFtZVwiICsgd2hpdGVzcGFjZSArIFwiKlsqXiR8IX5dPz1cIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGRiAzLjUgLSA6ZW5hYmxlZC86ZGlzYWJsZWQgYW5kIGhpZGRlbiBlbGVtZW50cyAoaGlkZGVuIGVsZW1lbnRzIGFyZSBzdGlsbCBlbmFibGVkKVxuXHRcdFx0Ly8gSUU4IHRocm93cyBlcnJvciBoZXJlIGFuZCB3aWxsIG5vdCBzZWUgbGF0ZXIgdGVzdHNcblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbCggXCI6ZW5hYmxlZFwiICkubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiOmRpc2FibGVkXCIgKS5sZW5ndGggIT09IDIgKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIjplbmFibGVkXCIsIFwiOmRpc2FibGVkXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogT3BlcmEgMTAgLSAxMSBvbmx5XG5cdFx0XHQvLyBPcGVyYSAxMC0xMSBkb2VzIG5vdCB0aHJvdyBvbiBwb3N0LWNvbW1hIGludmFsaWQgcHNldWRvc1xuXHRcdFx0ZWwucXVlcnlTZWxlY3RvckFsbCggXCIqLDp4XCIgKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKCBcIiwuKjpcIiApO1xuXHRcdH0gKTtcblx0fVxuXG5cdGlmICggKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciA9IHJuYXRpdmUudGVzdCggKCBtYXRjaGVzID0gZG9jRWxlbS5tYXRjaGVzIHx8XG5cdFx0ZG9jRWxlbS53ZWJraXRNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1vek1hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ub01hdGNoZXNTZWxlY3RvciB8fFxuXHRcdGRvY0VsZW0ubXNNYXRjaGVzU2VsZWN0b3IgKSApICkgKSB7XG5cblx0XHRhc3NlcnQoIGZ1bmN0aW9uKCBlbCApIHtcblxuXHRcdFx0Ly8gQ2hlY2sgdG8gc2VlIGlmIGl0J3MgcG9zc2libGUgdG8gZG8gbWF0Y2hlc1NlbGVjdG9yXG5cdFx0XHQvLyBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlIChJRSA5KVxuXHRcdFx0c3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCA9IG1hdGNoZXMuY2FsbCggZWwsIFwiKlwiICk7XG5cblx0XHRcdC8vIFRoaXMgc2hvdWxkIGZhaWwgd2l0aCBhbiBleGNlcHRpb25cblx0XHRcdC8vIEdlY2tvIGRvZXMgbm90IGVycm9yLCByZXR1cm5zIGZhbHNlIGluc3RlYWRcblx0XHRcdG1hdGNoZXMuY2FsbCggZWwsIFwiW3MhPScnXTp4XCIgKTtcblx0XHRcdHJidWdneU1hdGNoZXMucHVzaCggXCIhPVwiLCBwc2V1ZG9zICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmJ1Z2d5UVNBID0gcmJ1Z2d5UVNBLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lRU0Euam9pbiggXCJ8XCIgKSApO1xuXHRyYnVnZ3lNYXRjaGVzID0gcmJ1Z2d5TWF0Y2hlcy5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5TWF0Y2hlcy5qb2luKCBcInxcIiApICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpICk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cdFx0XHRpZiAoIGIgKSB7XG5cdFx0XHRcdHdoaWxlICggKCBiID0gYi5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0Y29tcGFyZSA9ICggYS5vd25lckRvY3VtZW50IHx8IGEgKSA9PSAoIGIub3duZXJEb2N1bWVudCB8fCBiICkgP1xuXHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYiApIDpcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIHdlIGtub3cgdGhleSBhcmUgZGlzY29ubmVjdGVkXG5cdFx0XHQxO1xuXG5cdFx0Ly8gRGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0aWYgKCBjb21wYXJlICYgMSB8fFxuXHRcdFx0KCAhc3VwcG9ydC5zb3J0RGV0YWNoZWQgJiYgYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggYSApID09PSBjb21wYXJlICkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdGlmICggYSA9PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT0gcHJlZmVycmVkRG9jICYmXG5cdFx0XHRcdGNvbnRhaW5zKCBwcmVmZXJyZWREb2MsIGEgKSApIHtcblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSssIEVkZ2UgMTcgLSAxOCtcblx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuXHRcdFx0aWYgKCBiID09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PSBwcmVmZXJyZWREb2MgJiZcblx0XHRcdFx0Y29udGFpbnMoIHByZWZlcnJlZERvYywgYiApICkge1xuXHRcdFx0XHRyZXR1cm4gMTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFpbnRhaW4gb3JpZ2luYWwgb3JkZXJcblx0XHRcdHJldHVybiBzb3J0SW5wdXQgP1xuXHRcdFx0XHQoIGluZGV4T2YoIHNvcnRJbnB1dCwgYSApIC0gaW5kZXhPZiggc29ydElucHV0LCBiICkgKSA6XG5cdFx0XHRcdDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbXBhcmUgJiA0ID8gLTEgOiAxO1xuXHR9IDpcblx0ZnVuY3Rpb24oIGEsIGIgKSB7XG5cblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0cmV0dXJuIGEgPT0gZG9jdW1lbnQgPyAtMSA6XG5cdFx0XHRcdGIgPT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGN1ci5wYXJlbnROb2RlICkgKSB7XG5cdFx0XHRhcC51bnNoaWZ0KCBjdXIgKTtcblx0XHR9XG5cdFx0Y3VyID0gYjtcblx0XHR3aGlsZSAoICggY3VyID0gY3VyLnBhcmVudE5vZGUgKSApIHtcblx0XHRcdGJwLnVuc2hpZnQoIGN1ciApO1xuXHRcdH1cblxuXHRcdC8vIFdhbGsgZG93biB0aGUgdHJlZSBsb29raW5nIGZvciBhIGRpc2NyZXBhbmN5XG5cdFx0d2hpbGUgKCBhcFsgaSBdID09PSBicFsgaSBdICkge1xuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHJldHVybiBpID9cblxuXHRcdFx0Ly8gRG8gYSBzaWJsaW5nIGNoZWNrIGlmIHRoZSBub2RlcyBoYXZlIGEgY29tbW9uIGFuY2VzdG9yXG5cdFx0XHRzaWJsaW5nQ2hlY2soIGFwWyBpIF0sIGJwWyBpIF0gKSA6XG5cblx0XHRcdC8vIE90aGVyd2lzZSBub2RlcyBpbiBvdXIgZG9jdW1lbnQgc29ydCBmaXJzdFxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdC8qIGVzbGludC1kaXNhYmxlIGVxZXFlcSAqL1xuXHRcdFx0YXBbIGkgXSA9PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFsgaSBdID09IHByZWZlcnJlZERvYyA/IDEgOlxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBlcWVxZXEgKi9cblx0XHRcdDA7XG5cdH07XG5cblx0cmV0dXJuIGRvY3VtZW50O1xufTtcblxuU2l6emxlLm1hdGNoZXMgPSBmdW5jdGlvbiggZXhwciwgZWxlbWVudHMgKSB7XG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIG51bGwsIG51bGwsIGVsZW1lbnRzICk7XG59O1xuXG5TaXp6bGUubWF0Y2hlc1NlbGVjdG9yID0gZnVuY3Rpb24oIGVsZW0sIGV4cHIgKSB7XG5cdHNldERvY3VtZW50KCBlbGVtICk7XG5cblx0aWYgKCBzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciAmJiBkb2N1bWVudElzSFRNTCAmJlxuXHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBleHByICsgXCIgXCIgXSAmJlxuXHRcdCggIXJidWdneU1hdGNoZXMgfHwgIXJidWdneU1hdGNoZXMudGVzdCggZXhwciApICkgJiZcblx0XHQoICFyYnVnZ3lRU0EgICAgIHx8ICFyYnVnZ3lRU0EudGVzdCggZXhwciApICkgKSB7XG5cblx0XHR0cnkge1xuXHRcdFx0dmFyIHJldCA9IG1hdGNoZXMuY2FsbCggZWxlbSwgZXhwciApO1xuXG5cdFx0XHQvLyBJRSA5J3MgbWF0Y2hlc1NlbGVjdG9yIHJldHVybnMgZmFsc2Ugb24gZGlzY29ubmVjdGVkIG5vZGVzXG5cdFx0XHRpZiAoIHJldCB8fCBzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoIHx8XG5cblx0XHRcdFx0Ly8gQXMgd2VsbCwgZGlzY29ubmVjdGVkIG5vZGVzIGFyZSBzYWlkIHRvIGJlIGluIGEgZG9jdW1lbnRcblx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0bm9ubmF0aXZlU2VsZWN0b3JDYWNoZSggZXhwciwgdHJ1ZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblxuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0aWYgKCAoIGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0ICkgIT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHQvLyBJRS9FZGdlIHNvbWV0aW1lcyB0aHJvdyBhIFwiUGVybWlzc2lvbiBkZW5pZWRcIiBlcnJvciB3aGVuIHN0cmljdC1jb21wYXJpbmdcblx0Ly8gdHdvIGRvY3VtZW50czsgc2hhbGxvdyBjb21wYXJpc29ucyB3b3JrLlxuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHR2YXIgZm4gPSBFeHByLmF0dHJIYW5kbGVbIG5hbWUudG9Mb3dlckNhc2UoKSBdLFxuXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCggdmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkgKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0bnVsbDtcbn07XG5cblNpenpsZS5lc2NhcGUgPSBmdW5jdGlvbiggc2VsICkge1xuXHRyZXR1cm4gKCBzZWwgKyBcIlwiICkucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKCBlbGVtID0gcmVzdWx0c1sgaSsrIF0gKSApIHtcblx0XHRcdGlmICggZWxlbSA9PT0gcmVzdWx0c1sgaSBdICkge1xuXHRcdFx0XHRqID0gZHVwbGljYXRlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0cmVzdWx0cy5zcGxpY2UoIGR1cGxpY2F0ZXNbIGogXSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENsZWFyIGlucHV0IGFmdGVyIHNvcnRpbmcgdG8gcmVsZWFzZSBvYmplY3RzXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L3NpenpsZS9wdWxsLzIyNVxuXHRzb3J0SW5wdXQgPSBudWxsO1xuXG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciByZXRyaWV2aW5nIHRoZSB0ZXh0IHZhbHVlIG9mIGFuIGFycmF5IG9mIERPTSBub2Rlc1xuICogQHBhcmFtIHtBcnJheXxFbGVtZW50fSBlbGVtXG4gKi9cbmdldFRleHQgPSBTaXp6bGUuZ2V0VGV4dCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbm9kZSxcblx0XHRyZXQgPSBcIlwiLFxuXHRcdGkgPSAwLFxuXHRcdG5vZGVUeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoICFub2RlVHlwZSApIHtcblxuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAoIG5vZGUgPSBlbGVtWyBpKysgXSApICkge1xuXG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblxuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBUcmF2ZXJzZSBpdHMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRyZXQgKz0gZ2V0VGV4dCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDMgfHwgbm9kZVR5cGUgPT09IDQgKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVZhbHVlO1xuXHR9XG5cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsgMSBdID0gbWF0Y2hbIDEgXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXG5cdFx0XHQvLyBNb3ZlIHRoZSBnaXZlbiB2YWx1ZSB0byBtYXRjaFszXSB3aGV0aGVyIHF1b3RlZCBvciB1bnF1b3RlZFxuXHRcdFx0bWF0Y2hbIDMgXSA9ICggbWF0Y2hbIDMgXSB8fCBtYXRjaFsgNCBdIHx8XG5cdFx0XHRcdG1hdGNoWyA1IF0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDIgXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFsgMyBdID0gXCIgXCIgKyBtYXRjaFsgMyBdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblxuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWyAxIF0gPSBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbIDEgXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXG5cdFx0XHRcdC8vIG50aC0qIHJlcXVpcmVzIGFyZ3VtZW50XG5cdFx0XHRcdGlmICggIW1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFsgMCBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFsgNCBdID0gKyggbWF0Y2hbIDQgXSA/XG5cdFx0XHRcdFx0bWF0Y2hbIDUgXSArICggbWF0Y2hbIDYgXSB8fCAxICkgOlxuXHRcdFx0XHRcdDIgKiAoIG1hdGNoWyAzIF0gPT09IFwiZXZlblwiIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFsgNSBdID0gKyggKCBtYXRjaFsgNyBdICsgbWF0Y2hbIDggXSApIHx8IG1hdGNoWyAzIF0gPT09IFwib2RkXCIgKTtcblxuXHRcdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF0Y2g7XG5cdFx0fSxcblxuXHRcdFwiUFNFVURPXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdHZhciBleGNlc3MsXG5cdFx0XHRcdHVucXVvdGVkID0gIW1hdGNoWyA2IF0gJiYgbWF0Y2hbIDIgXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbIFwiQ0hJTERcIiBdLnRlc3QoIG1hdGNoWyAwIF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRcdG1hdGNoWyAyIF0gPSBtYXRjaFsgNCBdIHx8IG1hdGNoWyA1IF0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXG5cdFx0XHRcdC8vIEdldCBleGNlc3MgZnJvbSB0b2tlbml6ZSAocmVjdXJzaXZlbHkpXG5cdFx0XHRcdCggZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkgKSAmJlxuXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoIGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCApICkge1xuXG5cdFx0XHRcdC8vIGV4Y2VzcyBpcyBhIG5lZ2F0aXZlIGluZGV4XG5cdFx0XHRcdG1hdGNoWyAwIF0gPSBtYXRjaFsgMCBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbIDIgXSA9IHVucXVvdGVkLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgY2FwdHVyZXMgbmVlZGVkIGJ5IHRoZSBwc2V1ZG8gZmlsdGVyIG1ldGhvZCAodHlwZSBhbmQgYXJndW1lbnQpXG5cdFx0XHRyZXR1cm4gbWF0Y2guc2xpY2UoIDAsIDMgKTtcblx0XHR9XG5cdH0sXG5cblx0ZmlsdGVyOiB7XG5cblx0XHRcIlRBR1wiOiBmdW5jdGlvbiggbm9kZU5hbWVTZWxlY3RvciApIHtcblx0XHRcdHZhciBub2RlTmFtZSA9IG5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5vZGVOYW1lU2VsZWN0b3IgPT09IFwiKlwiID9cblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdCggcGF0dGVybiA9IG5ldyBSZWdFeHAoIFwiKF58XCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFx0XHRcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSApICYmIGNsYXNzQ2FjaGUoXG5cdFx0XHRcdFx0XHRjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fFxuXHRcdFx0XHRcdFx0XHRcdHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIiApIHx8XG5cdFx0XHRcdFx0XHRcdFx0XCJcIlxuXHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSxcblxuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbmFtZSwgb3BlcmF0b3IsIGNoZWNrICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgcmVzdWx0ID0gU2l6emxlLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdFx0XHRpZiAoIHJlc3VsdCA9PSBudWxsICkge1xuXHRcdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCIhPVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICggIW9wZXJhdG9yICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVzdWx0ICs9IFwiXCI7XG5cblx0XHRcdFx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG1heC1sZW4gKi9cblxuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgX2FyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIF9jb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0dmFyIGNhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSwgbm9kZSwgbm9kZUluZGV4LCBzdGFydCxcblx0XHRcdFx0XHRcdGRpciA9IHNpbXBsZSAhPT0gZm9yd2FyZCA/IFwibmV4dFNpYmxpbmdcIiA6IFwicHJldmlvdXNTaWJsaW5nXCIsXG5cdFx0XHRcdFx0XHRwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGUsXG5cdFx0XHRcdFx0XHRuYW1lID0gb2ZUeXBlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRcdFx0XHRcdHVzZUNhY2hlID0gIXhtbCAmJiAhb2ZUeXBlLFxuXHRcdFx0XHRcdFx0ZGlmZiA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdC8vIDooZmlyc3R8bGFzdHxvbmx5KS0oY2hpbGR8b2YtdHlwZSlcblx0XHRcdFx0XHRcdGlmICggc2ltcGxlICkge1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoIGRpciApIHtcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbm9kZSA9IG5vZGVbIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKCBub2RlWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gRmFsbGJhY2sgdG8gc2Vla2luZyBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHQoIGRpZmYgPSBub2RlSW5kZXggPSAwICkgfHwgc3RhcnQucG9wKCkgKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFdoZW4gZm91bmQsIGNhY2hlIGluZGV4ZXMgb24gYHBhcmVudGAgYW5kIGJyZWFrXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBub2RlLm5vZGVUeXBlID09PSAxICYmICsrZGlmZiAmJiBub2RlID09PSBlbGVtICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGVbIHR5cGUgXSA9IFsgZGlycnVucywgbm9kZUluZGV4LCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8ICggbm9kZVsgZXhwYW5kbyBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKCBub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KCBkaWZmID0gbm9kZUluZGV4ID0gMCApIHx8IHN0YXJ0LnBvcCgpICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQoIG5vZGVbIGV4cGFuZG8gXSA9IHt9ICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblxuXHRcdFx0Ly8gcHNldWRvLWNsYXNzIG5hbWVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlXG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI3BzZXVkby1jbGFzc2VzXG5cdFx0XHQvLyBQcmlvcml0aXplIGJ5IGNhc2Ugc2Vuc2l0aXZpdHkgaW4gY2FzZSBjdXN0b20gcHNldWRvcyBhcmUgYWRkZWQgd2l0aCB1cHBlcmNhc2UgbGV0dGVyc1xuXHRcdFx0Ly8gUmVtZW1iZXIgdGhhdCBzZXRGaWx0ZXJzIGluaGVyaXRzIGZyb20gcHNldWRvc1xuXHRcdFx0dmFyIGFyZ3MsXG5cdFx0XHRcdGZuID0gRXhwci5wc2V1ZG9zWyBwc2V1ZG8gXSB8fCBFeHByLnNldEZpbHRlcnNbIHBzZXVkby50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIFwidW5zdXBwb3J0ZWQgcHNldWRvOiBcIiArIHBzZXVkbyApO1xuXG5cdFx0XHQvLyBUaGUgdXNlciBtYXkgdXNlIGNyZWF0ZVBzZXVkbyB0byBpbmRpY2F0ZSB0aGF0XG5cdFx0XHQvLyBhcmd1bWVudHMgYXJlIG5lZWRlZCB0byBjcmVhdGUgdGhlIGZpbHRlciBmdW5jdGlvblxuXHRcdFx0Ly8ganVzdCBhcyBTaXp6bGUgZG9lc1xuXHRcdFx0aWYgKCBmblsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRyZXR1cm4gZm4oIGFyZ3VtZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEJ1dCBtYWludGFpbiBzdXBwb3J0IGZvciBvbGQgc2lnbmF0dXJlc1xuXHRcdFx0aWYgKCBmbi5sZW5ndGggPiAxICkge1xuXHRcdFx0XHRhcmdzID0gWyBwc2V1ZG8sIHBzZXVkbywgXCJcIiwgYXJndW1lbnQgXTtcblx0XHRcdFx0cmV0dXJuIEV4cHIuc2V0RmlsdGVycy5oYXNPd25Qcm9wZXJ0eSggcHNldWRvLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRcdFx0bWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbIGkgXSApO1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpZHggXSA9ICEoIG1hdGNoZXNbIGlkeCBdID0gbWF0Y2hlZFsgaSBdICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmbiggZWxlbSwgMCwgYXJncyApO1xuXHRcdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBmbjtcblx0XHR9XG5cdH0sXG5cblx0cHNldWRvczoge1xuXG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzLCBfY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSB1bm1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkWyBpIF0gPSAhKCBtYXRjaGVzWyBpIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgX2NvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFsgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRtYXRjaGVyKCBpbnB1dCwgbnVsbCwgeG1sLCByZXN1bHRzICk7XG5cblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WyAwIF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0cmV0dXJuIFNpenpsZSggc2VsZWN0b3IsIGVsZW0gKS5sZW5ndGggPiAwO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9ICksXG5cblx0XHQvLyBcIldoZXRoZXIgYW4gZWxlbWVudCBpcyByZXByZXNlbnRlZCBieSBhIDpsYW5nKCkgc2VsZWN0b3Jcblx0XHQvLyBpcyBiYXNlZCBzb2xlbHkgb24gdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZVxuXHRcdC8vIGJlaW5nIGVxdWFsIHRvIHRoZSBpZGVudGlmaWVyIEMsXG5cdFx0Ly8gb3IgYmVnaW5uaW5nIHdpdGggdGhlIGlkZW50aWZpZXIgQyBpbW1lZGlhdGVseSBmb2xsb3dlZCBieSBcIi1cIi5cblx0XHQvLyBUaGUgbWF0Y2hpbmcgb2YgQyBhZ2FpbnN0IHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWUgaXMgcGVyZm9ybWVkIGNhc2UtaW5zZW5zaXRpdmVseS5cblx0XHQvLyBUaGUgaWRlbnRpZmllciBDIGRvZXMgbm90IGhhdmUgdG8gYmUgYSB2YWxpZCBsYW5ndWFnZSBuYW1lLlwiXG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNsYW5nLXBzZXVkb1xuXHRcdFwibGFuZ1wiOiBtYXJrRnVuY3Rpb24oIGZ1bmN0aW9uKCBsYW5nICkge1xuXG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KCBsYW5nIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoIFwieG1sOmxhbmdcIiApIHx8IGVsZW0uZ2V0QXR0cmlidXRlKCBcImxhbmdcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoIGVsZW0gPSBlbGVtLnBhcmVudE5vZGUgKSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH07XG5cdFx0fSApLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcblx0XHRcdFx0KCAhZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSApICYmXG5cdFx0XHRcdCEhKCBlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4ICk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQgKSB8fFxuXHRcdFx0XHQoIG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCApO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuXHRcdFx0XHRlbGVtLnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uc2VsZWN0ZWQgPT09IHRydWU7XG5cdFx0fSxcblxuXHRcdC8vIENvbnRlbnRzXG5cdFx0XCJlbXB0eVwiOiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zWyBcImVtcHR5XCIgXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoICggYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICkgPT0gbnVsbCB8fFxuXHRcdFx0XHRcdGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSApLFxuXG5cdFx0XCJsYXN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBfbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSApLFxuXG5cdFx0XCJlcVwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggX21hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9ICksXG5cblx0XHRcImV2ZW5cIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyggZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0gKSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMTtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9ICksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSApLFxuXG5cdFx0XCJndFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9IClcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zWyBcIm50aFwiIF0gPSBFeHByLnBzZXVkb3NbIFwiZXFcIiBdO1xuXG4vLyBBZGQgYnV0dG9uL2lucHV0IHR5cGUgcHNldWRvc1xuZm9yICggaSBpbiB7IHJhZGlvOiB0cnVlLCBjaGVja2JveDogdHJ1ZSwgZmlsZTogdHJ1ZSwgcGFzc3dvcmQ6IHRydWUsIGltYWdlOiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlSW5wdXRQc2V1ZG8oIGkgKTtcbn1cbmZvciAoIGkgaW4geyBzdWJtaXQ6IHRydWUsIHJlc2V0OiB0cnVlIH0gKSB7XG5cdEV4cHIucHNldWRvc1sgaSBdID0gY3JlYXRlQnV0dG9uUHNldWRvKCBpICk7XG59XG5cbi8vIEVhc3kgQVBJIGZvciBjcmVhdGluZyBuZXcgc2V0RmlsdGVyc1xuZnVuY3Rpb24gc2V0RmlsdGVycygpIHt9XG5zZXRGaWx0ZXJzLnByb3RvdHlwZSA9IEV4cHIuZmlsdGVycyA9IEV4cHIucHNldWRvcztcbkV4cHIuc2V0RmlsdGVycyA9IG5ldyBzZXRGaWx0ZXJzKCk7XG5cbnRva2VuaXplID0gU2l6emxlLnRva2VuaXplID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBwYXJzZU9ubHkgKSB7XG5cdHZhciBtYXRjaGVkLCBtYXRjaCwgdG9rZW5zLCB0eXBlLFxuXHRcdHNvRmFyLCBncm91cHMsIHByZUZpbHRlcnMsXG5cdFx0Y2FjaGVkID0gdG9rZW5DYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggY2FjaGVkICkge1xuXHRcdHJldHVybiBwYXJzZU9ubHkgPyAwIDogY2FjaGVkLnNsaWNlKCAwICk7XG5cdH1cblxuXHRzb0ZhciA9IHNlbGVjdG9yO1xuXHRncm91cHMgPSBbXTtcblx0cHJlRmlsdGVycyA9IEV4cHIucHJlRmlsdGVyO1xuXG5cdHdoaWxlICggc29GYXIgKSB7XG5cblx0XHQvLyBDb21tYSBhbmQgZmlyc3QgcnVuXG5cdFx0aWYgKCAhbWF0Y2hlZCB8fCAoIG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkgKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbIDAgXS5sZW5ndGggKSB8fCBzb0Zhcjtcblx0XHRcdH1cblx0XHRcdGdyb3Vwcy5wdXNoKCAoIHRva2VucyA9IFtdICkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKCBtYXRjaCA9IHJjb21iaW5hdG9ycy5leGVjKCBzb0ZhciApICkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFsgMCBdLnJlcGxhY2UoIHJ0cmltLCBcIiBcIiApXG5cdFx0XHR9ICk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAoIG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSApICYmICggIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQoIG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApICkgKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKCB7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9ICk7XG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoZWQubGVuZ3RoICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCAhbWF0Y2hlZCApIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbGVuZ3RoIG9mIHRoZSBpbnZhbGlkIGV4Y2Vzc1xuXHQvLyBpZiB3ZSdyZSBqdXN0IHBhcnNpbmdcblx0Ly8gT3RoZXJ3aXNlLCB0aHJvdyBhbiBlcnJvciBvciByZXR1cm4gdG9rZW5zXG5cdHJldHVybiBwYXJzZU9ubHkgP1xuXHRcdHNvRmFyLmxlbmd0aCA6XG5cdFx0c29GYXIgP1xuXHRcdFx0U2l6emxlLmVycm9yKCBzZWxlY3RvciApIDpcblxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zWyBpIF0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblxuXHRcdC8vIENoZWNrIGFnYWluc3QgY2xvc2VzdCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoICggZWxlbSA9IGVsZW1bIGRpciBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgfHwgY2hlY2tOb25FbGVtZW50cyApIHtcblx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBlbGVtWyBleHBhbmRvIF0gfHwgKCBlbGVtWyBleHBhbmRvIF0gPSB7fSApO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdCggb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdID0ge30gKTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAoIG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdICkgJiZcblx0XHRcdFx0XHRcdFx0b2xkQ2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBvbGRDYWNoZVsgMSBdID09PSBkb25lTmFtZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBBc3NpZ24gdG8gbmV3Q2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gKCBuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoICggbmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9O1xufVxuXG5mdW5jdGlvbiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSB7XG5cdHJldHVybiBtYXRjaGVycy5sZW5ndGggPiAxID9cblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIGkgPSBtYXRjaGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAhbWF0Y2hlcnNbIGkgXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1sgMCBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzWyBpIF0sIHJlc3VsdHMgKTtcblx0fVxuXHRyZXR1cm4gcmVzdWx0cztcbn1cblxuZnVuY3Rpb24gY29uZGVuc2UoIHVubWF0Y2hlZCwgbWFwLCBmaWx0ZXIsIGNvbnRleHQsIHhtbCApIHtcblx0dmFyIGVsZW0sXG5cdFx0bmV3VW5tYXRjaGVkID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bGVuID0gdW5tYXRjaGVkLmxlbmd0aCxcblx0XHRtYXBwZWQgPSBtYXAgIT0gbnVsbDtcblxuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRpZiAoICggZWxlbSA9IHVubWF0Y2hlZFsgaSBdICkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKFxuXHRcdFx0XHRzZWxlY3RvciB8fCBcIipcIixcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCxcblx0XHRcdFx0W11cblx0XHRcdCksXG5cblx0XHRcdC8vIFByZWZpbHRlciB0byBnZXQgbWF0Y2hlciBpbnB1dCwgcHJlc2VydmluZyBhIG1hcCBmb3Igc2VlZC1yZXN1bHRzIHN5bmNocm9uaXphdGlvblxuXHRcdFx0bWF0Y2hlckluID0gcHJlRmlsdGVyICYmICggc2VlZCB8fCAhc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGNvbmRlbnNlKCBlbGVtcywgcHJlTWFwLCBwcmVGaWx0ZXIsIGNvbnRleHQsIHhtbCApIDpcblx0XHRcdFx0ZWxlbXMsXG5cblx0XHRcdG1hdGNoZXJPdXQgPSBtYXRjaGVyID9cblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKCBlbGVtID0gdGVtcFsgaSBdICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlck91dFsgcG9zdE1hcFsgaSBdIF0gPSAhKCBtYXRjaGVySW5bIHBvc3RNYXBbIGkgXSBdID0gZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyIHx8IHByZUZpbHRlciApIHtcblx0XHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKCBlbGVtID0gbWF0Y2hlck91dFsgaSBdICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAoIG1hdGNoZXJJblsgaSBdID0gZWxlbSApICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsICggbWF0Y2hlck91dCA9IFtdICksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoICggZWxlbSA9IG1hdGNoZXJPdXRbIGkgXSApICYmXG5cdFx0XHRcdFx0XHQoIHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwWyBpIF0gKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkWyB0ZW1wIF0gPSAhKCByZXN1bHRzWyB0ZW1wIF0gPSBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWyAwIF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVsgXCIgXCIgXSxcblx0XHRpID0gbGVhZGluZ1JlbGF0aXZlID8gMSA6IDAsXG5cblx0XHQvLyBUaGUgZm91bmRhdGlvbmFsIG1hdGNoZXIgZW5zdXJlcyB0aGF0IGVsZW1lbnRzIGFyZSByZWFjaGFibGUgZnJvbSB0b3AtbGV2ZWwgY29udGV4dChzKVxuXHRcdG1hdGNoQ29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGNoZWNrQ29udGV4dDtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hBbnlDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZiggY2hlY2tDb250ZXh0LCBlbGVtICkgPiAtMTtcblx0XHR9LCBpbXBsaWNpdFJlbGF0aXZlLCB0cnVlICksXG5cdFx0bWF0Y2hlcnMgPSBbIGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgcmV0ID0gKCAhbGVhZGluZ1JlbGF0aXZlICYmICggeG1sIHx8IGNvbnRleHQgIT09IG91dGVybW9zdENvbnRleHQgKSApIHx8IChcblx0XHRcdFx0KCBjaGVja0NvbnRleHQgPSBjb250ZXh0ICkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblxuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoIG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGkgXS50eXBlIF0gKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKCBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSwgbWF0Y2hlciApIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zWyBpIF0udHlwZSBdLmFwcGx5KCBudWxsLCB0b2tlbnNbIGkgXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbIGogXS50eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHNldE1hdGNoZXIoXG5cdFx0XHRcdFx0aSA+IDEgJiYgZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksXG5cdFx0XHRcdFx0aSA+IDEgJiYgdG9TZWxlY3RvcihcblxuXHRcdFx0XHRcdC8vIElmIHRoZSBwcmVjZWRpbmcgdG9rZW4gd2FzIGEgZGVzY2VuZGFudCBjb21iaW5hdG9yLCBpbnNlcnQgYW4gaW1wbGljaXQgYW55LWVsZW1lbnQgYCpgXG5cdFx0XHRcdFx0dG9rZW5zXG5cdFx0XHRcdFx0XHQuc2xpY2UoIDAsIGkgLSAxIClcblx0XHRcdFx0XHRcdC5jb25jYXQoIHsgdmFsdWU6IHRva2Vuc1sgaSAtIDIgXS50eXBlID09PSBcIiBcIiA/IFwiKlwiIDogXCJcIiB9IClcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICggdG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkgKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgdG9TZWxlY3RvciggdG9rZW5zIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHRcdG1hdGNoZXJzLnB1c2goIG1hdGNoZXIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApIHtcblx0dmFyIGJ5U2V0ID0gc2V0TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRieUVsZW1lbnQgPSBlbGVtZW50TWF0Y2hlcnMubGVuZ3RoID4gMCxcblx0XHRzdXBlck1hdGNoZXIgPSBmdW5jdGlvbiggc2VlZCwgY29udGV4dCwgeG1sLCByZXN1bHRzLCBvdXRlcm1vc3QgKSB7XG5cdFx0XHR2YXIgZWxlbSwgaiwgbWF0Y2hlcixcblx0XHRcdFx0bWF0Y2hlZENvdW50ID0gMCxcblx0XHRcdFx0aSA9IFwiMFwiLFxuXHRcdFx0XHR1bm1hdGNoZWQgPSBzZWVkICYmIFtdLFxuXHRcdFx0XHRzZXRNYXRjaGVkID0gW10sXG5cdFx0XHRcdGNvbnRleHRCYWNrdXAgPSBvdXRlcm1vc3RDb250ZXh0LFxuXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbIFwiVEFHXCIgXSggXCIqXCIsIG91dGVybW9zdCApLFxuXG5cdFx0XHRcdC8vIFVzZSBpbnRlZ2VyIGRpcnJ1bnMgaWZmIHRoaXMgaXMgdGhlIG91dGVybW9zdCBtYXRjaGVyXG5cdFx0XHRcdGRpcnJ1bnNVbmlxdWUgPSAoIGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xICksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTErLCBFZGdlIDE3IC0gMTgrXG5cdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHQvLyB0d28gZG9jdW1lbnRzOyBzaGFsbG93IGNvbXBhcmlzb25zIHdvcmsuXG5cdFx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT0gZG9jdW1lbnQgfHwgY29udGV4dCB8fCBvdXRlcm1vc3Q7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBlbGVtZW50cyBwYXNzaW5nIGVsZW1lbnRNYXRjaGVycyBkaXJlY3RseSB0byByZXN1bHRzXG5cdFx0XHQvLyBTdXBwb3J0OiBJRTw5LCBTYWZhcmlcblx0XHRcdC8vIFRvbGVyYXRlIE5vZGVMaXN0IHByb3BlcnRpZXMgKElFOiBcImxlbmd0aFwiOyBTYWZhcmk6IDxudW1iZXI+KSBtYXRjaGluZyBlbGVtZW50cyBieSBpZFxuXHRcdFx0Zm9yICggOyBpICE9PSBsZW4gJiYgKCBlbGVtID0gZWxlbXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExKywgRWRnZSAxNyAtIDE4K1xuXHRcdFx0XHRcdC8vIElFL0VkZ2Ugc29tZXRpbWVzIHRocm93IGEgXCJQZXJtaXNzaW9uIGRlbmllZFwiIGVycm9yIHdoZW4gc3RyaWN0LWNvbXBhcmluZ1xuXHRcdFx0XHRcdC8vIHR3byBkb2N1bWVudHM7IHNoYWxsb3cgY29tcGFyaXNvbnMgd29yay5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZXFlcWVxXG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBUcmFjayB1bm1hdGNoZWQgZWxlbWVudHMgZm9yIHNldCBmaWx0ZXJzXG5cdFx0XHRcdGlmICggYnlTZXQgKSB7XG5cblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoIGVsZW0gPSAhbWF0Y2hlciAmJiBlbGVtICkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoZXIgPSBzZXRNYXRjaGVyc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEoIHVubWF0Y2hlZFsgaSBdIHx8IHNldE1hdGNoZWRbIGkgXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbIGkgXSA9IHBvcC5jYWxsKCByZXN1bHRzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBEaXNjYXJkIGluZGV4IHBsYWNlaG9sZGVyIHZhbHVlcyB0byBnZXQgb25seSBhY3R1YWwgbWF0Y2hlc1xuXHRcdFx0XHRcdHNldE1hdGNoZWQgPSBjb25kZW5zZSggc2V0TWF0Y2hlZCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQWRkIG1hdGNoZXMgdG8gcmVzdWx0c1xuXHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBzZXRNYXRjaGVkICk7XG5cblx0XHRcdFx0Ly8gU2VlZGxlc3Mgc2V0IG1hdGNoZXMgc3VjY2VlZGluZyBtdWx0aXBsZSBzdWNjZXNzZnVsIG1hdGNoZXJzIHN0aXB1bGF0ZSBzb3J0aW5nXG5cdFx0XHRcdGlmICggb3V0ZXJtb3N0ICYmICFzZWVkICYmIHNldE1hdGNoZWQubGVuZ3RoID4gMCAmJlxuXHRcdFx0XHRcdCggbWF0Y2hlZENvdW50ICsgc2V0TWF0Y2hlcnMubGVuZ3RoICkgPiAxICkge1xuXG5cdFx0XHRcdFx0U2l6emxlLnVuaXF1ZVNvcnQoIHJlc3VsdHMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdmVycmlkZSBtYW5pcHVsYXRpb24gb2YgZ2xvYmFscyBieSBuZXN0ZWQgbWF0Y2hlcnNcblx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRkaXJydW5zID0gZGlycnVuc1VuaXF1ZTtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHRCYWNrdXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB1bm1hdGNoZWQ7XG5cdFx0fTtcblxuXHRyZXR1cm4gYnlTZXQgP1xuXHRcdG1hcmtGdW5jdGlvbiggc3VwZXJNYXRjaGVyICkgOlxuXHRcdHN1cGVyTWF0Y2hlcjtcbn1cblxuY29tcGlsZSA9IFNpenpsZS5jb21waWxlID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBtYXRjaCAvKiBJbnRlcm5hbCBVc2UgT25seSAqLyApIHtcblx0dmFyIGksXG5cdFx0c2V0TWF0Y2hlcnMgPSBbXSxcblx0XHRlbGVtZW50TWF0Y2hlcnMgPSBbXSxcblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCAhY2FjaGVkICkge1xuXG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoWyBpIF0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoXG5cdFx0XHRzZWxlY3Rvcixcblx0XHRcdG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyggZWxlbWVudE1hdGNoZXJzLCBzZXRNYXRjaGVycyApXG5cdFx0KTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKCBzZWxlY3RvciA9IGNvbXBpbGVkLnNlbGVjdG9yIHx8IHNlbGVjdG9yICkgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFsgMCBdID0gbWF0Y2hbIDAgXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKCB0b2tlbiA9IHRva2Vuc1sgMCBdICkudHlwZSA9PT0gXCJJRFwiICYmXG5cdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sgMSBdLnR5cGUgXSApIHtcblxuXHRcdFx0Y29udGV4dCA9ICggRXhwci5maW5kWyBcIklEXCIgXSggdG9rZW4ubWF0Y2hlc1sgMCBdXG5cdFx0XHRcdC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLCBjb250ZXh0ICkgfHwgW10gKVsgMCBdO1xuXHRcdFx0aWYgKCAhY29udGV4dCApIHtcblx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdC8vIFByZWNvbXBpbGVkIG1hdGNoZXJzIHdpbGwgc3RpbGwgdmVyaWZ5IGFuY2VzdHJ5LCBzbyBzdGVwIHVwIGEgbGV2ZWxcblx0XHRcdH0gZWxzZSBpZiAoIGNvbXBpbGVkICkge1xuXHRcdFx0XHRjb250ZXh0ID0gY29udGV4dC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXG5cdFx0XHRzZWxlY3RvciA9IHNlbGVjdG9yLnNsaWNlKCB0b2tlbnMuc2hpZnQoKS52YWx1ZS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGZXRjaCBhIHNlZWQgc2V0IGZvciByaWdodC10by1sZWZ0IG1hdGNoaW5nXG5cdFx0aSA9IG1hdGNoRXhwclsgXCJuZWVkc0NvbnRleHRcIiBdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zWyBpIF07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKCB0eXBlID0gdG9rZW4udHlwZSApIF0gKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAoIGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSApICkge1xuXG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoICggc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1sgMCBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWyAwIF0udHlwZSApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dFxuXHRcdFx0XHQpICkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoIFwiXCIgKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKCBcIlwiICkgPT09IGV4cGFuZG87XG5cbi8vIFN1cHBvcnQ6IENocm9tZSAxNC0zNStcbi8vIEFsd2F5cyBhc3N1bWUgZHVwbGljYXRlcyBpZiB0aGV5IGFyZW4ndCBwYXNzZWQgdG8gdGhlIGNvbXBhcmlzb24gZnVuY3Rpb25cbnN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyA9ICEhaGFzRHVwbGljYXRlO1xuXG4vLyBJbml0aWFsaXplIGFnYWluc3QgdGhlIGRlZmF1bHQgZG9jdW1lbnRcbnNldERvY3VtZW50KCk7XG5cbi8vIFN1cHBvcnQ6IFdlYmtpdDw1MzcuMzIgLSBTYWZhcmkgNi4wLjMvQ2hyb21lIDI1IChmaXhlZCBpbiBDaHJvbWUgMjcpXG4vLyBEZXRhY2hlZCBub2RlcyBjb25mb3VuZGluZ2x5IGZvbGxvdyAqZWFjaCBvdGhlcipcbnN1cHBvcnQuc29ydERldGFjaGVkID0gYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cblx0Ly8gU2hvdWxkIHJldHVybiAxLCBidXQgcmV0dXJucyA0IChmb2xsb3dpbmcpXG5cdHJldHVybiBlbC5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJmaWVsZHNldFwiICkgKSAmIDE7XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFPDhcbi8vIFByZXZlbnQgYXR0cmlidXRlL3Byb3BlcnR5IFwiaW50ZXJwb2xhdGlvblwiXG4vLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM2NDI5JTI4VlMuODUlMjkuYXNweFxuaWYgKCAhYXNzZXJ0KCBmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwiaHJlZlwiICkgPT09IFwiI1wiO1xufSApICkge1xuXHRhZGRIYW5kbGUoIFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0eXBlXCIgPyAxIDogMiApO1xuXHRcdH1cblx0fSApO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0gKSApIHtcblx0YWRkSGFuZGxlKCBcInZhbHVlXCIsIGZ1bmN0aW9uKCBlbGVtLCBfbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9ICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydCggZnVuY3Rpb24oIGVsICkge1xuXHRyZXR1cm4gZWwuZ2V0QXR0cmlidXRlKCBcImRpc2FibGVkXCIgKSA9PSBudWxsO1xufSApICkge1xuXHRhZGRIYW5kbGUoIGJvb2xlYW5zLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHZhbDtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtWyBuYW1lIF0gPT09IHRydWUgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOlxuXHRcdFx0XHQoIHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApICkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdFx0dmFsLnZhbHVlIDpcblx0XHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSApO1xufVxuXG5yZXR1cm4gU2l6emxlO1xuXG59ICkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuXHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufVxudmFyIHJzaW5nbGVUYWcgPSAoIC9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pICk7XG5cblxuXG4vLyBJbXBsZW1lbnQgdGhlIGlkZW50aWNhbCBmdW5jdGlvbmFsaXR5IGZvciBmaWx0ZXIgYW5kIG5vdFxuZnVuY3Rpb24gd2lubm93KCBlbGVtZW50cywgcXVhbGlmaWVyLCBub3QgKSB7XG5cdGlmICggaXNGdW5jdGlvbiggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gISFxdWFsaWZpZXIuY2FsbCggZWxlbSwgaSwgZWxlbSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2luZ2xlIGVsZW1lbnRcblx0aWYgKCBxdWFsaWZpZXIubm9kZVR5cGUgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBlbGVtID09PSBxdWFsaWZpZXIgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEFycmF5bGlrZSBvZiBlbGVtZW50cyAoalF1ZXJ5LCBhcmd1bWVudHMsIEFycmF5KVxuXHRpZiAoIHR5cGVvZiBxdWFsaWZpZXIgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5ncmVwKCBlbGVtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCBpbmRleE9mLmNhbGwoIHF1YWxpZmllciwgZWxlbSApID4gLTEgKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIEZpbHRlcmVkIGRpcmVjdGx5IGZvciBib3RoIHNpbXBsZSBhbmQgY29tcGxleCBzZWxlY3RvcnNcblx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoaXNbIG1hdGNoIF0gKSApIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzWyBtYXRjaCBdKCBjb250ZXh0WyBtYXRjaCBdICk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIG90aGVyd2lzZSBzZXQgYXMgYXR0cmlidXRlc1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXMuYXR0ciggbWF0Y2gsIGNvbnRleHRbIG1hdGNoIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJCgjaWQpXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCBtYXRjaFsgMiBdICk7XG5cblx0XHRcdFx0XHRpZiAoIGVsZW0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIEluamVjdCB0aGUgZWxlbWVudCBkaXJlY3RseSBpbnRvIHRoZSBqUXVlcnkgb2JqZWN0XG5cdFx0XHRcdFx0XHR0aGlzWyAwIF0gPSBlbGVtO1xuXHRcdFx0XHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgJCguLi4pKVxuXHRcdFx0fSBlbHNlIGlmICggIWNvbnRleHQgfHwgY29udGV4dC5qcXVlcnkgKSB7XG5cdFx0XHRcdHJldHVybiAoIGNvbnRleHQgfHwgcm9vdCApLmZpbmQoIHNlbGVjdG9yICk7XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCBjb250ZXh0KVxuXHRcdFx0Ly8gKHdoaWNoIGlzIGp1c3QgZXF1aXZhbGVudCB0bzogJChjb250ZXh0KS5maW5kKGV4cHIpXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvciggY29udGV4dCApLmZpbmQoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHQvLyBIQU5ETEU6ICQoRE9NRWxlbWVudClcblx0XHR9IGVsc2UgaWYgKCBzZWxlY3Rvci5ub2RlVHlwZSApIHtcblx0XHRcdHRoaXNbIDAgXSA9IHNlbGVjdG9yO1xuXHRcdFx0dGhpcy5sZW5ndGggPSAxO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHQvLyBIQU5ETEU6ICQoZnVuY3Rpb24pXG5cdFx0Ly8gU2hvcnRjdXQgZm9yIGRvY3VtZW50IHJlYWR5XG5cdFx0fSBlbHNlIGlmICggaXNGdW5jdGlvbiggc2VsZWN0b3IgKSApIHtcblx0XHRcdHJldHVybiByb290LnJlYWR5ICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRyb290LnJlYWR5KCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBFeGVjdXRlIGltbWVkaWF0ZWx5IGlmIHJlYWR5IGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdHNlbGVjdG9yKCBqUXVlcnkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4galF1ZXJ5Lm1ha2VBcnJheSggc2VsZWN0b3IsIHRoaXMgKTtcblx0fTtcblxuLy8gR2l2ZSB0aGUgaW5pdCBmdW5jdGlvbiB0aGUgalF1ZXJ5IHByb3RvdHlwZSBmb3IgbGF0ZXIgaW5zdGFudGlhdGlvblxuaW5pdC5wcm90b3R5cGUgPSBqUXVlcnkuZm47XG5cbi8vIEluaXRpYWxpemUgY2VudHJhbCByZWZlcmVuY2VcbnJvb3RqUXVlcnkgPSBqUXVlcnkoIGRvY3VtZW50ICk7XG5cblxudmFyIHJwYXJlbnRzcHJldiA9IC9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLFxuXG5cdC8vIE1ldGhvZHMgZ3VhcmFudGVlZCB0byBwcm9kdWNlIGEgdW5pcXVlIHNldCB3aGVuIHN0YXJ0aW5nIGZyb20gYSB1bmlxdWUgc2V0XG5cdGd1YXJhbnRlZWRVbmlxdWUgPSB7XG5cdFx0Y2hpbGRyZW46IHRydWUsXG5cdFx0Y29udGVudHM6IHRydWUsXG5cdFx0bmV4dDogdHJ1ZSxcblx0XHRwcmV2OiB0cnVlXG5cdH07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aGFzOiBmdW5jdGlvbiggdGFyZ2V0ICkge1xuXHRcdHZhciB0YXJnZXRzID0galF1ZXJ5KCB0YXJnZXQsIHRoaXMgKSxcblx0XHRcdGwgPSB0YXJnZXRzLmxlbmd0aDtcblxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaSA9IDA7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCB0aGlzLCB0YXJnZXRzWyBpIF0gKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRjbG9zZXN0OiBmdW5jdGlvbiggc2VsZWN0b3JzLCBjb250ZXh0ICkge1xuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGwgPSB0aGlzLmxlbmd0aCxcblx0XHRcdG1hdGNoZWQgPSBbXSxcblx0XHRcdHRhcmdldHMgPSB0eXBlb2Ygc2VsZWN0b3JzICE9PSBcInN0cmluZ1wiICYmIGpRdWVyeSggc2VsZWN0b3JzICk7XG5cblx0XHQvLyBQb3NpdGlvbmFsIHNlbGVjdG9ycyBuZXZlciBtYXRjaCwgc2luY2UgdGhlcmUncyBubyBfc2VsZWN0aW9uXyBjb250ZXh0XG5cdFx0aWYgKCAhcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvcnMgKSApIHtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zm9yICggY3VyID0gdGhpc1sgaSBdOyBjdXIgJiYgY3VyICE9PSBjb250ZXh0OyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblxuXHRcdFx0XHRcdC8vIEFsd2F5cyBza2lwIGRvY3VtZW50IGZyYWdtZW50c1xuXHRcdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlIDwgMTEgJiYgKCB0YXJnZXRzID9cblx0XHRcdFx0XHRcdHRhcmdldHMuaW5kZXgoIGN1ciApID4gLTEgOlxuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBwYXNzIG5vbi1lbGVtZW50cyB0byBTaXp6bGVcblx0XHRcdFx0XHRcdGN1ci5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGN1ciwgc2VsZWN0b3JzICkgKSApIHtcblxuXHRcdFx0XHRcdFx0bWF0Y2hlZC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZC5sZW5ndGggPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIG1hdGNoZWQgKSA6IG1hdGNoZWQgKTtcblx0fSxcblxuXHQvLyBEZXRlcm1pbmUgdGhlIHBvc2l0aW9uIG9mIGFuIGVsZW1lbnQgd2l0aGluIHRoZSBzZXRcblx0aW5kZXg6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gTm8gYXJndW1lbnQsIHJldHVybiBpbmRleCBpbiBwYXJlbnRcblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuICggdGhpc1sgMCBdICYmIHRoaXNbIDAgXS5wYXJlbnROb2RlICkgPyB0aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aCA6IC0xO1xuXHRcdH1cblxuXHRcdC8vIEluZGV4IGluIHNlbGVjdG9yXG5cdFx0aWYgKCB0eXBlb2YgZWxlbSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiBpbmRleE9mLmNhbGwoIGpRdWVyeSggZWxlbSApLCB0aGlzWyAwIF0gKTtcblx0XHR9XG5cblx0XHQvLyBMb2NhdGUgdGhlIHBvc2l0aW9uIG9mIHRoZSBkZXNpcmVkIGVsZW1lbnRcblx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCB0aGlzLFxuXG5cdFx0XHQvLyBJZiBpdCByZWNlaXZlcyBhIGpRdWVyeSBvYmplY3QsIHRoZSBmaXJzdCBlbGVtZW50IGlzIHVzZWRcblx0XHRcdGVsZW0uanF1ZXJ5ID8gZWxlbVsgMCBdIDogZWxlbVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkOiBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKFxuXHRcdFx0alF1ZXJ5LnVuaXF1ZVNvcnQoXG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcy5nZXQoKSwgalF1ZXJ5KCBzZWxlY3RvciwgY29udGV4dCApIClcblx0XHRcdClcblx0XHQpO1xuXHR9LFxuXG5cdGFkZEJhY2s6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5hZGQoIHNlbGVjdG9yID09IG51bGwgP1xuXHRcdFx0dGhpcy5wcmV2T2JqZWN0IDogdGhpcy5wcmV2T2JqZWN0LmZpbHRlciggc2VsZWN0b3IgKVxuXHRcdCk7XG5cdH1cbn0gKTtcblxuZnVuY3Rpb24gc2libGluZyggY3VyLCBkaXIgKSB7XG5cdHdoaWxlICggKCBjdXIgPSBjdXJbIGRpciBdICkgJiYgY3VyLm5vZGVUeXBlICE9PSAxICkge31cblx0cmV0dXJuIGN1cjtcbn1cblxualF1ZXJ5LmVhY2goIHtcblx0cGFyZW50OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdHJldHVybiBwYXJlbnQgJiYgcGFyZW50Lm5vZGVUeXBlICE9PSAxMSA/IHBhcmVudCA6IG51bGw7XG5cdH0sXG5cdHBhcmVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicGFyZW50Tm9kZVwiICk7XG5cdH0sXG5cdHBhcmVudHNVbnRpbDogZnVuY3Rpb24oIGVsZW0sIF9pLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBfaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiwgdW50aWwgKTtcblx0fSxcblx0c2libGluZ3M6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggKCBlbGVtLnBhcmVudE5vZGUgfHwge30gKS5maXJzdENoaWxkLCBlbGVtICk7XG5cdH0sXG5cdGNoaWxkcmVuOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoIGVsZW0uZmlyc3RDaGlsZCApO1xuXHR9LFxuXHRjb250ZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0aWYgKCBlbGVtLmNvbnRlbnREb2N1bWVudCAhPSBudWxsICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExK1xuXHRcdFx0Ly8gPG9iamVjdD4gZWxlbWVudHMgd2l0aCBubyBgZGF0YWAgYXR0cmlidXRlIGhhcyBhbiBvYmplY3Rcblx0XHRcdC8vIGBjb250ZW50RG9jdW1lbnRgIHdpdGggYSBgbnVsbGAgcHJvdG90eXBlLlxuXHRcdFx0Z2V0UHJvdG8oIGVsZW0uY29udGVudERvY3VtZW50ICkgKSB7XG5cblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggX2ksIHR1cGxlICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE1hcCB0dXBsZXMgKHByb2dyZXNzLCBkb25lLCBmYWlsKSB0byBhcmd1bWVudHMgKGRvbmUsIGZhaWwsIHByb2dyZXNzKVxuXHRcdFx0XHRcdFx0XHR2YXIgZm4gPSBpc0Z1bmN0aW9uKCBmbnNbIHR1cGxlWyA0IF0gXSApICYmIGZuc1sgdHVwbGVbIDQgXSBdO1xuXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLnByb2dyZXNzKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLm5vdGlmeSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5kb25lKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlc29sdmUgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZmFpbChmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZWplY3QgfSlcblx0XHRcdFx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAxIF0gXSggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkID0gZm4gJiYgZm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgJiYgaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhlbiApICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFNwZWNpYWwgcHJvY2Vzc29ycyAobm90aWZ5KSBqdXN0IHdhaXQgZm9yIHJlc29sdXRpb25cblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBhbHNvIGhvb2sgaW50byBwcm9ncmVzc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gLi4uYW5kIGRpc3JlZ2FyZCBvbGRlciByZXNvbHV0aW9uIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1heERlcHRoKys7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYWxsIG90aGVyIHJldHVybmVkIHZhbHVlc1xuXHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IElkZW50aXR5ICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgcmV0dXJuZWQgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFByb2Nlc3MgdGhlIHZhbHVlKHMpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIERlZmF1bHQgcHJvY2VzcyBpcyByZXNvbHZlXG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggc3BlY2lhbCB8fCBkZWZlcnJlZC5yZXNvbHZlV2l0aCApKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgbm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGNhdGNoIGFuZCByZWplY3QgZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MgPSBzcGVjaWFsID9cblx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgOlxuXHRcdFx0XHRcdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdygpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayggZSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjQuMVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTYxXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIHBvc3QtcmVzb2x1dGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCArIDEgPj0gbWF4RGVwdGggKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGFuZCBtdWx0aXBsZSB2YWx1ZXMgKG5vbi1zcGVjIGJlaGF2aW9yKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBUaHJvd2VyICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyBlIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH07XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjFcblx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTdcblx0XHRcdFx0XHRcdFx0Ly8gUmUtcmVzb2x2ZSBwcm9taXNlcyBpbW1lZGlhdGVseSB0byBkb2RnZSBmYWxzZSByZWplY3Rpb24gZnJvbVxuXHRcdFx0XHRcdFx0XHQvLyBzdWJzZXF1ZW50IGVycm9yc1xuXHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdHByb2Nlc3MoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENhbGwgYW4gb3B0aW9uYWwgaG9vayB0byByZWNvcmQgdGhlIHN0YWNrLCBpbiBjYXNlIG9mIGV4Y2VwdGlvblxuXHRcdFx0XHRcdFx0XHRcdC8vIHNpbmNlIGl0J3Mgb3RoZXJ3aXNlIGxvc3Qgd2hlbiBleGVjdXRpb24gZ29lcyBhc3luY1xuXHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSA9IGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHByb2Nlc3MgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cblx0XHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25Qcm9ncmVzcyApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUHJvZ3Jlc3MgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIubm90aWZ5V2l0aFxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAxIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25SZWplY3RlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uUmVqZWN0ZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0VGhyb3dlclxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gR2V0IGEgcHJvbWlzZSBmb3IgdGhpcyBkZWZlcnJlZFxuXHRcdFx0XHQvLyBJZiBvYmogaXMgcHJvdmlkZWQsIHRoZSBwcm9taXNlIGFzcGVjdCBpcyBhZGRlZCB0byB0aGUgb2JqZWN0XG5cdFx0XHRcdHByb21pc2U6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9iaiAhPSBudWxsID8galF1ZXJ5LmV4dGVuZCggb2JqLCBwcm9taXNlICkgOiBwcm9taXNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVmZXJyZWQgPSB7fTtcblxuXHRcdC8vIEFkZCBsaXN0LXNwZWNpZmljIG1ldGhvZHNcblx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cdFx0XHR2YXIgbGlzdCA9IHR1cGxlWyAyIF0sXG5cdFx0XHRcdHN0YXRlU3RyaW5nID0gdHVwbGVbIDUgXTtcblxuXHRcdFx0Ly8gcHJvbWlzZS5wcm9ncmVzcyA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmRvbmUgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5mYWlsID0gbGlzdC5hZGRcblx0XHRcdHByb21pc2VbIHR1cGxlWyAxIF0gXSA9IGxpc3QuYWRkO1xuXG5cdFx0XHQvLyBIYW5kbGUgc3RhdGVcblx0XHRcdGlmICggc3RhdGVTdHJpbmcgKSB7XG5cdFx0XHRcdGxpc3QuYWRkKFxuXHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVzb2x2ZWRcIiAoaS5lLiwgZnVsZmlsbGVkKVxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlamVjdGVkXCJcblx0XHRcdFx0XHRcdHN0YXRlID0gc3RhdGVTdHJpbmc7XG5cdFx0XHRcdFx0fSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2NhbGxiYWNrcy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAyIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMyBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9jayxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmxvY2tcblx0XHRcdFx0KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmZpcmVcblx0XHRcdGxpc3QuYWRkKCB0dXBsZVsgMyBdLmZpcmUgKTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLm5vdGlmeVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlc29sdmVXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0ID0gZnVuY3Rpb24oKSB7IGRlZmVycmVkLnJlamVjdFdpdGgoLi4uKSB9XG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSggdGhpcyA9PT0gZGVmZXJyZWQgPyB1bmRlZmluZWQgOiB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnlXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3RXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdID0gbGlzdC5maXJlV2l0aDtcblx0XHR9ICk7XG5cblx0XHQvLyBNYWtlIHRoZSBkZWZlcnJlZCBhIHByb21pc2Vcblx0XHRwcm9taXNlLnByb21pc2UoIGRlZmVycmVkICk7XG5cblx0XHQvLyBDYWxsIGdpdmVuIGZ1bmMgaWYgYW55XG5cdFx0aWYgKCBmdW5jICkge1xuXHRcdFx0ZnVuYy5jYWxsKCBkZWZlcnJlZCwgZGVmZXJyZWQgKTtcblx0XHR9XG5cblx0XHQvLyBBbGwgZG9uZSFcblx0XHRyZXR1cm4gZGVmZXJyZWQ7XG5cdH0sXG5cblx0Ly8gRGVmZXJyZWQgaGVscGVyXG5cdHdoZW46IGZ1bmN0aW9uKCBzaW5nbGVWYWx1ZSApIHtcblx0XHR2YXJcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5jb21wbGV0ZWQgc3Vib3JkaW5hdGVzXG5cdFx0XHRyZW1haW5pbmcgPSBhcmd1bWVudHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bnByb2Nlc3NlZCBhcmd1bWVudHNcblx0XHRcdGkgPSByZW1haW5pbmcsXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGZ1bGZpbGxtZW50IGRhdGFcblx0XHRcdHJlc29sdmVDb250ZXh0cyA9IEFycmF5KCBpICksXG5cdFx0XHRyZXNvbHZlVmFsdWVzID0gc2xpY2UuY2FsbCggYXJndW1lbnRzICksXG5cblx0XHRcdC8vIHRoZSBwcmltYXJ5IERlZmVycmVkXG5cdFx0XHRwcmltYXJ5ID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdHByaW1hcnkucmVzb2x2ZVdpdGgoIHJlc29sdmVDb250ZXh0cywgcmVzb2x2ZVZhbHVlcyApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHQvLyBTaW5nbGUtIGFuZCBlbXB0eSBhcmd1bWVudHMgYXJlIGFkb3B0ZWQgbGlrZSBQcm9taXNlLnJlc29sdmVcblx0XHRpZiAoIHJlbWFpbmluZyA8PSAxICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggc2luZ2xlVmFsdWUsIHByaW1hcnkuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgcHJpbWFyeS5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBwcmltYXJ5LnN0YXRlKCkgPT09IFwicGVuZGluZ1wiIHx8XG5cdFx0XHRcdGlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBwcmltYXJ5LnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIHByaW1hcnkucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHByaW1hcnkucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggdG9UeXBlKCBrZXkgKSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXHRcdGZvciAoIGkgaW4ga2V5ICkge1xuXHRcdFx0YWNjZXNzKCBlbGVtcywgZm4sIGksIGtleVsgaSBdLCB0cnVlLCBlbXB0eUdldCwgcmF3ICk7XG5cdFx0fVxuXG5cdC8vIFNldHMgb25lIHZhbHVlXG5cdH0gZWxzZSBpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblxuXHRcdGlmICggIWlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBfa2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBfYWxsLCBsZXR0ZXIgKSB7XG5cdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcbn1cblxuLy8gQ29udmVydCBkYXNoZWQgdG8gY2FtZWxDYXNlOyB1c2VkIGJ5IHRoZSBjc3MgYW5kIGRhdGEgbW9kdWxlc1xuLy8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuLy8gTWljcm9zb2Z0IGZvcmdvdCB0byBodW1wIHRoZWlyIHZlbmRvciBwcmVmaXggKCM5NTcyKVxuZnVuY3Rpb24gY2FtZWxDYXNlKCBzdHJpbmcgKSB7XG5cdHJldHVybiBzdHJpbmcucmVwbGFjZSggcm1zUHJlZml4LCBcIm1zLVwiICkucmVwbGFjZSggcmRhc2hBbHBoYSwgZmNhbWVsQ2FzZSApO1xufVxudmFyIGFjY2VwdERhdGEgPSBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0Ly8gQWNjZXB0cyBvbmx5OlxuXHQvLyAgLSBOb2RlXG5cdC8vICAgIC0gTm9kZS5FTEVNRU5UX05PREVcblx0Ly8gICAgLSBOb2RlLkRPQ1VNRU5UX05PREVcblx0Ly8gIC0gT2JqZWN0XG5cdC8vICAgIC0gQW55XG5cdHJldHVybiBvd25lci5ub2RlVHlwZSA9PT0gMSB8fCBvd25lci5ub2RlVHlwZSA9PT0gOSB8fCAhKCArb3duZXIubm9kZVR5cGUgKTtcbn07XG5cblxuXG5cbmZ1bmN0aW9uIERhdGEoKSB7XG5cdHRoaXMuZXhwYW5kbyA9IGpRdWVyeS5leHBhbmRvICsgRGF0YS51aWQrKztcbn1cblxuRGF0YS51aWQgPSAxO1xuXG5EYXRhLnByb3RvdHlwZSA9IHtcblxuXHRjYWNoZTogZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdFx0Ly8gQ2hlY2sgaWYgdGhlIG93bmVyIG9iamVjdCBhbHJlYWR5IGhhcyBhIGNhY2hlXG5cdFx0dmFyIHZhbHVlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0Ly8gSWYgbm90LCBjcmVhdGUgb25lXG5cdFx0aWYgKCAhdmFsdWUgKSB7XG5cdFx0XHR2YWx1ZSA9IHt9O1xuXG5cdFx0XHQvLyBXZSBjYW4gYWNjZXB0IGRhdGEgZm9yIG5vbi1lbGVtZW50IG5vZGVzIGluIG1vZGVybiBicm93c2Vycyxcblx0XHRcdC8vIGJ1dCB3ZSBzaG91bGQgbm90LCBzZWUgIzgzMzUuXG5cdFx0XHQvLyBBbHdheXMgcmV0dXJuIGFuIGVtcHR5IG9iamVjdC5cblx0XHRcdGlmICggYWNjZXB0RGF0YSggb3duZXIgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBpdCBpcyBhIG5vZGUgdW5saWtlbHkgdG8gYmUgc3RyaW5naWZ5LWVkIG9yIGxvb3BlZCBvdmVyXG5cdFx0XHRcdC8vIHVzZSBwbGFpbiBhc3NpZ25tZW50XG5cdFx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdmFsdWU7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHNlY3VyZSBpdCBpbiBhIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5XG5cdFx0XHRcdC8vIGNvbmZpZ3VyYWJsZSBtdXN0IGJlIHRydWUgdG8gYWxsb3cgdGhlIHByb3BlcnR5IHRvIGJlXG5cdFx0XHRcdC8vIGRlbGV0ZWQgd2hlbiBkYXRhIGlzIHJlbW92ZWRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG93bmVyLCB0aGlzLmV4cGFuZG8sIHtcblx0XHRcdFx0XHRcdHZhbHVlOiB2YWx1ZSxcblx0XHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZVxuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB2YWx1ZTtcblx0fSxcblx0c2V0OiBmdW5jdGlvbiggb3duZXIsIGRhdGEsIHZhbHVlICkge1xuXHRcdHZhciBwcm9wLFxuXHRcdFx0Y2FjaGUgPSB0aGlzLmNhY2hlKCBvd25lciApO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCBrZXksIHZhbHVlIF0gYXJnc1xuXHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggZGF0YSApIF0gPSB2YWx1ZTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwgeyBwcm9wZXJ0aWVzIH0gXSBhcmdzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29weSB0aGUgcHJvcGVydGllcyBvbmUtYnktb25lIHRvIHRoZSBjYWNoZSBvYmplY3Rcblx0XHRcdGZvciAoIHByb3AgaW4gZGF0YSApIHtcblx0XHRcdFx0Y2FjaGVbIGNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGNhbWVsQ2FzZSgga2V5ICkgXTtcblx0fSxcblx0YWNjZXNzOiBmdW5jdGlvbiggb3duZXIsIGtleSwgdmFsdWUgKSB7XG5cblx0XHQvLyBJbiBjYXNlcyB3aGVyZSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIE5vIGtleSB3YXMgc3BlY2lmaWVkXG5cdFx0Ly8gICAyLiBBIHN0cmluZyBrZXkgd2FzIHNwZWNpZmllZCwgYnV0IG5vIHZhbHVlIHByb3ZpZGVkXG5cdFx0Ly9cblx0XHQvLyBUYWtlIHRoZSBcInJlYWRcIiBwYXRoIGFuZCBhbGxvdyB0aGUgZ2V0IG1ldGhvZCB0byBkZXRlcm1pbmVcblx0XHQvLyB3aGljaCB2YWx1ZSB0byByZXR1cm4sIHJlc3BlY3RpdmVseSBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIFRoZSBlbnRpcmUgY2FjaGUgb2JqZWN0XG5cdFx0Ly8gICAyLiBUaGUgZGF0YSBzdG9yZWQgYXQgdGhlIGtleVxuXHRcdC8vXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fFxuXHRcdFx0XHQoICgga2V5ICYmIHR5cGVvZiBrZXkgPT09IFwic3RyaW5nXCIgKSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkgKSB7XG5cblx0XHRcdHJldHVybiB0aGlzLmdldCggb3duZXIsIGtleSApO1xuXHRcdH1cblxuXHRcdC8vIFdoZW4gdGhlIGtleSBpcyBub3QgYSBzdHJpbmcsIG9yIGJvdGggYSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly8gYXJlIHNwZWNpZmllZCwgc2V0IG9yIGV4dGVuZCAoZXhpc3Rpbmcgb2JqZWN0cykgd2l0aCBlaXRoZXI6XG5cdFx0Ly9cblx0XHQvLyAgIDEuIEFuIG9iamVjdCBvZiBwcm9wZXJ0aWVzXG5cdFx0Ly8gICAyLiBBIGtleSBhbmQgdmFsdWVcblx0XHQvL1xuXHRcdHRoaXMuc2V0KCBvd25lciwga2V5LCB2YWx1ZSApO1xuXG5cdFx0Ly8gU2luY2UgdGhlIFwic2V0XCIgcGF0aCBjYW4gaGF2ZSB0d28gcG9zc2libGUgZW50cnkgcG9pbnRzXG5cdFx0Ly8gcmV0dXJuIHRoZSBleHBlY3RlZCBkYXRhIGJhc2VkIG9uIHdoaWNoIHBhdGggd2FzIHRha2VuWypdXG5cdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgPyB2YWx1ZSA6IGtleTtcblx0fSxcblx0cmVtb3ZlOiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHR2YXIgaSxcblx0XHRcdGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXG5cdFx0aWYgKCBjYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICgga2V5ICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQgYXJyYXkgb3Igc3BhY2Ugc2VwYXJhdGVkIHN0cmluZyBvZiBrZXlzXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIGtleSApICkge1xuXG5cdFx0XHRcdC8vIElmIGtleSBpcyBhbiBhcnJheSBvZiBrZXlzLi4uXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzZXQgY2FtZWxDYXNlIGtleXMsIHNvIHJlbW92ZSB0aGF0LlxuXHRcdFx0XHRrZXkgPSBrZXkubWFwKCBjYW1lbENhc2UgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGtleSA9IGNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0gY2FtZWxDYXNlKCBuYW1lLnNsaWNlKCA1ICkgKTtcblx0XHRcdFx0XHRcdFx0XHRkYXRhQXR0ciggZWxlbSwgbmFtZSwgZGF0YVsgbmFtZSBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0cyBtdWx0aXBsZSB2YWx1ZXNcblx0XHRpZiAoIHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZGF0YTtcblxuXHRcdFx0Ly8gVGhlIGNhbGxpbmcgalF1ZXJ5IG9iamVjdCAoZWxlbWVudCBtYXRjaGVzKSBpcyBub3QgZW1wdHlcblx0XHRcdC8vIChhbmQgdGhlcmVmb3JlIGhhcyBhbiBlbGVtZW50IGFwcGVhcnMgYXQgdGhpc1sgMCBdKSBhbmQgdGhlXG5cdFx0XHQvLyBgdmFsdWVgIHBhcmFtZXRlciB3YXMgbm90IHVuZGVmaW5lZC4gQW4gZW1wdHkgalF1ZXJ5IG9iamVjdFxuXHRcdFx0Ly8gd2lsbCByZXN1bHQgaW4gYHVuZGVmaW5lZGAgZm9yIGVsZW0gPSB0aGlzWyAwIF0gd2hpY2ggd2lsbFxuXHRcdFx0Ly8gdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFuIGF0dGVtcHQgdG8gcmVhZCBhIGRhdGEgY2FjaGUgaXMgbWFkZS5cblx0XHRcdGlmICggZWxlbSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gZ2V0IGRhdGEgZnJvbSB0aGUgY2FjaGVcblx0XHRcdFx0Ly8gVGhlIGtleSB3aWxsIGFsd2F5cyBiZSBjYW1lbENhc2VkIGluIERhdGFcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBcImRpc2NvdmVyXCIgdGhlIGRhdGEgaW5cblx0XHRcdFx0Ly8gSFRNTDUgY3VzdG9tIGRhdGEtKiBhdHRyc1xuXHRcdFx0XHRkYXRhID0gZGF0YUF0dHIoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFdlIHRyaWVkIHJlYWxseSBoYXJkLCBidXQgdGhlIGRhdGEgZG9lc24ndCBleGlzdC5cblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZXQgdGhlIGRhdGEuLi5cblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHN0b3JlIHRoZSBjYW1lbENhc2VkIGtleVxuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSwgdmFsdWUgKTtcblx0XHRcdH0gKTtcblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEsIG51bGwsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0ZGF0YVVzZXIucmVtb3ZlKCB0aGlzLCBrZXkgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgcXVldWU7XG5cblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHR0eXBlID0gKCB0eXBlIHx8IFwiZnhcIiApICsgXCJxdWV1ZVwiO1xuXHRcdFx0cXVldWUgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0Ly8gU3BlZWQgdXAgZGVxdWV1ZSBieSBnZXR0aW5nIG91dCBxdWlja2x5IGlmIHRoaXMgaXMganVzdCBhIGxvb2t1cFxuXHRcdFx0aWYgKCBkYXRhICkge1xuXHRcdFx0XHRpZiAoICFxdWV1ZSB8fCBBcnJheS5pc0FycmF5KCBkYXRhICkgKSB7XG5cdFx0XHRcdFx0cXVldWUgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIHR5cGUsIGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEgKSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGRhdGEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHF1ZXVlIHx8IFtdO1xuXHRcdH1cblx0fSxcblxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIGVsZW0sIHR5cGUgKSxcblx0XHRcdHN0YXJ0TGVuZ3RoID0gcXVldWUubGVuZ3RoLFxuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpLFxuXHRcdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIHR5cGUgKSxcblx0XHRcdG5leHQgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIGVsZW0sIHR5cGUgKTtcblx0XHRcdH07XG5cblx0XHQvLyBJZiB0aGUgZnggcXVldWUgaXMgZGVxdWV1ZWQsIGFsd2F5cyByZW1vdmUgdGhlIHByb2dyZXNzIHNlbnRpbmVsXG5cdFx0aWYgKCBmbiA9PT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRzdGFydExlbmd0aC0tO1xuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cblx0XHRcdC8vIEFkZCBhIHByb2dyZXNzIHNlbnRpbmVsIHRvIHByZXZlbnQgdGhlIGZ4IHF1ZXVlIGZyb20gYmVpbmdcblx0XHRcdC8vIGF1dG9tYXRpY2FsbHkgZGVxdWV1ZWRcblx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICkge1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KCBcImlucHJvZ3Jlc3NcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDbGVhciB1cCB0aGUgbGFzdCBxdWV1ZSBzdG9wIGZ1bmN0aW9uXG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdGZuLmNhbGwoIGVsZW0sIG5leHQsIGhvb2tzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhc3RhcnRMZW5ndGggJiYgaG9va3MgKSB7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlKCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8vIE5vdCBwdWJsaWMgLSBnZW5lcmF0ZSBhIHF1ZXVlSG9va3Mgb2JqZWN0LCBvciByZXR1cm4gdGhlIGN1cnJlbnQgb25lXG5cdF9xdWV1ZUhvb2tzOiBmdW5jdGlvbiggZWxlbSwgdHlwZSApIHtcblx0XHR2YXIga2V5ID0gdHlwZSArIFwicXVldWVIb29rc1wiO1xuXHRcdHJldHVybiBkYXRhUHJpdi5nZXQoIGVsZW0sIGtleSApIHx8IGRhdGFQcml2LmFjY2VzcyggZWxlbSwga2V5LCB7XG5cdFx0XHRlbXB0eTogalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICkuYWRkKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBbIHR5cGUgKyBcInF1ZXVlXCIsIGtleSBdICk7XG5cdFx0XHR9IClcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHNldHRlciA9IDI7XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZGF0YSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gXCJmeFwiO1xuXHRcdFx0c2V0dGVyLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBhcmd1bWVudHMubGVuZ3RoIDwgc2V0dGVyICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5xdWV1ZSggdGhpc1sgMCBdLCB0eXBlICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGEgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzIDpcblx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgZGF0YSApO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSBhIGhvb2tzIGZvciB0aGlzIHF1ZXVlXG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRcdGlmICggdHlwZSA9PT0gXCJmeFwiICYmIHF1ZXVlWyAwIF0gIT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0fSxcblx0ZGVxdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdH0gKTtcblx0fSxcblx0Y2xlYXJRdWV1ZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHR9LFxuXG5cdC8vIEdldCBhIHByb21pc2UgcmVzb2x2ZWQgd2hlbiBxdWV1ZXMgb2YgYSBjZXJ0YWluIHR5cGVcblx0Ly8gYXJlIGVtcHRpZWQgKGZ4IGlzIHRoZSB0eXBlIGJ5IGRlZmF1bHQpXG5cdHByb21pc2U6IGZ1bmN0aW9uKCB0eXBlLCBvYmogKSB7XG5cdFx0dmFyIHRtcCxcblx0XHRcdGNvdW50ID0gMSxcblx0XHRcdGRlZmVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRlbGVtZW50cyA9IHRoaXMsXG5cdFx0XHRpID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRyZXNvbHZlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggISggLS1jb3VudCApICkge1xuXHRcdFx0XHRcdGRlZmVyLnJlc29sdmVXaXRoKCBlbGVtZW50cywgWyBlbGVtZW50cyBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0b2JqID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG1wID0gZGF0YVByaXYuZ2V0KCBlbGVtZW50c1sgaSBdLCB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgKTtcblx0XHRcdGlmICggdG1wICYmIHRtcC5lbXB0eSApIHtcblx0XHRcdFx0Y291bnQrKztcblx0XHRcdFx0dG1wLmVtcHR5LmFkZCggcmVzb2x2ZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXNvbHZlKCk7XG5cdFx0cmV0dXJuIGRlZmVyLnByb21pc2UoIG9iaiApO1xuXHR9XG59ICk7XG52YXIgcG51bSA9ICggL1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8gKS5zb3VyY2U7XG5cbnZhciByY3NzTnVtID0gbmV3IFJlZ0V4cCggXCJeKD86KFsrLV0pPXwpKFwiICsgcG51bSArIFwiKShbYS16JV0qKSRcIiwgXCJpXCIgKTtcblxuXG52YXIgY3NzRXhwYW5kID0gWyBcIlRvcFwiLCBcIlJpZ2h0XCIsIFwiQm90dG9tXCIsIFwiTGVmdFwiIF07XG5cbnZhciBkb2N1bWVudEVsZW1lbnQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblxuXG5cdHZhciBpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblx0XHR9LFxuXHRcdGNvbXBvc2VkID0geyBjb21wb3NlZDogdHJ1ZSB9O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSssIEVkZ2UgMTIgLSAxOCssIGlPUyAxMC4wIC0gMTAuMiBvbmx5XG5cdC8vIENoZWNrIGF0dGFjaG1lbnQgYWNyb3NzIHNoYWRvdyBET00gYm91bmRhcmllcyB3aGVuIHBvc3NpYmxlIChnaC0zNTA0KVxuXHQvLyBTdXBwb3J0OiBpT1MgMTAuMC0xMC4yIG9ubHlcblx0Ly8gRWFybHkgaU9TIDEwIHZlcnNpb25zIHN1cHBvcnQgYGF0dGFjaFNoYWRvd2AgYnV0IG5vdCBgZ2V0Um9vdE5vZGVgLFxuXHQvLyBsZWFkaW5nIHRvIGVycm9ycy4gV2UgbmVlZCB0byBjaGVjayBmb3IgYGdldFJvb3ROb2RlYC5cblx0aWYgKCBkb2N1bWVudEVsZW1lbnQuZ2V0Um9vdE5vZGUgKSB7XG5cdFx0aXNBdHRhY2hlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRSb290Tm9kZSggY29tcG9zZWQgKSA9PT0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdH07XG5cdH1cbnZhciBpc0hpZGRlbldpdGhpblRyZWUgPSBmdW5jdGlvbiggZWxlbSwgZWwgKSB7XG5cblx0XHQvLyBpc0hpZGRlbldpdGhpblRyZWUgbWlnaHQgYmUgY2FsbGVkIGZyb20galF1ZXJ5I2ZpbHRlciBmdW5jdGlvbjtcblx0XHQvLyBpbiB0aGF0IGNhc2UsIGVsZW1lbnQgd2lsbCBiZSBzZWNvbmQgYXJndW1lbnRcblx0XHRlbGVtID0gZWwgfHwgZWxlbTtcblxuXHRcdC8vIElubGluZSBzdHlsZSB0cnVtcHMgYWxsXG5cdFx0cmV0dXJuIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJub25lXCIgfHxcblx0XHRcdGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJlxuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGNoZWNrIGNvbXB1dGVkIHN0eWxlXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDMgLSA0NVxuXHRcdFx0Ly8gRGlzY29ubmVjdGVkIGVsZW1lbnRzIGNhbiBoYXZlIGNvbXB1dGVkIGRpc3BsYXk6IG5vbmUsIHNvIGZpcnN0IGNvbmZpcm0gdGhhdCBlbGVtIGlzXG5cdFx0XHQvLyBpbiB0aGUgZG9jdW1lbnQuXG5cdFx0XHRpc0F0dGFjaGVkKCBlbGVtICkgJiZcblxuXHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSA9PT0gXCJub25lXCI7XG5cdH07XG5cblxuXG5mdW5jdGlvbiBhZGp1c3RDU1MoIGVsZW0sIHByb3AsIHZhbHVlUGFydHMsIHR3ZWVuICkge1xuXHR2YXIgYWRqdXN0ZWQsIHNjYWxlLFxuXHRcdG1heEl0ZXJhdGlvbnMgPSAyMCxcblx0XHRjdXJyZW50VmFsdWUgPSB0d2VlbiA/XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmN1cigpO1xuXHRcdFx0fSA6XG5cdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AsIFwiXCIgKTtcblx0XHRcdH0sXG5cdFx0aW5pdGlhbCA9IGN1cnJlbnRWYWx1ZSgpLFxuXHRcdHVuaXQgPSB2YWx1ZVBhcnRzICYmIHZhbHVlUGFydHNbIDMgXSB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKSxcblxuXHRcdC8vIFN0YXJ0aW5nIHZhbHVlIGNvbXB1dGF0aW9uIGlzIHJlcXVpcmVkIGZvciBwb3RlbnRpYWwgdW5pdCBtaXNtYXRjaGVzXG5cdFx0aW5pdGlhbEluVW5pdCA9IGVsZW0ubm9kZVR5cGUgJiZcblx0XHRcdCggalF1ZXJ5LmNzc051bWJlclsgcHJvcCBdIHx8IHVuaXQgIT09IFwicHhcIiAmJiAraW5pdGlhbCApICYmXG5cdFx0XHRyY3NzTnVtLmV4ZWMoIGpRdWVyeS5jc3MoIGVsZW0sIHByb3AgKSApO1xuXG5cdGlmICggaW5pdGlhbEluVW5pdCAmJiBpbml0aWFsSW5Vbml0WyAzIF0gIT09IHVuaXQgKSB7XG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0XHQvLyBIYWx2ZSB0aGUgaXRlcmF0aW9uIHRhcmdldCB2YWx1ZSB0byBwcmV2ZW50IGludGVyZmVyZW5jZSBmcm9tIENTUyB1cHBlciBib3VuZHMgKGdoLTIxNDQpXG5cdFx0aW5pdGlhbCA9IGluaXRpYWwgLyAyO1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHR3aGlsZSAoIG1heEl0ZXJhdGlvbnMtLSApIHtcblxuXHRcdFx0Ly8gRXZhbHVhdGUgYW5kIHVwZGF0ZSBvdXIgYmVzdCBndWVzcyAoZG91YmxpbmcgZ3Vlc3NlcyB0aGF0IHplcm8gb3V0KS5cblx0XHRcdC8vIEZpbmlzaCBpZiB0aGUgc2NhbGUgZXF1YWxzIG9yIGNyb3NzZXMgMSAobWFraW5nIHRoZSBvbGQqbmV3IHByb2R1Y3Qgbm9uLXBvc2l0aXZlKS5cblx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblx0XHRcdGlmICggKCAxIC0gc2NhbGUgKSAqICggMSAtICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgfHwgMC41ICkgKSA8PSAwICkge1xuXHRcdFx0XHRtYXhJdGVyYXRpb25zID0gMDtcblx0XHRcdH1cblx0XHRcdGluaXRpYWxJblVuaXQgPSBpbml0aWFsSW5Vbml0IC8gc2NhbGU7XG5cblx0XHR9XG5cblx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAqIDI7XG5cdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHdlIHVwZGF0ZSB0aGUgdHdlZW4gcHJvcGVydGllcyBsYXRlciBvblxuXHRcdHZhbHVlUGFydHMgPSB2YWx1ZVBhcnRzIHx8IFtdO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0qKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfF5tb2R1bGUkfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdC8vIElFIDw9OSByZXBsYWNlcyA8b3B0aW9uPiB0YWdzIHdpdGggdGhlaXIgY29udGVudHMgd2hlbiBpbnNlcnRlZCBvdXRzaWRlIG9mXG5cdC8vIHRoZSBzZWxlY3QgZWxlbWVudC5cblx0ZGl2LmlubmVySFRNTCA9IFwiPG9wdGlvbj48L29wdGlvbj5cIjtcblx0c3VwcG9ydC5vcHRpb24gPSAhIWRpdi5sYXN0Q2hpbGQ7XG59ICkoKTtcblxuXG4vLyBXZSBoYXZlIHRvIGNsb3NlIHRoZXNlIHRhZ3MgdG8gc3VwcG9ydCBYSFRNTCAoIzEzMjAwKVxudmFyIHdyYXBNYXAgPSB7XG5cblx0Ly8gWEhUTUwgcGFyc2VycyBkbyBub3QgbWFnaWNhbGx5IGluc2VydCBlbGVtZW50cyBpbiB0aGVcblx0Ly8gc2FtZSB3YXkgdGhhdCB0YWcgc291cCBwYXJzZXJzIGRvLiBTbyB3ZSBjYW5ub3Qgc2hvcnRlblxuXHQvLyB0aGlzIGJ5IG9taXR0aW5nIDx0Ym9keT4gb3Igb3RoZXIgcmVxdWlyZWQgZWxlbWVudHMuXG5cdHRoZWFkOiBbIDEsIFwiPHRhYmxlPlwiLCBcIjwvdGFibGU+XCIgXSxcblx0Y29sOiBbIDIsIFwiPHRhYmxlPjxjb2xncm91cD5cIiwgXCI8L2NvbGdyb3VwPjwvdGFibGU+XCIgXSxcblx0dHI6IFsgMiwgXCI8dGFibGU+PHRib2R5PlwiLCBcIjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXHR0ZDogWyAzLCBcIjx0YWJsZT48dGJvZHk+PHRyPlwiLCBcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiIF0sXG5cblx0X2RlZmF1bHQ6IFsgMCwgXCJcIiwgXCJcIiBdXG59O1xuXG53cmFwTWFwLnRib2R5ID0gd3JhcE1hcC50Zm9vdCA9IHdyYXBNYXAuY29sZ3JvdXAgPSB3cmFwTWFwLmNhcHRpb24gPSB3cmFwTWFwLnRoZWFkO1xud3JhcE1hcC50aCA9IHdyYXBNYXAudGQ7XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5pZiAoICFzdXBwb3J0Lm9wdGlvbiApIHtcblx0d3JhcE1hcC5vcHRncm91cCA9IHdyYXBNYXAub3B0aW9uID0gWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdO1xufVxuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGF0dGFjaGVkLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggdG9UeXBlKCBlbGVtICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgZWxlbS5ub2RlVHlwZSA/IFsgZWxlbSBdIDogZWxlbSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IG5vbi1odG1sIGludG8gYSB0ZXh0IG5vZGVcblx0XHRcdH0gZWxzZSBpZiAoICFyaHRtbC50ZXN0KCBlbGVtICkgKSB7XG5cdFx0XHRcdG5vZGVzLnB1c2goIGNvbnRleHQuY3JlYXRlVGV4dE5vZGUoIGVsZW0gKSApO1xuXG5cdFx0XHQvLyBDb252ZXJ0IGh0bWwgaW50byBET00gbm9kZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRtcCA9IHRtcCB8fCBmcmFnbWVudC5hcHBlbmRDaGlsZCggY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKTtcblxuXHRcdFx0XHQvLyBEZXNlcmlhbGl6ZSBhIHN0YW5kYXJkIHJlcHJlc2VudGF0aW9uXG5cdFx0XHRcdHRhZyA9ICggcnRhZ05hbWUuZXhlYyggZWxlbSApIHx8IFsgXCJcIiwgXCJcIiBdIClbIDEgXS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHR3cmFwID0gd3JhcE1hcFsgdGFnIF0gfHwgd3JhcE1hcC5fZGVmYXVsdDtcblx0XHRcdFx0dG1wLmlubmVySFRNTCA9IHdyYXBbIDEgXSArIGpRdWVyeS5odG1sUHJlZmlsdGVyKCBlbGVtICkgKyB3cmFwWyAyIF07XG5cblx0XHRcdFx0Ly8gRGVzY2VuZCB0aHJvdWdoIHdyYXBwZXJzIHRvIHRoZSByaWdodCBjb250ZW50XG5cdFx0XHRcdGogPSB3cmFwWyAwIF07XG5cdFx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRcdHRtcCA9IHRtcC5sYXN0Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCB0bXAuY2hpbGROb2RlcyApO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHRoZSB0b3AtbGV2ZWwgY29udGFpbmVyXG5cdFx0XHRcdHRtcCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIHRoZSBjcmVhdGVkIG5vZGVzIGFyZSBvcnBoYW5lZCAoIzEyMzkyKVxuXHRcdFx0XHR0bXAudGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJlbW92ZSB3cmFwcGVyIGZyb20gZnJhZ21lbnRcblx0ZnJhZ21lbnQudGV4dENvbnRlbnQgPSBcIlwiO1xuXG5cdGkgPSAwO1xuXHR3aGlsZSAoICggZWxlbSA9IG5vZGVzWyBpKysgXSApICkge1xuXG5cdFx0Ly8gU2tpcCBlbGVtZW50cyBhbHJlYWR5IGluIHRoZSBjb250ZXh0IGNvbGxlY3Rpb24gKHRyYWMtNDA4Nylcblx0XHRpZiAoIHNlbGVjdGlvbiAmJiBqUXVlcnkuaW5BcnJheSggZWxlbSwgc2VsZWN0aW9uICkgPiAtMSApIHtcblx0XHRcdGlmICggaWdub3JlZCApIHtcblx0XHRcdFx0aWdub3JlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRhdHRhY2hlZCA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggYXR0YWNoZWQgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbnZhciBydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMStcbi8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzLCBleGNlcHQgd2hlbiB0aGV5IGFyZSBuby1vcC5cbi8vIFNvIGV4cGVjdCBmb2N1cyB0byBiZSBzeW5jaHJvbm91cyB3aGVuIHRoZSBlbGVtZW50IGlzIGFscmVhZHkgYWN0aXZlLFxuLy8gYW5kIGJsdXIgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeSBhY3RpdmUuXG4vLyAoZm9jdXMgYW5kIGJsdXIgYXJlIGFsd2F5cyBzeW5jaHJvbm91cyBpbiBvdGhlciBzdXBwb3J0ZWQgYnJvd3NlcnMsXG4vLyB0aGlzIGp1c3QgZGVmaW5lcyB3aGVuIHdlIGNhbiBjb3VudCBvbiBpdCkuXG5mdW5jdGlvbiBleHBlY3RTeW5jKCBlbGVtLCB0eXBlICkge1xuXHRyZXR1cm4gKCBlbGVtID09PSBzYWZlQWN0aXZlRWxlbWVudCgpICkgPT09ICggdHlwZSA9PT0gXCJmb2N1c1wiICk7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBBY2Nlc3NpbmcgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBjYW4gdGhyb3cgdW5leHBlY3RlZGx5XG4vLyBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzOTNcbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gT25seSBhdHRhY2ggZXZlbnRzIHRvIG9iamVjdHMgdGhhdCBhY2NlcHQgZGF0YVxuXHRcdGlmICggIWFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSBPYmplY3QuY3JlYXRlKCBudWxsICk7XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cblx0XHRcdC8vIE1ha2UgYSB3cml0YWJsZSBqUXVlcnkuRXZlbnQgZnJvbSB0aGUgbmF0aXZlIGV2ZW50IG9iamVjdFxuXHRcdFx0ZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApLFxuXG5cdFx0XHRoYW5kbGVycyA9IChcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwgT2JqZWN0LmNyZWF0ZSggbnVsbCApXG5cdFx0XHQpWyBldmVudC50eXBlIF0gfHwgW10sXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGV2ZW50LnR5cGUgXSB8fCB7fTtcblxuXHRcdC8vIFVzZSB0aGUgZml4LWVkIGpRdWVyeS5FdmVudCByYXRoZXIgdGhhbiB0aGUgKHJlYWQtb25seSkgbmF0aXZlIGV2ZW50XG5cdFx0YXJnc1sgMCBdID0gZXZlbnQ7XG5cblx0XHRmb3IgKCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKyApIHtcblx0XHRcdGFyZ3NbIGkgXSA9IGFyZ3VtZW50c1sgaSBdO1xuXHRcdH1cblxuXHRcdGV2ZW50LmRlbGVnYXRlVGFyZ2V0ID0gdGhpcztcblxuXHRcdC8vIENhbGwgdGhlIHByZURpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZSwgYW5kIGxldCBpdCBiYWlsIGlmIGRlc2lyZWRcblx0XHRpZiAoIHNwZWNpYWwucHJlRGlzcGF0Y2ggJiYgc3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgaGFuZGxlcnNcblx0XHRoYW5kbGVyUXVldWUgPSBqUXVlcnkuZXZlbnQuaGFuZGxlcnMuY2FsbCggdGhpcywgZXZlbnQsIGhhbmRsZXJzICk7XG5cblx0XHQvLyBSdW4gZGVsZWdhdGVzIGZpcnN0OyB0aGV5IG1heSB3YW50IHRvIHN0b3AgcHJvcGFnYXRpb24gYmVuZWF0aCB1c1xuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBtYXRjaGVkID0gaGFuZGxlclF1ZXVlWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0ZXZlbnQuY3VycmVudFRhcmdldCA9IG1hdGNoZWQuZWxlbTtcblxuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggaGFuZGxlT2JqID0gbWF0Y2hlZC5oYW5kbGVyc1sgaisrIF0gKSAmJlxuXHRcdFx0XHQhZXZlbnQuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGUgZXZlbnQgaXMgbmFtZXNwYWNlZCwgdGhlbiBlYWNoIGhhbmRsZXIgaXMgb25seSBpbnZva2VkIGlmIGl0IGlzXG5cdFx0XHRcdC8vIHNwZWNpYWxseSB1bml2ZXJzYWwgb3IgaXRzIG5hbWVzcGFjZXMgYXJlIGEgc3VwZXJzZXQgb2YgdGhlIGV2ZW50J3MuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgaGFuZGxlT2JqLm5hbWVzcGFjZSA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHRldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBob29rKCB0aGlzLm9yaWdpbmFsRXZlbnQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gOlxuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgODYrXG5cdFx0XHRcdFx0XHQvLyBJbiBDaHJvbWUsIGlmIGFuIGVsZW1lbnQgaGF2aW5nIGEgZm9jdXNvdXQgaGFuZGxlciBpcyBibHVycmVkIGJ5XG5cdFx0XHRcdFx0XHQvLyBjbGlja2luZyBvdXRzaWRlIG9mIGl0LCBpdCBpbnZva2VzIHRoZSBoYW5kbGVyIHN5bmNocm9ub3VzbHkuIElmXG5cdFx0XHRcdFx0XHQvLyB0aGF0IGhhbmRsZXIgY2FsbHMgYC5yZW1vdmUoKWAgb24gdGhlIGVsZW1lbnQsIHRoZSBkYXRhIGlzIGNsZWFyZWQsXG5cdFx0XHRcdFx0XHQvLyBsZWF2aW5nIGByZXN1bHRgIHVuZGVmaW5lZC4gV2UgbmVlZCB0byBndWFyZCBhZ2FpbnN0IHRoaXMuXG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0ICYmIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblx0d2hpY2g6IHRydWVcbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gU3VwcHJlc3MgbmF0aXZlIGZvY3VzIG9yIGJsdXIgYXMgaXQncyBhbHJlYWR5IGJlaW5nIGZpcmVkXG5cdFx0Ly8gaW4gbGV2ZXJhZ2VOYXRpdmUuXG5cdFx0X2RlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdGRlbGVnYXRlVHlwZTogZGVsZWdhdGVUeXBlXG5cdH07XG59ICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTMgb25seVxuXHQvLyBJbiBJRS9FZGdlIHVzaW5nIHJlZ2V4IGdyb3VwcyBoZXJlIGNhdXNlcyBzZXZlcmUgc2xvd2Rvd25zLlxuXHQvLyBTZWUgaHR0cHM6Ly9jb25uZWN0Lm1pY3Jvc29mdC5jb20vSUUvZmVlZGJhY2svZGV0YWlscy8xNzM2NTEyL1xuXHRybm9Jbm5lcmh0bWwgPSAvPHNjcmlwdHw8c3R5bGV8PGxpbmsvaSxcblxuXHQvLyBjaGVja2VkPVwiY2hlY2tlZFwiIG9yIGNoZWNrZWRcblx0cmNoZWNrZWQgPSAvY2hlY2tlZFxccyooPzpbXj1dfD1cXHMqLmNoZWNrZWQuKS9pLFxuXHRyY2xlYW5TY3JpcHQgPSAvXlxccyo8ISg/OlxcW0NEQVRBXFxbfC0tKXwoPzpcXF1cXF18LS0pPlxccyokL2c7XG5cbi8vIFByZWZlciBhIHRib2R5IG92ZXIgaXRzIHBhcmVudCB0YWJsZSBmb3IgY29udGFpbmluZyBuZXcgcm93c1xuZnVuY3Rpb24gbWFuaXB1bGF0aW9uVGFyZ2V0KCBlbGVtLCBjb250ZW50ICkge1xuXHRpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRhYmxlXCIgKSAmJlxuXHRcdG5vZGVOYW1lKCBjb250ZW50Lm5vZGVUeXBlICE9PSAxMSA/IGNvbnRlbnQgOiBjb250ZW50LmZpcnN0Q2hpbGQsIFwidHJcIiApICkge1xuXG5cdFx0cmV0dXJuIGpRdWVyeSggZWxlbSApLmNoaWxkcmVuKCBcInRib2R5XCIgKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0aWYgKCAoIGVsZW0udHlwZSB8fCBcIlwiICkuc2xpY2UoIDAsIDUgKSA9PT0gXCJ0cnVlL1wiICkge1xuXHRcdGVsZW0udHlwZSA9IGVsZW0udHlwZS5zbGljZSggNSApO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5nZXQoIHNyYyApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkZXN0LCBcImhhbmRsZSBldmVudHNcIiApO1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gZmxhdCggYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSwgZG9jICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdERPTUV2YWwoIG5vZGUudGV4dENvbnRlbnQucmVwbGFjZSggcmNsZWFuU2NyaXB0LCBcIlwiICksIG5vZGUsIGRvYyApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBjb2xsZWN0aW9uO1xufVxuXG5mdW5jdGlvbiByZW1vdmUoIGVsZW0sIHNlbGVjdG9yLCBrZWVwRGF0YSApIHtcblx0dmFyIG5vZGUsXG5cdFx0bm9kZXMgPSBzZWxlY3RvciA/IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBlbGVtICkgOiBlbGVtLFxuXHRcdGkgPSAwO1xuXG5cdGZvciAoIDsgKCBub2RlID0gbm9kZXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRpZiAoICFrZWVwRGF0YSAmJiBub2RlLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBub2RlICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG5vZGUucGFyZW50Tm9kZSApIHtcblx0XHRcdGlmICgga2VlcERhdGEgJiYgaXNBdHRhY2hlZCggbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWw7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGlzQXR0YWNoZWQoIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2sgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5jYWxsKCBlbGVtICk7XG5cblx0Ly8gUmV2ZXJ0IHRoZSBvbGQgdmFsdWVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvbGRbIG5hbWUgXTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59O1xuXG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlVHJEaW1lbnNpb25zVmFsLCByZWxpYWJsZU1hcmdpbkxlZnRWYWwsXG5cdFx0Y29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLFxuXHRcdGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHQvLyBGaW5pc2ggZWFybHkgaW4gbGltaXRlZCAobm9uLWJyb3dzZXIpIGVudmlyb25tZW50c1xuXHRpZiAoICFkaXYuc3R5bGUgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHQvLyBTdHlsZSBvZiBjbG9uZWQgZWxlbWVudCBhZmZlY3RzIHNvdXJjZSBlbGVtZW50IGNsb25lZCAoIzg5MDgpXG5cdGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiY29udGVudC1ib3hcIjtcblx0ZGl2LmNsb25lTm9kZSggdHJ1ZSApLnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJcIjtcblx0c3VwcG9ydC5jbGVhckNsb25lU3R5bGUgPSBkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPT09IFwiY29udGVudC1ib3hcIjtcblxuXHRqUXVlcnkuZXh0ZW5kKCBzdXBwb3J0LCB7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBib3hTaXppbmdSZWxpYWJsZVZhbDtcblx0XHR9LFxuXHRcdHBpeGVsQm94U3R5bGVzOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxCb3hTdHlsZXNWYWw7XG5cdFx0fSxcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9LFxuXHRcdHNjcm9sbGJveFNpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBzY3JvbGxib3hTaXplVmFsO1xuXHRcdH0sXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBCZWhhdmlvciBpbiBJRSA5IGlzIG1vcmUgc3VidGxlIHRoYW4gaW4gbmV3ZXIgdmVyc2lvbnMgJiBpdCBwYXNzZXNcblx0XHQvLyBzb21lIHZlcnNpb25zIG9mIHRoaXMgdGVzdDsgbWFrZSBzdXJlIG5vdCB0byBtYWtlIGl0IHBhc3MgdGhlcmUhXG5cdFx0Ly9cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDcwK1xuXHRcdC8vIE9ubHkgRmlyZWZveCBpbmNsdWRlcyBib3JkZXIgd2lkdGhzXG5cdFx0Ly8gaW4gY29tcHV0ZWQgZGltZW5zaW9ucy4gKGdoLTQ1MjkpXG5cdFx0cmVsaWFibGVUckRpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRhYmxlLCB0ciwgdHJDaGlsZCwgdHJTdHlsZTtcblx0XHRcdGlmICggcmVsaWFibGVUckRpbWVuc2lvbnNWYWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dGFibGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRhYmxlXCIgKTtcblx0XHRcdFx0dHIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInRyXCIgKTtcblx0XHRcdFx0dHJDaGlsZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKTtcblxuXHRcdFx0XHR0YWJsZS5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O2JvcmRlci1jb2xsYXBzZTpzZXBhcmF0ZVwiO1xuXHRcdFx0XHR0ci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MXB4IHNvbGlkXCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDg2K1xuXHRcdFx0XHQvLyBIZWlnaHQgc2V0IHRocm91Z2ggY3NzVGV4dCBkb2VzIG5vdCBnZXQgYXBwbGllZC5cblx0XHRcdFx0Ly8gQ29tcHV0ZWQgaGVpZ2h0IHRoZW4gY29tZXMgYmFjayBhcyAwLlxuXHRcdFx0XHR0ci5zdHlsZS5oZWlnaHQgPSBcIjFweFwiO1xuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmhlaWdodCA9IFwiOXB4XCI7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA4IENocm9tZSA4Nitcblx0XHRcdFx0Ly8gSW4gb3VyIGJvZHlCYWNrZ3JvdW5kLmh0bWwgaWZyYW1lLFxuXHRcdFx0XHQvLyBkaXNwbGF5IGZvciBhbGwgZGl2IGVsZW1lbnRzIGlzIHNldCB0byBcImlubGluZVwiLFxuXHRcdFx0XHQvLyB3aGljaCBjYXVzZXMgYSBwcm9ibGVtIG9ubHkgaW4gQW5kcm9pZCA4IENocm9tZSA4Ni5cblx0XHRcdFx0Ly8gRW5zdXJpbmcgdGhlIGRpdiBpcyBkaXNwbGF5OiBibG9ja1xuXHRcdFx0XHQvLyBnZXRzIGFyb3VuZCB0aGlzIGlzc3VlLlxuXHRcdFx0XHR0ckNoaWxkLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cblx0XHRcdFx0ZG9jdW1lbnRFbGVtZW50XG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0YWJsZSApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ciApXG5cdFx0XHRcdFx0LmFwcGVuZENoaWxkKCB0ckNoaWxkICk7XG5cblx0XHRcdFx0dHJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKCB0ciApO1xuXHRcdFx0XHRyZWxpYWJsZVRyRGltZW5zaW9uc1ZhbCA9ICggcGFyc2VJbnQoIHRyU3R5bGUuaGVpZ2h0LCAxMCApICtcblx0XHRcdFx0XHRwYXJzZUludCggdHJTdHlsZS5ib3JkZXJUb3BXaWR0aCwgMTAgKSArXG5cdFx0XHRcdFx0cGFyc2VJbnQoIHRyU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgsIDEwICkgKSA9PT0gdHIub2Zmc2V0SGVpZ2h0O1xuXG5cdFx0XHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggdGFibGUgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZWxpYWJsZVRyRGltZW5zaW9uc1ZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFpc0F0dGFjaGVkKCBlbGVtICkgKSB7XG5cdFx0XHRyZXQgPSBqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBBIHRyaWJ1dGUgdG8gdGhlIFwiYXdlc29tZSBoYWNrIGJ5IERlYW4gRWR3YXJkc1wiXG5cdFx0Ly8gQW5kcm9pZCBCcm93c2VyIHJldHVybnMgcGVyY2VudGFnZSBmb3Igc29tZSB2YWx1ZXMsXG5cdFx0Ly8gYnV0IHdpZHRoIHNlZW1zIHRvIGJlIHJlbGlhYmx5IHBpeGVscy5cblx0XHQvLyBUaGlzIGlzIGFnYWluc3QgdGhlIENTU09NIGRyYWZ0IHNwZWM6XG5cdFx0Ly8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzc29tLyNyZXNvbHZlZC12YWx1ZXNcblx0XHRpZiAoICFzdXBwb3J0LnBpeGVsQm94U3R5bGVzKCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJib3hTdHlsZS50ZXN0KCBuYW1lICkgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBvcmlnaW5hbCB2YWx1ZXNcblx0XHRcdHdpZHRoID0gc3R5bGUud2lkdGg7XG5cdFx0XHRtaW5XaWR0aCA9IHN0eWxlLm1pbldpZHRoO1xuXHRcdFx0bWF4V2lkdGggPSBzdHlsZS5tYXhXaWR0aDtcblxuXHRcdFx0Ly8gUHV0IGluIHRoZSBuZXcgdmFsdWVzIHRvIGdldCBhIGNvbXB1dGVkIHZhbHVlIG91dFxuXHRcdFx0c3R5bGUubWluV2lkdGggPSBzdHlsZS5tYXhXaWR0aCA9IHN0eWxlLndpZHRoID0gcmV0O1xuXHRcdFx0cmV0ID0gY29tcHV0ZWQud2lkdGg7XG5cblx0XHRcdC8vIFJldmVydCB0aGUgY2hhbmdlZCB2YWx1ZXNcblx0XHRcdHN0eWxlLndpZHRoID0gd2lkdGg7XG5cdFx0XHRzdHlsZS5taW5XaWR0aCA9IG1pbldpZHRoO1xuXHRcdFx0c3R5bGUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gcmV0ICE9PSB1bmRlZmluZWQgP1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdC8vIElFIHJldHVybnMgekluZGV4IHZhbHVlIGFzIGFuIGludGVnZXIuXG5cdFx0cmV0ICsgXCJcIiA6XG5cdFx0cmV0O1xufVxuXG5cbmZ1bmN0aW9uIGFkZEdldEhvb2tJZiggY29uZGl0aW9uRm4sIGhvb2tGbiApIHtcblxuXHQvLyBEZWZpbmUgdGhlIGhvb2ssIHdlJ2xsIGNoZWNrIG9uIHRoZSBmaXJzdCBydW4gaWYgaXQncyByZWFsbHkgbmVlZGVkLlxuXHRyZXR1cm4ge1xuXHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGNvbmRpdGlvbkZuKCkgKSB7XG5cblx0XHRcdFx0Ly8gSG9vayBub3QgbmVlZGVkIChvciBpdCdzIG5vdCBwb3NzaWJsZSB0byB1c2UgaXQgZHVlXG5cdFx0XHRcdC8vIHRvIG1pc3NpbmcgZGVwZW5kZW5jeSksIHJlbW92ZSBpdC5cblx0XHRcdFx0ZGVsZXRlIHRoaXMuZ2V0O1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIEhvb2sgbmVlZGVkOyByZWRlZmluZSBpdCBzbyB0aGF0IHRoZSBzdXBwb3J0IHRlc3QgaXMgbm90IGV4ZWN1dGVkIGFnYWluLlxuXHRcdFx0cmV0dXJuICggdGhpcy5nZXQgPSBob29rRm4gKS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHR9O1xufVxuXG5cbnZhciBjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGUsXG5cdHZlbmRvclByb3BzID0ge307XG5cbi8vIFJldHVybiBhIHZlbmRvci1wcmVmaXhlZCBwcm9wZXJ0eSBvciB1bmRlZmluZWRcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIENoZWNrIGZvciB2ZW5kb3IgcHJlZml4ZWQgbmFtZXNcblx0dmFyIGNhcE5hbWUgPSBuYW1lWyAwIF0udG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoIDEgKSxcblx0XHRpID0gY3NzUHJlZml4ZXMubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdG5hbWUgPSBjc3NQcmVmaXhlc1sgaSBdICsgY2FwTmFtZTtcblx0XHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRcdHJldHVybiBuYW1lO1xuXHRcdH1cblx0fVxufVxuXG4vLyBSZXR1cm4gYSBwb3RlbnRpYWxseS1tYXBwZWQgalF1ZXJ5LmNzc1Byb3BzIG9yIHZlbmRvciBwcmVmaXhlZCBwcm9wZXJ0eVxuZnVuY3Rpb24gZmluYWxQcm9wTmFtZSggbmFtZSApIHtcblx0dmFyIGZpbmFsID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF0gfHwgdmVuZG9yUHJvcHNbIG5hbWUgXTtcblxuXHRpZiAoIGZpbmFsICkge1xuXHRcdHJldHVybiBmaW5hbDtcblx0fVxuXHRpZiAoIG5hbWUgaW4gZW1wdHlTdHlsZSApIHtcblx0XHRyZXR1cm4gbmFtZTtcblx0fVxuXHRyZXR1cm4gdmVuZG9yUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fTtcblxuZnVuY3Rpb24gc2V0UG9zaXRpdmVOdW1iZXIoIF9lbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gVXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3Igd2hlbiBib3ggc2l6aW5nIGlzIHVucmVsaWFibGUuXG5cdC8vIEluIHRob3NlIGNhc2VzLCB0aGUgY29tcHV0ZWQgdmFsdWUgY2FuIGJlIHRydXN0ZWQgdG8gYmUgYm9yZGVyLWJveC5cblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDEwIC0gMTErLCBFZGdlIDE1IC0gMTgrXG5cdFx0Ly8gSUUvRWRnZSBtaXNyZXBvcnQgYGdldENvbXB1dGVkU3R5bGVgIG9mIHRhYmxlIHJvd3Mgd2l0aCB3aWR0aC9oZWlnaHRcblx0XHQvLyBzZXQgaW4gQ1NTIHdoaWxlIGBvZmZzZXQqYCBwcm9wZXJ0aWVzIHJlcG9ydCBjb3JyZWN0IHZhbHVlcy5cblx0XHQvLyBJbnRlcmVzdGluZ2x5LCBpbiBzb21lIGNhc2VzIElFIDkgZG9lc24ndCBzdWZmZXIgZnJvbSB0aGlzIGlzc3VlLlxuXHRcdCFzdXBwb3J0LnJlbGlhYmxlVHJEaW1lbnNpb25zKCkgJiYgbm9kZU5hbWUoIGVsZW0sIFwidHJcIiApIHx8XG5cblx0XHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0XHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdFx0dmFsID09PSBcImF1dG9cIiB8fFxuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdFx0Ly8gQWxzbyB1c2Ugb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGZvciBtaXNyZXBvcnRlZCBpbmxpbmUgZGltZW5zaW9ucyAoZ2gtMzYwMilcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApICYmXG5cblx0XHQvLyBNYWtlIHN1cmUgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSAmIGNvbm5lY3RlZFxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBfaSwgZGltZW5zaW9uICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIGRpbWVuc2lvbiBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIGNzc1Nob3csIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHR9ICkgOlxuXHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIGV4dHJhICkge1xuXHRcdFx0dmFyIG1hdGNoZXMsXG5cdFx0XHRcdHN0eWxlcyA9IGdldFN0eWxlcyggZWxlbSApLFxuXG5cdFx0XHRcdC8vIE9ubHkgcmVhZCBzdHlsZXMucG9zaXRpb24gaWYgdGhlIHRlc3QgaGFzIGEgY2hhbmNlIHRvIGZhaWxcblx0XHRcdFx0Ly8gdG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdy5cblx0XHRcdFx0c2Nyb2xsYm94U2l6ZUJ1Z2d5ID0gIXN1cHBvcnQuc2Nyb2xsYm94U2l6ZSgpICYmXG5cdFx0XHRcdFx0c3R5bGVzLnBvc2l0aW9uID09PSBcImFic29sdXRlXCIsXG5cblx0XHRcdFx0Ly8gVG8gYXZvaWQgZm9yY2luZyBhIHJlZmxvdywgb25seSBmZXRjaCBib3hTaXppbmcgaWYgd2UgbmVlZCBpdCAoZ2gtMzk5MSlcblx0XHRcdFx0Ym94U2l6aW5nTmVlZGVkID0gc2Nyb2xsYm94U2l6ZUJ1Z2d5IHx8IGV4dHJhLFxuXHRcdFx0XHRpc0JvcmRlckJveCA9IGJveFNpemluZ05lZWRlZCAmJlxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0XHRcdHN1YnRyYWN0ID0gZXh0cmEgP1xuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRcdGVsZW0sXG5cdFx0XHRcdFx0XHRkaW1lbnNpb24sXG5cdFx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRcdGlzQm9yZGVyQm94LFxuXHRcdFx0XHRcdFx0c3R5bGVzXG5cdFx0XHRcdFx0KSA6XG5cdFx0XHRcdFx0MDtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzY3JvbGxib3hTaXplQnVnZ3kgKSB7XG5cdFx0XHRcdHN1YnRyYWN0IC09IE1hdGguY2VpbChcblx0XHRcdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0XHRcdHBhcnNlRmxvYXQoIHN0eWxlc1sgZGltZW5zaW9uIF0gKSAtXG5cdFx0XHRcdFx0Ym94TW9kZWxBZGp1c3RtZW50KCBlbGVtLCBkaW1lbnNpb24sIFwiYm9yZGVyXCIsIGZhbHNlLCBzdHlsZXMgKSAtXG5cdFx0XHRcdFx0MC41XG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgdG8gcGl4ZWxzIGlmIHZhbHVlIGFkanVzdG1lbnQgaXMgbmVlZGVkXG5cdFx0XHRpZiAoIHN1YnRyYWN0ICYmICggbWF0Y2hlcyA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmXG5cdFx0XHRcdCggbWF0Y2hlc1sgMyBdIHx8IFwicHhcIiApICE9PSBcInB4XCIgKSB7XG5cblx0XHRcdFx0ZWxlbS5zdHlsZVsgZGltZW5zaW9uIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBkaW1lbnNpb24gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKTtcblx0XHR9XG5cdH07XG59ICk7XG5cbmpRdWVyeS5jc3NIb29rcy5tYXJnaW5MZWZ0ID0gYWRkR2V0SG9va0lmKCBzdXBwb3J0LnJlbGlhYmxlTWFyZ2luTGVmdCxcblx0ZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkICkge1xuXHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4gKCBwYXJzZUZsb2F0KCBjdXJDU1MoIGVsZW0sIFwibWFyZ2luTGVmdFwiICkgKSB8fFxuXHRcdFx0XHRlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgLVxuXHRcdFx0XHRcdHN3YXAoIGVsZW0sIHsgbWFyZ2luTGVmdDogMCB9LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQ7XG5cdFx0XHRcdFx0fSApXG5cdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSB8fFxuXHRcdFx0XHRcdHR3ZWVuLmVsZW0uc3R5bGVbIGZpbmFsUHJvcE5hbWUoIHR3ZWVuLnByb3AgKSBdICE9IG51bGwgKSApIHtcblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCB0d2Vlbi5ub3cgKyB0d2Vlbi51bml0ICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gUGFuaWMgYmFzZWQgYXBwcm9hY2ggdG8gc2V0dGluZyB0aGluZ3Mgb24gZGlzY29ubmVjdGVkIG5vZGVzXG5Ud2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wID0gVHdlZW4ucHJvcEhvb2tzLnNjcm9sbExlZnQgPSB7XG5cdHNldDogZnVuY3Rpb24oIHR3ZWVuICkge1xuXHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAmJiB0d2Vlbi5lbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gPSB0d2Vlbi5ub3c7XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkuZWFzaW5nID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiBwO1xuXHR9LFxuXHRzd2luZzogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIDAuNSAtIE1hdGguY29zKCBwICogTWF0aC5QSSApIC8gMjtcblx0fSxcblx0X2RlZmF1bHQ6IFwic3dpbmdcIlxufTtcblxualF1ZXJ5LmZ4ID0gVHdlZW4ucHJvdG90eXBlLmluaXQ7XG5cbi8vIEJhY2sgY29tcGF0IDwxLjggZXh0ZW5zaW9uIHBvaW50XG5qUXVlcnkuZnguc3RlcCA9IHt9O1xuXG5cblxuXG52YXJcblx0ZnhOb3csIGluUHJvZ3Jlc3MsXG5cdHJmeHR5cGVzID0gL14oPzp0b2dnbGV8c2hvd3xoaWRlKSQvLFxuXHRycnVuID0gL3F1ZXVlSG9va3MkLztcblxuZnVuY3Rpb24gc2NoZWR1bGUoKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRpZiAoIGRvY3VtZW50LmhpZGRlbiA9PT0gZmFsc2UgJiYgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSApIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoIHNjaGVkdWxlICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBzY2hlZHVsZSwgalF1ZXJ5LmZ4LmludGVydmFsICk7XG5cdFx0fVxuXG5cdFx0alF1ZXJ5LmZ4LnRpY2soKTtcblx0fVxufVxuXG4vLyBBbmltYXRpb25zIGNyZWF0ZWQgc3luY2hyb25vdXNseSB3aWxsIHJ1biBzeW5jaHJvbm91c2x5XG5mdW5jdGlvbiBjcmVhdGVGeE5vdygpIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdGZ4Tm93ID0gdW5kZWZpbmVkO1xuXHR9ICk7XG5cdHJldHVybiAoIGZ4Tm93ID0gRGF0ZS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WSBhbmQgRWRnZSBqdXN0IG1pcnJvcnNcblx0XHQvLyB0aGUgb3ZlcmZsb3dYIHZhbHVlIHRoZXJlLlxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbIHByb3AgXSB8fCBhbmltYXRpb24ub3B0cy5lYXNpbmcgKTtcblx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVucy5wdXNoKCB0d2VlbiApO1xuXHRcdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0XHR9LFxuXHRcdFx0c3RvcDogZnVuY3Rpb24oIGdvdG9FbmQgKSB7XG5cdFx0XHRcdHZhciBpbmRleCA9IDAsXG5cblx0XHRcdFx0XHQvLyBJZiB3ZSBhcmUgZ29pbmcgdG8gdGhlIGVuZCwgd2Ugd2FudCB0byBydW4gYWxsIHRoZSB0d2VlbnNcblx0XHRcdFx0XHQvLyBvdGhlcndpc2Ugd2Ugc2tpcCB0aGlzIHBhcnRcblx0XHRcdFx0XHRsZW5ndGggPSBnb3RvRW5kID8gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGggOiAwO1xuXHRcdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdFx0c3RvcHBlZCA9IHRydWU7XG5cdFx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdFx0YW5pbWF0aW9uLnR3ZWVuc1sgaW5kZXggXS5ydW4oIDEgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlc29sdmUgd2hlbiB3ZSBwbGF5ZWQgdGhlIGxhc3QgZnJhbWU7IG90aGVyd2lzZSwgcmVqZWN0XG5cdFx0XHRcdGlmICggZ290b0VuZCApIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9XG5cdFx0fSApLFxuXHRcdHByb3BzID0gYW5pbWF0aW9uLnByb3BzO1xuXG5cdHByb3BGaWx0ZXIoIHByb3BzLCBhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nICk7XG5cblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRyZXN1bHQgPSBBbmltYXRpb24ucHJlZmlsdGVyc1sgaW5kZXggXS5jYWxsKCBhbmltYXRpb24sIGVsZW0sIHByb3BzLCBhbmltYXRpb24ub3B0cyApO1xuXHRcdGlmICggcmVzdWx0ICkge1xuXHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCByZXN1bHQuc3RvcCApICkge1xuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIGFuaW1hdGlvbi5lbGVtLCBhbmltYXRpb24ub3B0cy5xdWV1ZSApLnN0b3AgPVxuXHRcdFx0XHRcdHJlc3VsdC5zdG9wLmJpbmQoIHJlc3VsdCApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9XG5cdH1cblxuXHRqUXVlcnkubWFwKCBwcm9wcywgY3JlYXRlVHdlZW4sIGFuaW1hdGlvbiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBwcm9wcyApICkge1xuXHRcdFx0Y2FsbGJhY2sgPSBwcm9wcztcblx0XHRcdHByb3BzID0gWyBcIipcIiBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRwcm9wcyA9IHByb3BzLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cdFx0fVxuXG5cdFx0dmFyIHByb3AsXG5cdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cblx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0cHJvcCA9IHByb3BzWyBpbmRleCBdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gPSBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9LFxuXG5cdHByZWZpbHRlcnM6IFsgZGVmYXVsdFByZWZpbHRlciBdLFxuXG5cdHByZWZpbHRlcjogZnVuY3Rpb24oIGNhbGxiYWNrLCBwcmVwZW5kICkge1xuXHRcdGlmICggcHJlcGVuZCApIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnVuc2hpZnQoIGNhbGxiYWNrICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdEFuaW1hdGlvbi5wcmVmaWx0ZXJzLnB1c2goIGNhbGxiYWNrICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5zcGVlZCA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBmbiApIHtcblx0dmFyIG9wdCA9IHNwZWVkICYmIHR5cGVvZiBzcGVlZCA9PT0gXCJvYmplY3RcIiA/IGpRdWVyeS5leHRlbmQoIHt9LCBzcGVlZCApIDoge1xuXHRcdGNvbXBsZXRlOiBmbiB8fCAhZm4gJiYgZWFzaW5nIHx8XG5cdFx0XHRpc0Z1bmN0aW9uKCBzcGVlZCApICYmIHNwZWVkLFxuXHRcdGR1cmF0aW9uOiBzcGVlZCxcblx0XHRlYXNpbmc6IGZuICYmIGVhc2luZyB8fCBlYXNpbmcgJiYgIWlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0Lm9sZCApICkge1xuXHRcdFx0b3B0Lm9sZC5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBvcHQucXVldWUgKSB7XG5cdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgb3B0LnF1ZXVlICk7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiBvcHQ7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZhZGVUbzogZnVuY3Rpb24oIHNwZWVkLCB0bywgZWFzaW5nLCBjYWxsYmFjayApIHtcblxuXHRcdC8vIFNob3cgYW55IGhpZGRlbiBlbGVtZW50cyBhZnRlciBzZXR0aW5nIG9wYWNpdHkgdG8gMFxuXHRcdHJldHVybiB0aGlzLmZpbHRlciggaXNIaWRkZW5XaXRoaW5UcmVlICkuY3NzKCBcIm9wYWNpdHlcIiwgMCApLnNob3coKVxuXG5cdFx0XHQvLyBBbmltYXRlIHRvIHRoZSB2YWx1ZSBzcGVjaWZpZWRcblx0XHRcdC5lbmQoKS5hbmltYXRlKCB7IG9wYWNpdHk6IHRvIH0sIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICk7XG5cdH0sXG5cdGFuaW1hdGU6IGZ1bmN0aW9uKCBwcm9wLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHR2YXIgZW1wdHkgPSBqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcCApLFxuXHRcdFx0b3B0YWxsID0galF1ZXJ5LnNwZWVkKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApLFxuXHRcdFx0ZG9BbmltYXRpb24gPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBPcGVyYXRlIG9uIGEgY29weSBvZiBwcm9wIHNvIHBlci1wcm9wZXJ0eSBlYXNpbmcgd29uJ3QgYmUgbG9zdFxuXHRcdFx0XHR2YXIgYW5pbSA9IEFuaW1hdGlvbiggdGhpcywgalF1ZXJ5LmV4dGVuZCgge30sIHByb3AgKSwgb3B0YWxsICk7XG5cblx0XHRcdFx0Ly8gRW1wdHkgYW5pbWF0aW9ucywgb3IgZmluaXNoaW5nIHJlc29sdmVzIGltbWVkaWF0ZWx5XG5cdFx0XHRcdGlmICggZW1wdHkgfHwgZGF0YVByaXYuZ2V0KCB0aGlzLCBcImZpbmlzaFwiICkgKSB7XG5cdFx0XHRcdFx0YW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRkb0FuaW1hdGlvbi5maW5pc2ggPSBkb0FuaW1hdGlvbjtcblxuXHRcdHJldHVybiBlbXB0eSB8fCBvcHRhbGwucXVldWUgPT09IGZhbHNlID9cblx0XHRcdHRoaXMuZWFjaCggZG9BbmltYXRpb24gKSA6XG5cdFx0XHR0aGlzLnF1ZXVlKCBvcHRhbGwucXVldWUsIGRvQW5pbWF0aW9uICk7XG5cdH0sXG5cdHN0b3A6IGZ1bmN0aW9uKCB0eXBlLCBjbGVhclF1ZXVlLCBnb3RvRW5kICkge1xuXHRcdHZhciBzdG9wUXVldWUgPSBmdW5jdGlvbiggaG9va3MgKSB7XG5cdFx0XHR2YXIgc3RvcCA9IGhvb2tzLnN0b3A7XG5cdFx0XHRkZWxldGUgaG9va3Muc3RvcDtcblx0XHRcdHN0b3AoIGdvdG9FbmQgKTtcblx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGdvdG9FbmQgPSBjbGVhclF1ZXVlO1xuXHRcdFx0Y2xlYXJRdWV1ZSA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHRpZiAoIGNsZWFyUXVldWUgKSB7XG5cdFx0XHR0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkZXF1ZXVlID0gdHJ1ZSxcblx0XHRcdFx0aW5kZXggPSB0eXBlICE9IG51bGwgJiYgdHlwZSArIFwicXVldWVIb29rc1wiLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICk7XG5cblx0XHRcdGlmICggaW5kZXggKSB7XG5cdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgKSB7XG5cdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoIGluZGV4IGluIGRhdGEgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCAmJiBycnVuLnRlc3QoIGluZGV4ICkgKSB7XG5cdFx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJlxuXHRcdFx0XHRcdCggdHlwZSA9PSBudWxsIHx8IHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApICkge1xuXG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggZ290b0VuZCApO1xuXHRcdFx0XHRcdGRlcXVldWUgPSBmYWxzZTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXJ0IHRoZSBuZXh0IGluIHRoZSBxdWV1ZSBpZiB0aGUgbGFzdCBzdGVwIHdhc24ndCBmb3JjZWQuXG5cdFx0XHQvLyBUaW1lcnMgY3VycmVudGx5IHdpbGwgY2FsbCB0aGVpciBjb21wbGV0ZSBjYWxsYmFja3MsIHdoaWNoXG5cdFx0XHQvLyB3aWxsIGRlcXVldWUgYnV0IG9ubHkgaWYgdGhleSB3ZXJlIGdvdG9FbmQuXG5cdFx0XHRpZiAoIGRlcXVldWUgfHwgIWdvdG9FbmQgKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXHRmaW5pc2g6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdGlmICggdHlwZSAhPT0gZmFsc2UgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGluZGV4LFxuXHRcdFx0XHRkYXRhID0gZGF0YVByaXYuZ2V0KCB0aGlzICksXG5cdFx0XHRcdHF1ZXVlID0gZGF0YVsgdHlwZSArIFwicXVldWVcIiBdLFxuXHRcdFx0XHRob29rcyA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlSG9va3NcIiBdLFxuXHRcdFx0XHR0aW1lcnMgPSBqUXVlcnkudGltZXJzLFxuXHRcdFx0XHRsZW5ndGggPSBxdWV1ZSA/IHF1ZXVlLmxlbmd0aCA6IDA7XG5cblx0XHRcdC8vIEVuYWJsZSBmaW5pc2hpbmcgZmxhZyBvbiBwcml2YXRlIGRhdGFcblx0XHRcdGRhdGEuZmluaXNoID0gdHJ1ZTtcblxuXHRcdFx0Ly8gRW1wdHkgdGhlIHF1ZXVlIGZpcnN0XG5cdFx0XHRqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIFtdICk7XG5cblx0XHRcdGlmICggaG9va3MgJiYgaG9va3Muc3RvcCApIHtcblx0XHRcdFx0aG9va3Muc3RvcC5jYWxsKCB0aGlzLCB0cnVlICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhY3RpdmUgYW5pbWF0aW9ucywgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmIHRpbWVyc1sgaW5kZXggXS5xdWV1ZSA9PT0gdHlwZSApIHtcblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCB0cnVlICk7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYW5pbWF0aW9ucyBpbiB0aGUgb2xkIHF1ZXVlIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0aWYgKCBxdWV1ZVsgaW5kZXggXSAmJiBxdWV1ZVsgaW5kZXggXS5maW5pc2ggKSB7XG5cdFx0XHRcdFx0cXVldWVbIGluZGV4IF0uZmluaXNoLmNhbGwoIHRoaXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUdXJuIG9mZiBmaW5pc2hpbmcgZmxhZ1xuXHRcdFx0ZGVsZXRlIGRhdGEuZmluaXNoO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcInRvZ2dsZVwiLCBcInNob3dcIiwgXCJoaWRlXCIgXSwgZnVuY3Rpb24oIF9pLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IERhdGUubm93KCk7XG5cblx0Zm9yICggOyBpIDwgdGltZXJzLmxlbmd0aDsgaSsrICkge1xuXHRcdHRpbWVyID0gdGltZXJzWyBpIF07XG5cblx0XHQvLyBSdW4gdGhlIHRpbWVyIGFuZCBzYWZlbHkgcmVtb3ZlIGl0IHdoZW4gZG9uZSAoYWxsb3dpbmcgZm9yIGV4dGVybmFsIHJlbW92YWwpXG5cdFx0aWYgKCAhdGltZXIoKSAmJiB0aW1lcnNbIGkgXSA9PT0gdGltZXIgKSB7XG5cdFx0XHR0aW1lcnMuc3BsaWNlKCBpLS0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHRpZiAoICF0aW1lcnMubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5meC5zdG9wKCk7XG5cdH1cblx0ZnhOb3cgPSB1bmRlZmluZWQ7XG59O1xuXG5qUXVlcnkuZngudGltZXIgPSBmdW5jdGlvbiggdGltZXIgKSB7XG5cdGpRdWVyeS50aW1lcnMucHVzaCggdGltZXIgKTtcblx0alF1ZXJ5LmZ4LnN0YXJ0KCk7XG59O1xuXG5qUXVlcnkuZnguaW50ZXJ2YWwgPSAxMztcbmpRdWVyeS5meC5zdGFydCA9IGZ1bmN0aW9uKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0aW5Qcm9ncmVzcyA9IHRydWU7XG5cdHNjaGVkdWxlKCk7XG59O1xuXG5qUXVlcnkuZnguc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRpblByb2dyZXNzID0gbnVsbDtcbn07XG5cbmpRdWVyeS5meC5zcGVlZHMgPSB7XG5cdHNsb3c6IDYwMCxcblx0ZmFzdDogMjAwLFxuXG5cdC8vIERlZmF1bHQgc3BlZWRcblx0X2RlZmF1bHQ6IDQwMFxufTtcblxuXG4vLyBCYXNlZCBvZmYgb2YgdGhlIHBsdWdpbiBieSBDbGludCBIZWxmZXJzLCB3aXRoIHBlcm1pc3Npb24uXG4vLyBodHRwczovL3dlYi5hcmNoaXZlLm9yZy93ZWIvMjAxMDAzMjQwMTQ3NDcvaHR0cDovL2JsaW5kc2lnbmFscy5jb20vaW5kZXgucGhwLzIwMDkvMDcvanF1ZXJ5LWRlbGF5L1xualF1ZXJ5LmZuLmRlbGF5ID0gZnVuY3Rpb24oIHRpbWUsIHR5cGUgKSB7XG5cdHRpbWUgPSBqUXVlcnkuZnggPyBqUXVlcnkuZnguc3BlZWRzWyB0aW1lIF0gfHwgdGltZSA6IHRpbWU7XG5cdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSwgZnVuY3Rpb24oIG5leHQsIGhvb2tzICkge1xuXHRcdHZhciB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoIG5leHQsIHRpbWUgKTtcblx0XHRob29rcy5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0ICk7XG5cdFx0fTtcblx0fSApO1xufTtcblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKSxcblx0XHRzZWxlY3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcInNlbGVjdFwiICksXG5cdFx0b3B0ID0gc2VsZWN0LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9wdGlvblwiICkgKTtcblxuXHRpbnB1dC50eXBlID0gXCJjaGVja2JveFwiO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjMgb25seVxuXHQvLyBEZWZhdWx0IHZhbHVlIGZvciBhIGNoZWNrYm94IHNob3VsZCBiZSBcIm9uXCJcblx0c3VwcG9ydC5jaGVja09uID0gaW5wdXQudmFsdWUgIT09IFwiXCI7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE11c3QgYWNjZXNzIHNlbGVjdGVkSW5kZXggdG8gbWFrZSBkZWZhdWx0IG9wdGlvbnMgc2VsZWN0XG5cdHN1cHBvcnQub3B0U2VsZWN0ZWQgPSBvcHQuc2VsZWN0ZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIEFuIGlucHV0IGxvc2VzIGl0cyB2YWx1ZSBhZnRlciBiZWNvbWluZyBhIHJhZGlvXG5cdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cdGlucHV0LnZhbHVlID0gXCJ0XCI7XG5cdGlucHV0LnR5cGUgPSBcInJhZGlvXCI7XG5cdHN1cHBvcnQucmFkaW9WYWx1ZSA9IGlucHV0LnZhbHVlID09PSBcInRcIjtcbn0gKSgpO1xuXG5cbnZhciBib29sSG9vayxcblx0YXR0ckhhbmRsZSA9IGpRdWVyeS5leHByLmF0dHJIYW5kbGU7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5hdHRyLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCB0aGlzLCBuYW1lICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0YXR0cjogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBhdHRyaWJ1dGVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRmFsbGJhY2sgdG8gcHJvcCB3aGVuIGF0dHJpYnV0ZXMgYXJlIG5vdCBzdXBwb3J0ZWRcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEF0dHJpYnV0ZSA9PT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSwgdmFsdWUgKTtcblx0XHR9XG5cblx0XHQvLyBBdHRyaWJ1dGUgaG9va3MgYXJlIGRldGVybWluZWQgYnkgdGhlIGxvd2VyY2FzZSB2ZXJzaW9uXG5cdFx0Ly8gR3JhYiBuZWNlc3NhcnkgaG9vayBpZiBvbmUgaXMgZGVmaW5lZFxuXHRcdGlmICggblR5cGUgIT09IDEgfHwgIWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXHRcdFx0aG9va3MgPSBqUXVlcnkuYXR0ckhvb2tzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHQoIGpRdWVyeS5leHByLm1hdGNoLmJvb2wudGVzdCggbmFtZSApID8gYm9vbEhvb2sgOiB1bmRlZmluZWQgKTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHZhbHVlID09PSBudWxsICkge1xuXHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCB2YWx1ZSArIFwiXCIgKTtcblx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiYgKCByZXQgPSBob29rcy5nZXQoIGVsZW0sIG5hbWUgKSApICE9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRyZXQgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHQvLyBOb24tZXhpc3RlbnQgYXR0cmlidXRlcyByZXR1cm4gbnVsbCwgd2Ugbm9ybWFsaXplIHRvIHVuZGVmaW5lZFxuXHRcdHJldHVybiByZXQgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IHJldDtcblx0fSxcblxuXHRhdHRySG9va3M6IHtcblx0XHR0eXBlOiB7XG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdFx0aWYgKCAhc3VwcG9ydC5yYWRpb1ZhbHVlICYmIHZhbHVlID09PSBcInJhZGlvXCIgJiZcblx0XHRcdFx0XHRub2RlTmFtZSggZWxlbSwgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dmFyIHZhbCA9IGVsZW0udmFsdWU7XG5cdFx0XHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCB2YWx1ZSApO1xuXHRcdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdFx0ZWxlbS52YWx1ZSA9IHZhbDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHR2YXIgbmFtZSxcblx0XHRcdGkgPSAwLFxuXG5cdFx0XHQvLyBBdHRyaWJ1dGUgbmFtZXMgY2FuIGNvbnRhaW4gbm9uLUhUTUwgd2hpdGVzcGFjZSBjaGFyYWN0ZXJzXG5cdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcblx0XHRcdGF0dHJOYW1lcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICk7XG5cblx0XHRpZiAoIGF0dHJOYW1lcyAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0d2hpbGUgKCAoIG5hbWUgPSBhdHRyTmFtZXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBuYW1lICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbi8vIEhvb2tzIGZvciBib29sZWFuIGF0dHJpYnV0ZXNcbmJvb2xIb29rID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSwgbmFtZSApIHtcblx0XHRpZiAoIHZhbHVlID09PSBmYWxzZSApIHtcblxuXHRcdFx0Ly8gUmVtb3ZlIGJvb2xlYW4gYXR0cmlidXRlcyB3aGVuIHNldCB0byBmYWxzZVxuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIG5hbWUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cbn07XG5cbmpRdWVyeS5lYWNoKCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnNvdXJjZS5tYXRjaCggL1xcdysvZyApLCBmdW5jdGlvbiggX2ksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcdFwiXCIgOlxuXHRcdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSApO1xuXG5cblxuXG52YXIgcnJldHVybiA9IC9cXHIvZztcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHR2YWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgaG9va3MsIHJldCwgdmFsdWVJc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHR2YXIgdmFsO1xuXG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgIT09IDEgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvLFxuXHRzdG9wUHJvcGFnYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uKCBlICkge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH07XG5cbmpRdWVyeS5leHRlbmQoIGpRdWVyeS5ldmVudCwge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCBldmVudCwgZGF0YSwgZWxlbSwgb25seUhhbmRsZXJzICkge1xuXG5cdFx0dmFyIGksIGN1ciwgdG1wLCBidWJibGVUeXBlLCBvbnR5cGUsIGhhbmRsZSwgc3BlY2lhbCwgbGFzdEVsZW1lbnQsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IGxhc3RFbGVtZW50ID0gdG1wID0gZWxlbSA9IGVsZW0gfHwgZG9jdW1lbnQ7XG5cblx0XHQvLyBEb24ndCBkbyBldmVudHMgb24gdGV4dCBhbmQgY29tbWVudCBub2Rlc1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMyB8fCBlbGVtLm5vZGVUeXBlID09PSA4ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIGZvY3VzL2JsdXIgbW9ycGhzIHRvIGZvY3VzaW4vb3V0OyBlbnN1cmUgd2UncmUgbm90IGZpcmluZyB0aGVtIHJpZ2h0IG5vd1xuXHRcdGlmICggcmZvY3VzTW9ycGgudGVzdCggdHlwZSArIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgKSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGUuaW5kZXhPZiggXCIuXCIgKSA+IC0xICkge1xuXG5cdFx0XHQvLyBOYW1lc3BhY2VkIHRyaWdnZXI7IGNyZWF0ZSBhIHJlZ2V4cCB0byBtYXRjaCBldmVudCB0eXBlIGluIGhhbmRsZSgpXG5cdFx0XHRuYW1lc3BhY2VzID0gdHlwZS5zcGxpdCggXCIuXCIgKTtcblx0XHRcdHR5cGUgPSBuYW1lc3BhY2VzLnNoaWZ0KCk7XG5cdFx0XHRuYW1lc3BhY2VzLnNvcnQoKTtcblx0XHR9XG5cdFx0b250eXBlID0gdHlwZS5pbmRleE9mKCBcIjpcIiApIDwgMCAmJiBcIm9uXCIgKyB0eXBlO1xuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGEgalF1ZXJ5LkV2ZW50IG9iamVjdCwgT2JqZWN0LCBvciBqdXN0IGFuIGV2ZW50IHR5cGUgc3RyaW5nXG5cdFx0ZXZlbnQgPSBldmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRldmVudCA6XG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCB0eXBlLCB0eXBlb2YgZXZlbnQgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQgKTtcblxuXHRcdC8vIFRyaWdnZXIgYml0bWFzazogJiAxIGZvciBuYXRpdmUgaGFuZGxlcnM7ICYgMiBmb3IgalF1ZXJ5IChhbHdheXMgdHJ1ZSlcblx0XHRldmVudC5pc1RyaWdnZXIgPSBvbmx5SGFuZGxlcnMgPyAyIDogMztcblx0XHRldmVudC5uYW1lc3BhY2UgPSBuYW1lc3BhY2VzLmpvaW4oIFwiLlwiICk7XG5cdFx0ZXZlbnQucm5hbWVzcGFjZSA9IGV2ZW50Lm5hbWVzcGFjZSA/XG5cdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKSA6XG5cdFx0XHRudWxsO1xuXG5cdFx0Ly8gQ2xlYW4gdXAgdGhlIGV2ZW50IGluIGNhc2UgaXQgaXMgYmVpbmcgcmV1c2VkXG5cdFx0ZXZlbnQucmVzdWx0ID0gdW5kZWZpbmVkO1xuXHRcdGlmICggIWV2ZW50LnRhcmdldCApIHtcblx0XHRcdGV2ZW50LnRhcmdldCA9IGVsZW07XG5cdFx0fVxuXG5cdFx0Ly8gQ2xvbmUgYW55IGluY29taW5nIGRhdGEgYW5kIHByZXBlbmQgdGhlIGV2ZW50LCBjcmVhdGluZyB0aGUgaGFuZGxlciBhcmcgbGlzdFxuXHRcdGRhdGEgPSBkYXRhID09IG51bGwgP1xuXHRcdFx0WyBldmVudCBdIDpcblx0XHRcdGpRdWVyeS5tYWtlQXJyYXkoIGRhdGEsIFsgZXZlbnQgXSApO1xuXG5cdFx0Ly8gQWxsb3cgc3BlY2lhbCBldmVudHMgdG8gZHJhdyBvdXRzaWRlIHRoZSBsaW5lc1xuXHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiBzcGVjaWFsLnRyaWdnZXIgJiYgc3BlY2lhbC50cmlnZ2VyLmFwcGx5KCBlbGVtLCBkYXRhICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBldmVudCBwcm9wYWdhdGlvbiBwYXRoIGluIGFkdmFuY2UsIHBlciBXM0MgZXZlbnRzIHNwZWMgKCM5OTUxKVxuXHRcdC8vIEJ1YmJsZSB1cCB0byBkb2N1bWVudCwgdGhlbiB0byB3aW5kb3c7IHdhdGNoIGZvciBhIGdsb2JhbCBvd25lckRvY3VtZW50IHZhciAoIzk3MjQpXG5cdFx0aWYgKCAhb25seUhhbmRsZXJzICYmICFzcGVjaWFsLm5vQnViYmxlICYmICFpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRidWJibGVUeXBlID0gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgfHwgdHlwZTtcblx0XHRcdGlmICggIXJmb2N1c01vcnBoLnRlc3QoIGJ1YmJsZVR5cGUgKyB0eXBlICkgKSB7XG5cdFx0XHRcdGN1ciA9IGN1ci5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICggOyBjdXI7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggY3VyICk7XG5cdFx0XHRcdHRtcCA9IGN1cjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT25seSBhZGQgd2luZG93IGlmIHdlIGdvdCB0byBkb2N1bWVudCAoZS5nLiwgbm90IHBsYWluIG9iaiBvciBkZXRhY2hlZCBET00pXG5cdFx0XHRpZiAoIHRtcCA9PT0gKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQgKSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIHRtcC5kZWZhdWx0VmlldyB8fCB0bXAucGFyZW50V2luZG93IHx8IHdpbmRvdyApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZpcmUgaGFuZGxlcnMgb24gdGhlIGV2ZW50IHBhdGhcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggY3VyID0gZXZlbnRQYXRoWyBpKysgXSApICYmICFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0bGFzdEVsZW1lbnQgPSBjdXI7XG5cdFx0XHRldmVudC50eXBlID0gaSA+IDEgP1xuXHRcdFx0XHRidWJibGVUeXBlIDpcblx0XHRcdFx0c3BlY2lhbC5iaW5kVHlwZSB8fCB0eXBlO1xuXG5cdFx0XHQvLyBqUXVlcnkgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gKCBkYXRhUHJpdi5nZXQoIGN1ciwgXCJldmVudHNcIiApIHx8IE9iamVjdC5jcmVhdGUoIG51bGwgKSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBIYW5kbGU6IHJlZ3VsYXIgbm9kZXMgKHZpYSBgdGhpcy5vd25lckRvY3VtZW50YCksIHdpbmRvd1xuXHRcdFx0XHQvLyAodmlhIGB0aGlzLmRvY3VtZW50YCkgJiBkb2N1bWVudCAodmlhIGB0aGlzYCkuXG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcy5kb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMuZG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKSAtIDE7XG5cblx0XHRcdFx0aWYgKCAhYXR0YWNoZXMgKSB7XG5cdFx0XHRcdFx0ZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoIG9yaWcsIGhhbmRsZXIsIHRydWUgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGRvYywgZml4ICk7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4LCBhdHRhY2hlcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fSApO1xufVxudmFyIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuXG52YXIgbm9uY2UgPSB7IGd1aWQ6IERhdGUubm93KCkgfTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sLCBwYXJzZXJFcnJvckVsZW07XG5cdGlmICggIWRhdGEgfHwgdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seVxuXHQvLyBJRSB0aHJvd3Mgb24gcGFyc2VGcm9tU3RyaW5nIHdpdGggaW52YWxpZCBpbnB1dC5cblx0dHJ5IHtcblx0XHR4bWwgPSAoIG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkgKS5wYXJzZUZyb21TdHJpbmcoIGRhdGEsIFwidGV4dC94bWxcIiApO1xuXHR9IGNhdGNoICggZSApIHt9XG5cblx0cGFyc2VyRXJyb3JFbGVtID0geG1sICYmIHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiIClbIDAgXTtcblx0aWYgKCAheG1sIHx8IHBhcnNlckVycm9yRWxlbSApIHtcblx0XHRqUXVlcnkuZXJyb3IoIFwiSW52YWxpZCBYTUw6IFwiICsgKFxuXHRcdFx0cGFyc2VyRXJyb3JFbGVtID9cblx0XHRcdFx0alF1ZXJ5Lm1hcCggcGFyc2VyRXJyb3JFbGVtLmNoaWxkTm9kZXMsIGZ1bmN0aW9uKCBlbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWwudGV4dENvbnRlbnQ7XG5cdFx0XHRcdH0gKS5qb2luKCBcIlxcblwiICkgOlxuXHRcdFx0XHRkYXRhXG5cdFx0KSApO1xuXHR9XG5cdHJldHVybiB4bWw7XG59O1xuXG5cbnZhclxuXHRyYnJhY2tldCA9IC9cXFtcXF0kLyxcblx0ckNSTEYgPSAvXFxyP1xcbi9nLFxuXHRyc3VibWl0dGVyVHlwZXMgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2ksXG5cdHJzdWJtaXR0YWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuZnVuY3Rpb24gYnVpbGRQYXJhbXMoIHByZWZpeCwgb2JqLCB0cmFkaXRpb25hbCwgYWRkICkge1xuXHR2YXIgbmFtZTtcblxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIG9iaiApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIGFycmF5IGl0ZW0uXG5cdFx0alF1ZXJ5LmVhY2goIG9iaiwgZnVuY3Rpb24oIGksIHYgKSB7XG5cdFx0XHRpZiAoIHRyYWRpdGlvbmFsIHx8IHJicmFja2V0LnRlc3QoIHByZWZpeCApICkge1xuXG5cdFx0XHRcdC8vIFRyZWF0IGVhY2ggYXJyYXkgaXRlbSBhcyBhIHNjYWxhci5cblx0XHRcdFx0YWRkKCBwcmVmaXgsIHYgKTtcblxuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBJdGVtIGlzIG5vbi1zY2FsYXIgKGFycmF5IG9yIG9iamVjdCksIGVuY29kZSBpdHMgbnVtZXJpYyBpbmRleC5cblx0XHRcdFx0YnVpbGRQYXJhbXMoXG5cdFx0XHRcdFx0cHJlZml4ICsgXCJbXCIgKyAoIHR5cGVvZiB2ID09PSBcIm9iamVjdFwiICYmIHYgIT0gbnVsbCA/IGkgOiBcIlwiICkgKyBcIl1cIixcblx0XHRcdFx0XHR2LFxuXHRcdFx0XHRcdHRyYWRpdGlvbmFsLFxuXHRcdFx0XHRcdGFkZFxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblxuXHR9IGVsc2UgaWYgKCAhdHJhZGl0aW9uYWwgJiYgdG9UeXBlKCBvYmogKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBvYmplY3QgaXRlbS5cblx0XHRmb3IgKCBuYW1lIGluIG9iaiApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXggKyBcIltcIiArIG5hbWUgKyBcIl1cIiwgb2JqWyBuYW1lIF0sIHRyYWRpdGlvbmFsLCBhZGQgKTtcblx0XHR9XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIFNlcmlhbGl6ZSBzY2FsYXIgaXRlbS5cblx0XHRhZGQoIHByZWZpeCwgb2JqICk7XG5cdH1cbn1cblxuLy8gU2VyaWFsaXplIGFuIGFycmF5IG9mIGZvcm0gZWxlbWVudHMgb3IgYSBzZXQgb2Zcbi8vIGtleS92YWx1ZXMgaW50byBhIHF1ZXJ5IHN0cmluZ1xualF1ZXJ5LnBhcmFtID0gZnVuY3Rpb24oIGEsIHRyYWRpdGlvbmFsICkge1xuXHR2YXIgcHJlZml4LFxuXHRcdHMgPSBbXSxcblx0XHRhZGQgPSBmdW5jdGlvbigga2V5LCB2YWx1ZU9yRnVuY3Rpb24gKSB7XG5cblx0XHRcdC8vIElmIHZhbHVlIGlzIGEgZnVuY3Rpb24sIGludm9rZSBpdCBhbmQgdXNlIGl0cyByZXR1cm4gdmFsdWVcblx0XHRcdHZhciB2YWx1ZSA9IGlzRnVuY3Rpb24oIHZhbHVlT3JGdW5jdGlvbiApID9cblx0XHRcdFx0dmFsdWVPckZ1bmN0aW9uKCkgOlxuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb247XG5cblx0XHRcdHNbIHMubGVuZ3RoIF0gPSBlbmNvZGVVUklDb21wb25lbnQoIGtleSApICsgXCI9XCIgK1xuXHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKTtcblx0XHR9O1xuXG5cdGlmICggYSA9PSBudWxsICkge1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9ICkubWFwKCBmdW5jdGlvbiggX2ksIGVsZW0gKSB7XG5cdFx0XHR2YXIgdmFsID0galF1ZXJ5KCB0aGlzICkudmFsKCk7XG5cblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHRyZXR1cm4galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsICkge1xuXHRcdFx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHR9ICkuZ2V0KCk7XG5cdH1cbn0gKTtcblxuXG52YXJcblx0cjIwID0gLyUyMC9nLFxuXHRyaGFzaCA9IC8jLiokLyxcblx0cmFudGlDYWNoZSA9IC8oWz8mXSlfPVteJl0qLyxcblx0cmhlYWRlcnMgPSAvXiguKj8pOlsgXFx0XSooW15cXHJcXG5dKikkL21nLFxuXG5cdC8vICM3NjUzLCAjODEyNSwgIzgxNTI6IGxvY2FsIHByb3RvY29sIGRldGVjdGlvblxuXHRybG9jYWxQcm90b2NvbCA9IC9eKD86YWJvdXR8YXBwfGFwcC1zdG9yYWdlfC4rLWV4dGVuc2lvbnxmaWxlfHJlc3x3aWRnZXQpOiQvLFxuXHRybm9Db250ZW50ID0gL14oPzpHRVR8SEVBRCkkLyxcblx0cnByb3RvY29sID0gL15cXC9cXC8vLFxuXG5cdC8qIFByZWZpbHRlcnNcblx0ICogMSkgVGhleSBhcmUgdXNlZnVsIHRvIGludHJvZHVjZSBjdXN0b20gZGF0YVR5cGVzIChzZWUgYWpheC9qc29ucC5qcyBmb3IgYW4gZXhhbXBsZSlcblx0ICogMikgVGhlc2UgYXJlIGNhbGxlZDpcblx0ICogICAgLSBCRUZPUkUgYXNraW5nIGZvciBhIHRyYW5zcG9ydFxuXHQgKiAgICAtIEFGVEVSIHBhcmFtIHNlcmlhbGl6YXRpb24gKHMuZGF0YSBpcyBhIHN0cmluZyBpZiBzLnByb2Nlc3NEYXRhIGlzIHRydWUpXG5cdCAqIDMpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogNCkgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiA1KSBleGVjdXRpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBjb250aW51ZSBkb3duIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0cHJlZmlsdGVycyA9IHt9LFxuXG5cdC8qIFRyYW5zcG9ydHMgYmluZGluZ3Ncblx0ICogMSkga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiAyKSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDMpIHNlbGVjdGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGdvIHRvIFwiKlwiIGlmIG5lZWRlZFxuXHQgKi9cblx0dHJhbnNwb3J0cyA9IHt9LFxuXG5cdC8vIEF2b2lkIGNvbW1lbnQtcHJvbG9nIGNoYXIgc2VxdWVuY2UgKCMxMDA5OCk7IG11c3QgYXBwZWFzZSBsaW50IGFuZCBldmFkZSBjb21wcmVzc2lvblxuXHRhbGxUeXBlcyA9IFwiKi9cIi5jb25jYXQoIFwiKlwiICksXG5cblx0Ly8gQW5jaG9yIHRhZyBmb3IgcGFyc2luZyB0aGUgZG9jdW1lbnQgb3JpZ2luXG5cdG9yaWdpbkFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cbm9yaWdpbkFuY2hvci5ocmVmID0gbG9jYXRpb24uaHJlZjtcblxuLy8gQmFzZSBcImNvbnN0cnVjdG9yXCIgZm9yIGpRdWVyeS5hamF4UHJlZmlsdGVyIGFuZCBqUXVlcnkuYWpheFRyYW5zcG9ydFxuZnVuY3Rpb24gYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUgKSB7XG5cblx0Ly8gZGF0YVR5cGVFeHByZXNzaW9uIGlzIG9wdGlvbmFsIGFuZCBkZWZhdWx0cyB0byBcIipcIlxuXHRyZXR1cm4gZnVuY3Rpb24oIGRhdGFUeXBlRXhwcmVzc2lvbiwgZnVuYyApIHtcblxuXHRcdGlmICggdHlwZW9mIGRhdGFUeXBlRXhwcmVzc2lvbiAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGZ1bmMgPSBkYXRhVHlwZUV4cHJlc3Npb247XG5cdFx0XHRkYXRhVHlwZUV4cHJlc3Npb24gPSBcIipcIjtcblx0XHR9XG5cblx0XHR2YXIgZGF0YVR5cGUsXG5cdFx0XHRpID0gMCxcblx0XHRcdGRhdGFUeXBlcyA9IGRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gPVxuXHRcdFx0XHRcdFx0XHRcdFx0KCByZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSArIFwiIFwiIF0gfHwgW10gKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuY29uY2F0KCBtYXRjaFsgMiBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSArIFwiIFwiIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoLmpvaW4oIFwiLCBcIiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UuZ3VpZCsrICkgK1xuXHRcdFx0XHRcdHVuY2FjaGVkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQdXQgaGFzaCBhbmQgYW50aS1jYWNoZSBvbiB0aGUgVVJMIHRoYXQgd2lsbCBiZSByZXF1ZXN0ZWQgKGdoLTE3MzIpXG5cdFx0XHRzLnVybCA9IGNhY2hlVVJMICsgdW5jYWNoZWQ7XG5cblx0XHQvLyBDaGFuZ2UgJyUyMCcgdG8gJysnIGlmIHRoaXMgaXMgZW5jb2RlZCBmb3JtIGJvZHkgY29udGVudCAoZ2gtMjY1OClcblx0XHR9IGVsc2UgaWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJlxuXHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKS5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgKSB7XG5cdFx0XHRzLmRhdGEgPSBzLmRhdGEucmVwbGFjZSggcjIwLCBcIitcIiApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0aWYgKCBzLmlmTW9kaWZpZWQgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTW9kaWZpZWQtU2luY2VcIiwgalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Ob25lLU1hdGNoXCIsIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBjb3JyZWN0IGhlYWRlciwgaWYgZGF0YSBpcyBiZWluZyBzZW50XG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5oYXNDb250ZW50ICYmIHMuY29udGVudFR5cGUgIT09IGZhbHNlIHx8IG9wdGlvbnMuY29udGVudFR5cGUgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiLCBzLmNvbnRlbnRUeXBlICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBBY2NlcHRzIGhlYWRlciBmb3IgdGhlIHNlcnZlciwgZGVwZW5kaW5nIG9uIHRoZSBkYXRhVHlwZVxuXHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXG5cdFx0XHRcIkFjY2VwdFwiLFxuXHRcdFx0cy5kYXRhVHlwZXNbIDAgXSAmJiBzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSA/XG5cdFx0XHRcdHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdICtcblx0XHRcdFx0XHQoIHMuZGF0YVR5cGVzWyAwIF0gIT09IFwiKlwiID8gXCIsIFwiICsgYWxsVHlwZXMgKyBcIjsgcT0wLjAxXCIgOiBcIlwiICkgOlxuXHRcdFx0XHRzLmFjY2VwdHNbIFwiKlwiIF1cblx0XHQpO1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIGhlYWRlcnMgb3B0aW9uXG5cdFx0Zm9yICggaSBpbiBzLmhlYWRlcnMgKSB7XG5cdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBpLCBzLmhlYWRlcnNbIGkgXSApO1xuXHRcdH1cblxuXHRcdC8vIEFsbG93IGN1c3RvbSBoZWFkZXJzL21pbWV0eXBlcyBhbmQgZWFybHkgYWJvcnRcblx0XHRpZiAoIHMuYmVmb3JlU2VuZCAmJlxuXHRcdFx0KCBzLmJlZm9yZVNlbmQuY2FsbCggY2FsbGJhY2tDb250ZXh0LCBqcVhIUiwgcyApID09PSBmYWxzZSB8fCBjb21wbGV0ZWQgKSApIHtcblxuXHRcdFx0Ly8gQWJvcnQgaWYgbm90IGRvbmUgYWxyZWFkeSBhbmQgcmV0dXJuXG5cdFx0XHRyZXR1cm4ganFYSFIuYWJvcnQoKTtcblx0XHR9XG5cblx0XHQvLyBBYm9ydGluZyBpcyBubyBsb25nZXIgYSBjYW5jZWxsYXRpb25cblx0XHRzdHJBYm9ydCA9IFwiYWJvcnRcIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tzIG9uIGRlZmVycmVkc1xuXHRcdGNvbXBsZXRlRGVmZXJyZWQuYWRkKCBzLmNvbXBsZXRlICk7XG5cdFx0anFYSFIuZG9uZSggcy5zdWNjZXNzICk7XG5cdFx0anFYSFIuZmFpbCggcy5lcnJvciApO1xuXG5cdFx0Ly8gR2V0IHRyYW5zcG9ydFxuXHRcdHRyYW5zcG9ydCA9IGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgbm8gdHJhbnNwb3J0LCB3ZSBhdXRvLWFib3J0XG5cdFx0aWYgKCAhdHJhbnNwb3J0ICkge1xuXHRcdFx0ZG9uZSggLTEsIFwiTm8gVHJhbnNwb3J0XCIgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IDE7XG5cblx0XHRcdC8vIFNlbmQgZ2xvYmFsIGV2ZW50XG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggXCJhamF4U2VuZFwiLCBbIGpxWEhSLCBzIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYWpheFNlbmQsIHN0b3AgdGhlcmVcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRpbWVvdXRcblx0XHRcdGlmICggcy5hc3luYyAmJiBzLnRpbWVvdXQgPiAwICkge1xuXHRcdFx0XHR0aW1lb3V0VGltZXIgPSB3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0anFYSFIuYWJvcnQoIFwidGltZW91dFwiICk7XG5cdFx0XHRcdH0sIHMudGltZW91dCApO1xuXHRcdFx0fVxuXG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb21wbGV0ZWQgPSBmYWxzZTtcblx0XHRcdFx0dHJhbnNwb3J0LnNlbmQoIHJlcXVlc3RIZWFkZXJzLCBkb25lICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBSZXRocm93IHBvc3QtY29tcGxldGlvbiBleGNlcHRpb25zXG5cdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBQcm9wYWdhdGUgb3RoZXJzIGFzIHJlc3VsdHNcblx0XHRcdFx0ZG9uZSggLTEsIGUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsYmFjayBmb3Igd2hlbiBldmVyeXRoaW5nIGlzIGRvbmVcblx0XHRmdW5jdGlvbiBkb25lKCBzdGF0dXMsIG5hdGl2ZVN0YXR1c1RleHQsIHJlc3BvbnNlcywgaGVhZGVycyApIHtcblx0XHRcdHZhciBpc1N1Y2Nlc3MsIHN1Y2Nlc3MsIGVycm9yLCByZXNwb25zZSwgbW9kaWZpZWQsXG5cdFx0XHRcdHN0YXR1c1RleHQgPSBuYXRpdmVTdGF0dXNUZXh0O1xuXG5cdFx0XHQvLyBJZ25vcmUgcmVwZWF0IGludm9jYXRpb25zXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb21wbGV0ZWQgPSB0cnVlO1xuXG5cdFx0XHQvLyBDbGVhciB0aW1lb3V0IGlmIGl0IGV4aXN0c1xuXHRcdFx0aWYgKCB0aW1lb3V0VGltZXIgKSB7XG5cdFx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXRUaW1lciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXJlZmVyZW5jZSB0cmFuc3BvcnQgZm9yIGVhcmx5IGdhcmJhZ2UgY29sbGVjdGlvblxuXHRcdFx0Ly8gKG5vIG1hdHRlciBob3cgbG9uZyB0aGUganFYSFIgb2JqZWN0IHdpbGwgYmUgdXNlZClcblx0XHRcdHRyYW5zcG9ydCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0Ly8gQ2FjaGUgcmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nID0gaGVhZGVycyB8fCBcIlwiO1xuXG5cdFx0XHQvLyBTZXQgcmVhZHlTdGF0ZVxuXHRcdFx0anFYSFIucmVhZHlTdGF0ZSA9IHN0YXR1cyA+IDAgPyA0IDogMDtcblxuXHRcdFx0Ly8gRGV0ZXJtaW5lIGlmIHN1Y2Nlc3NmdWxcblx0XHRcdGlzU3VjY2VzcyA9IHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwIHx8IHN0YXR1cyA9PT0gMzA0O1xuXG5cdFx0XHQvLyBHZXQgcmVzcG9uc2UgZGF0YVxuXHRcdFx0aWYgKCByZXNwb25zZXMgKSB7XG5cdFx0XHRcdHJlc3BvbnNlID0gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVc2UgYSBub29wIGNvbnZlcnRlciBmb3IgbWlzc2luZyBzY3JpcHQgYnV0IG5vdCBpZiBqc29ucFxuXHRcdFx0aWYgKCAhaXNTdWNjZXNzICYmXG5cdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBcInNjcmlwdFwiLCBzLmRhdGFUeXBlcyApID4gLTEgJiZcblx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIFwianNvblwiLCBzLmRhdGFUeXBlcyApIDwgMCApIHtcblx0XHRcdFx0cy5jb252ZXJ0ZXJzWyBcInRleHQgc2NyaXB0XCIgXSA9IGZ1bmN0aW9uKCkge307XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIF9pLCBtZXRob2QgKSB7XG5cdGpRdWVyeVsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjaywgdHlwZSApIHtcblxuXHRcdC8vIFNoaWZ0IGFyZ3VtZW50cyBpZiBkYXRhIGFyZ3VtZW50IHdhcyBvbWl0dGVkXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBkYXRhICkgKSB7XG5cdFx0XHR0eXBlID0gdHlwZSB8fCBjYWxsYmFjaztcblx0XHRcdGNhbGxiYWNrID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gVGhlIHVybCBjYW4gYmUgYW4gb3B0aW9ucyBvYmplY3QgKHdoaWNoIHRoZW4gbXVzdCBoYXZlIC51cmwpXG5cdFx0cmV0dXJuIGpRdWVyeS5hamF4KCBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHR1cmw6IHVybCxcblx0XHRcdHR5cGU6IG1ldGhvZCxcblx0XHRcdGRhdGFUeXBlOiB0eXBlLFxuXHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdHN1Y2Nlc3M6IGNhbGxiYWNrXG5cdFx0fSwgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHVybCApICYmIHVybCApICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0dmFyIGk7XG5cdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdGlmICggaS50b0xvd2VyQ2FzZSgpID09PSBcImNvbnRlbnQtdHlwZVwiICkge1xuXHRcdFx0cy5jb250ZW50VHlwZSA9IHMuaGVhZGVyc1sgaSBdIHx8IFwiXCI7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5Ll9ldmFsVXJsID0gZnVuY3Rpb24oIHVybCwgb3B0aW9ucywgZG9jICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cblx0XHQvLyBPbmx5IGV2YWx1YXRlIHRoZSByZXNwb25zZSBpZiBpdCBpcyBzdWNjZXNzZnVsIChnaC00MTI2KVxuXHRcdC8vIGRhdGFGaWx0ZXIgaXMgbm90IGludm9rZWQgZm9yIGZhaWx1cmUgcmVzcG9uc2VzLCBzbyB1c2luZyBpdCBpbnN0ZWFkXG5cdFx0Ly8gb2YgdGhlIGRlZmF1bHQgY29udmVydGVyIGlzIGtsdWRneSBidXQgaXQgd29ya3MuXG5cdFx0Y29udmVydGVyczoge1xuXHRcdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbigpIHt9XG5cdFx0fSxcblx0XHRkYXRhRmlsdGVyOiBmdW5jdGlvbiggcmVzcG9uc2UgKSB7XG5cdFx0XHRqUXVlcnkuZ2xvYmFsRXZhbCggcmVzcG9uc2UsIG9wdGlvbnMsIGRvYyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlLmd1aWQrKyApICk7XG5cdFx0dGhpc1sgY2FsbGJhY2sgXSA9IHRydWU7XG5cdFx0cmV0dXJuIGNhbGxiYWNrO1xuXHR9XG59ICk7XG5cbi8vIERldGVjdCwgbm9ybWFsaXplIG9wdGlvbnMgYW5kIGluc3RhbGwgY2FsbGJhY2tzIGZvciBqc29ucCByZXF1ZXN0c1xualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwianNvbiBqc29ucFwiLCBmdW5jdGlvbiggcywgb3JpZ2luYWxTZXR0aW5ncywganFYSFIgKSB7XG5cblx0dmFyIGNhbGxiYWNrTmFtZSwgb3ZlcndyaXR0ZW4sIHJlc3BvbnNlQ29udGFpbmVyLFxuXHRcdGpzb25Qcm9wID0gcy5qc29ucCAhPT0gZmFsc2UgJiYgKCByanNvbnAudGVzdCggcy51cmwgKSA/XG5cdFx0XHRcInVybFwiIDpcblx0XHRcdHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0KCBzLmNvbnRlbnRUeXBlIHx8IFwiXCIgKVxuXHRcdFx0XHRcdC5pbmRleE9mKCBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiICkgPT09IDAgJiZcblx0XHRcdFx0cmpzb25wLnRlc3QoIHMuZGF0YSApICYmIFwiZGF0YVwiXG5cdFx0KTtcblxuXHQvLyBIYW5kbGUgaWZmIHRoZSBleHBlY3RlZCBkYXRhIHR5cGUgaXMgXCJqc29ucFwiIG9yIHdlIGhhdmUgYSBwYXJhbWV0ZXIgdG8gc2V0XG5cdGlmICgganNvblByb3AgfHwgcy5kYXRhVHlwZXNbIDAgXSA9PT0gXCJqc29ucFwiICkge1xuXG5cdFx0Ly8gR2V0IGNhbGxiYWNrIG5hbWUsIHJlbWVtYmVyaW5nIHByZWV4aXN0aW5nIHZhbHVlIGFzc29jaWF0ZWQgd2l0aCBpdFxuXHRcdGNhbGxiYWNrTmFtZSA9IHMuanNvbnBDYWxsYmFjayA9IGlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBpc0Z1bmN0aW9uKCBvdmVyd3JpdHRlbiApICkge1xuXHRcdFx0XHRvdmVyd3JpdHRlbiggcmVzcG9uc2VDb250YWluZXJbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IG92ZXJ3cml0dGVuID0gdW5kZWZpbmVkO1xuXHRcdH0gKTtcblxuXHRcdC8vIERlbGVnYXRlIHRvIHNjcmlwdFxuXHRcdHJldHVybiBcInNjcmlwdFwiO1xuXHR9XG59ICk7XG5cblxuXG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA4IG9ubHlcbi8vIEluIFNhZmFyaSA4IGRvY3VtZW50cyBjcmVhdGVkIHZpYSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnRcbi8vIGNvbGxhcHNlIHNpYmxpbmcgZm9ybXM6IHRoZSBzZWNvbmQgb25lIGJlY29tZXMgYSBjaGlsZCBvZiB0aGUgZmlyc3Qgb25lLlxuLy8gQmVjYXVzZSBvZiB0aGF0LCB0aGlzIHNlY3VyaXR5IG1lYXN1cmUgaGFzIHRvIGJlIGRpc2FibGVkIGluIFNhZmFyaSA4LlxuLy8gaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTEzNzMzN1xuc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgPSAoIGZ1bmN0aW9uKCkge1xuXHR2YXIgYm9keSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApLmJvZHk7XG5cdGJvZHkuaW5uZXJIVE1MID0gXCI8Zm9ybT48L2Zvcm0+PGZvcm0+PC9mb3JtPlwiO1xuXHRyZXR1cm4gYm9keS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMjtcbn0gKSgpO1xuXG5cbi8vIEFyZ3VtZW50IFwiZGF0YVwiIHNob3VsZCBiZSBzdHJpbmcgb2YgaHRtbFxuLy8gY29udGV4dCAob3B0aW9uYWwpOiBJZiBzcGVjaWZpZWQsIHRoZSBmcmFnbWVudCB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBjb250ZXh0LFxuLy8gZGVmYXVsdHMgdG8gZG9jdW1lbnRcbi8vIGtlZXBTY3JpcHRzIChvcHRpb25hbCk6IElmIHRydWUsIHdpbGwgaW5jbHVkZSBzY3JpcHRzIHBhc3NlZCBpbiB0aGUgaHRtbCBzdHJpbmdcbmpRdWVyeS5wYXJzZUhUTUwgPSBmdW5jdGlvbiggZGF0YSwgY29udGV4dCwga2VlcFNjcmlwdHMgKSB7XG5cdGlmICggdHlwZW9mIGRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cdGlmICggdHlwZW9mIGNvbnRleHQgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdGtlZXBTY3JpcHRzID0gY29udGV4dDtcblx0XHRjb250ZXh0ID0gZmFsc2U7XG5cdH1cblxuXHR2YXIgYmFzZSwgcGFyc2VkLCBzY3JpcHRzO1xuXG5cdGlmICggIWNvbnRleHQgKSB7XG5cblx0XHQvLyBTdG9wIHNjcmlwdHMgb3IgaW5saW5lIGV2ZW50IGhhbmRsZXJzIGZyb20gYmVpbmcgZXhlY3V0ZWQgaW1tZWRpYXRlbHlcblx0XHQvLyBieSB1c2luZyBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuXHRcdGlmICggc3VwcG9ydC5jcmVhdGVIVE1MRG9jdW1lbnQgKSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KCBcIlwiICk7XG5cblx0XHRcdC8vIFNldCB0aGUgYmFzZSBocmVmIGZvciB0aGUgY3JlYXRlZCBkb2N1bWVudFxuXHRcdFx0Ly8gc28gYW55IHBhcnNlZCBlbGVtZW50cyB3aXRoIFVSTHNcblx0XHRcdC8vIGFyZSBiYXNlZCBvbiB0aGUgZG9jdW1lbnQncyBVUkwgKGdoLTI5NjUpXG5cdFx0XHRiYXNlID0gY29udGV4dC5jcmVhdGVFbGVtZW50KCBcImJhc2VcIiApO1xuXHRcdFx0YmFzZS5ocmVmID0gZG9jdW1lbnQubG9jYXRpb24uaHJlZjtcblx0XHRcdGNvbnRleHQuaGVhZC5hcHBlbmRDaGlsZCggYmFzZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb250ZXh0ID0gZG9jdW1lbnQ7XG5cdFx0fVxuXHR9XG5cblx0cGFyc2VkID0gcnNpbmdsZVRhZy5leGVjKCBkYXRhICk7XG5cdHNjcmlwdHMgPSAha2VlcFNjcmlwdHMgJiYgW107XG5cblx0Ly8gU2luZ2xlIHRhZ1xuXHRpZiAoIHBhcnNlZCApIHtcblx0XHRyZXR1cm4gWyBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIHBhcnNlZFsgMSBdICkgXTtcblx0fVxuXG5cdHBhcnNlZCA9IGJ1aWxkRnJhZ21lbnQoIFsgZGF0YSBdLCBjb250ZXh0LCBzY3JpcHRzICk7XG5cblx0aWYgKCBzY3JpcHRzICYmIHNjcmlwdHMubGVuZ3RoICkge1xuXHRcdGpRdWVyeSggc2NyaXB0cyApLnJlbW92ZSgpO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIHBhcnNlZC5jaGlsZE5vZGVzICk7XG59O1xuXG5cbi8qKlxuICogTG9hZCBhIHVybCBpbnRvIGEgcGFnZVxuICovXG5qUXVlcnkuZm4ubG9hZCA9IGZ1bmN0aW9uKCB1cmwsIHBhcmFtcywgY2FsbGJhY2sgKSB7XG5cdHZhciBzZWxlY3RvciwgdHlwZSwgcmVzcG9uc2UsXG5cdFx0c2VsZiA9IHRoaXMsXG5cdFx0b2ZmID0gdXJsLmluZGV4T2YoIFwiIFwiICk7XG5cblx0aWYgKCBvZmYgPiAtMSApIHtcblx0XHRzZWxlY3RvciA9IHN0cmlwQW5kQ29sbGFwc2UoIHVybC5zbGljZSggb2ZmICkgKTtcblx0XHR1cmwgPSB1cmwuc2xpY2UoIDAsIG9mZiApO1xuXHR9XG5cblx0Ly8gSWYgaXQncyBhIGZ1bmN0aW9uXG5cdGlmICggaXNGdW5jdGlvbiggcGFyYW1zICkgKSB7XG5cblx0XHQvLyBXZSBhc3N1bWUgdGhhdCBpdCdzIHRoZSBjYWxsYmFja1xuXHRcdGNhbGxiYWNrID0gcGFyYW1zO1xuXHRcdHBhcmFtcyA9IHVuZGVmaW5lZDtcblxuXHQvLyBPdGhlcndpc2UsIGJ1aWxkIGEgcGFyYW0gc3RyaW5nXG5cdH0gZWxzZSBpZiAoIHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSBcIm9iamVjdFwiICkge1xuXHRcdHR5cGUgPSBcIlBPU1RcIjtcblx0fVxuXG5cdC8vIElmIHdlIGhhdmUgZWxlbWVudHMgdG8gbW9kaWZ5LCBtYWtlIHRoZSByZXF1ZXN0XG5cdGlmICggc2VsZi5sZW5ndGggPiAwICkge1xuXHRcdGpRdWVyeS5hamF4KCB7XG5cdFx0XHR1cmw6IHVybCxcblxuXHRcdFx0Ly8gSWYgXCJ0eXBlXCIgdmFyaWFibGUgaXMgdW5kZWZpbmVkLCB0aGVuIFwiR0VUXCIgbWV0aG9kIHdpbGwgYmUgdXNlZC5cblx0XHRcdC8vIE1ha2UgdmFsdWUgb2YgdGhpcyBmaWVsZCBleHBsaWNpdCBzaW5jZVxuXHRcdFx0Ly8gdXNlciBjYW4gb3ZlcnJpZGUgaXQgdGhyb3VnaCBhamF4U2V0dXAgbWV0aG9kXG5cdFx0XHR0eXBlOiB0eXBlIHx8IFwiR0VUXCIsXG5cdFx0XHRkYXRhVHlwZTogXCJodG1sXCIsXG5cdFx0XHRkYXRhOiBwYXJhbXNcblx0XHR9ICkuZG9uZSggZnVuY3Rpb24oIHJlc3BvbnNlVGV4dCApIHtcblxuXHRcdFx0Ly8gU2F2ZSByZXNwb25zZSBmb3IgdXNlIGluIGNvbXBsZXRlIGNhbGxiYWNrXG5cdFx0XHRyZXNwb25zZSA9IGFyZ3VtZW50cztcblxuXHRcdFx0c2VsZi5odG1sKCBzZWxlY3RvciA/XG5cblx0XHRcdFx0Ly8gSWYgYSBzZWxlY3RvciB3YXMgc3BlY2lmaWVkLCBsb2NhdGUgdGhlIHJpZ2h0IGVsZW1lbnRzIGluIGEgZHVtbXkgZGl2XG5cdFx0XHRcdC8vIEV4Y2x1ZGUgc2NyaXB0cyB0byBhdm9pZCBJRSAnUGVybWlzc2lvbiBEZW5pZWQnIGVycm9yc1xuXHRcdFx0XHRqUXVlcnkoIFwiPGRpdj5cIiApLmFwcGVuZCggalF1ZXJ5LnBhcnNlSFRNTCggcmVzcG9uc2VUZXh0ICkgKS5maW5kKCBzZWxlY3RvciApIDpcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgdXNlIHRoZSBmdWxsIHJlc3VsdFxuXHRcdFx0XHRyZXNwb25zZVRleHQgKTtcblxuXHRcdC8vIElmIHRoZSByZXF1ZXN0IHN1Y2NlZWRzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJkYXRhXCIsIFwic3RhdHVzXCIsIFwianFYSFJcIlxuXHRcdC8vIGJ1dCB0aGV5IGFyZSBpZ25vcmVkIGJlY2F1c2UgcmVzcG9uc2Ugd2FzIHNldCBhYm92ZS5cblx0XHQvLyBJZiBpdCBmYWlscywgdGhpcyBmdW5jdGlvbiBnZXRzIFwianFYSFJcIiwgXCJzdGF0dXNcIiwgXCJlcnJvclwiXG5cdFx0fSApLmFsd2F5cyggY2FsbGJhY2sgJiYgZnVuY3Rpb24oIGpxWEhSLCBzdGF0dXMgKSB7XG5cdFx0XHRzZWxmLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRjYWxsYmFjay5hcHBseSggdGhpcywgcmVzcG9uc2UgfHwgWyBqcVhIUi5yZXNwb25zZVRleHQsIHN0YXR1cywganFYSFIgXSApO1xuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdHJldHVybiB0aGlzO1xufTtcblxuXG5cblxualF1ZXJ5LmV4cHIucHNldWRvcy5hbmltYXRlZCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4galF1ZXJ5LmdyZXAoIGpRdWVyeS50aW1lcnMsIGZ1bmN0aW9uKCBmbiApIHtcblx0XHRyZXR1cm4gZWxlbSA9PT0gZm4uZWxlbTtcblx0fSApLmxlbmd0aDtcbn07XG5cblxuXG5cbmpRdWVyeS5vZmZzZXQgPSB7XG5cdHNldE9mZnNldDogZnVuY3Rpb24oIGVsZW0sIG9wdGlvbnMsIGkgKSB7XG5cdFx0dmFyIGN1clBvc2l0aW9uLCBjdXJMZWZ0LCBjdXJDU1NUb3AsIGN1clRvcCwgY3VyT2Zmc2V0LCBjdXJDU1NMZWZ0LCBjYWxjdWxhdGVQb3NpdGlvbixcblx0XHRcdHBvc2l0aW9uID0galF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICksXG5cdFx0XHRjdXJFbGVtID0galF1ZXJ5KCBlbGVtICksXG5cdFx0XHRwcm9wcyA9IHt9O1xuXG5cdFx0Ly8gU2V0IHBvc2l0aW9uIGZpcnN0LCBpbi1jYXNlIHRvcC9sZWZ0IGFyZSBzZXQgZXZlbiBvbiBzdGF0aWMgZWxlbVxuXHRcdGlmICggcG9zaXRpb24gPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRlbGVtLnN0eWxlLnBvc2l0aW9uID0gXCJyZWxhdGl2ZVwiO1xuXHRcdH1cblxuXHRcdGN1ck9mZnNldCA9IGN1ckVsZW0ub2Zmc2V0KCk7XG5cdFx0Y3VyQ1NTVG9wID0galF1ZXJ5LmNzcyggZWxlbSwgXCJ0b3BcIiApO1xuXHRcdGN1ckNTU0xlZnQgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImxlZnRcIiApO1xuXHRcdGNhbGN1bGF0ZVBvc2l0aW9uID0gKCBwb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiIHx8IHBvc2l0aW9uID09PSBcImZpeGVkXCIgKSAmJlxuXHRcdFx0KCBjdXJDU1NUb3AgKyBjdXJDU1NMZWZ0ICkuaW5kZXhPZiggXCJhdXRvXCIgKSA+IC0xO1xuXG5cdFx0Ly8gTmVlZCB0byBiZSBhYmxlIHRvIGNhbGN1bGF0ZSBwb3NpdGlvbiBpZiBlaXRoZXJcblx0XHQvLyB0b3Agb3IgbGVmdCBpcyBhdXRvIGFuZCBwb3NpdGlvbiBpcyBlaXRoZXIgYWJzb2x1dGUgb3IgZml4ZWRcblx0XHRpZiAoIGNhbGN1bGF0ZVBvc2l0aW9uICkge1xuXHRcdFx0Y3VyUG9zaXRpb24gPSBjdXJFbGVtLnBvc2l0aW9uKCk7XG5cdFx0XHRjdXJUb3AgPSBjdXJQb3NpdGlvbi50b3A7XG5cdFx0XHRjdXJMZWZ0ID0gY3VyUG9zaXRpb24ubGVmdDtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJUb3AgPSBwYXJzZUZsb2F0KCBjdXJDU1NUb3AgKSB8fCAwO1xuXHRcdFx0Y3VyTGVmdCA9IHBhcnNlRmxvYXQoIGN1ckNTU0xlZnQgKSB8fCAwO1xuXHRcdH1cblxuXHRcdGlmICggaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdC8vIG9mZnNldCgpIHJlbGF0ZXMgYW4gZWxlbWVudCdzIGJvcmRlciBib3ggdG8gdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIHJlY3QsIHdpbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFlbGVtICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB6ZXJvcyBmb3IgZGlzY29ubmVjdGVkIGFuZCBoaWRkZW4gKGRpc3BsYXk6IG5vbmUpIGVsZW1lbnRzIChnaC0yMzEwKVxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHRcdC8vIFJ1bm5pbmcgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IG9uIGFcblx0XHQvLyBkaXNjb25uZWN0ZWQgbm9kZSBpbiBJRSB0aHJvd3MgYW4gZXJyb3Jcblx0XHRpZiAoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICkge1xuXHRcdFx0cmV0dXJuIHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cdFx0fVxuXG5cdFx0Ly8gR2V0IGRvY3VtZW50LXJlbGF0aXZlIHBvc2l0aW9uIGJ5IGFkZGluZyB2aWV3cG9ydCBzY3JvbGwgdG8gdmlld3BvcnQtcmVsYXRpdmUgZ0JDUlxuXHRcdHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXHRcdHdpbiA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldztcblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCxcblx0XHRcdGxlZnQ6IHJlY3QubGVmdCArIHdpbi5wYWdlWE9mZnNldFxuXHRcdH07XG5cdH0sXG5cblx0Ly8gcG9zaXRpb24oKSByZWxhdGVzIGFuIGVsZW1lbnQncyBtYXJnaW4gYm94IHRvIGl0cyBvZmZzZXQgcGFyZW50J3MgcGFkZGluZyBib3hcblx0Ly8gVGhpcyBjb3JyZXNwb25kcyB0byB0aGUgYmVoYXZpb3Igb2YgQ1NTIGFic29sdXRlIHBvc2l0aW9uaW5nXG5cdHBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRpZiAoICF0aGlzWyAwIF0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIG9mZnNldFBhcmVudCwgb2Zmc2V0LCBkb2MsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0cGFyZW50T2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblxuXHRcdC8vIHBvc2l0aW9uOmZpeGVkIGVsZW1lbnRzIGFyZSBvZmZzZXQgZnJvbSB0aGUgdmlld3BvcnQsIHdoaWNoIGl0c2VsZiBhbHdheXMgaGFzIHplcm8gb2Zmc2V0XG5cdFx0aWYgKCBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSA9PT0gXCJmaXhlZFwiICkge1xuXG5cdFx0XHQvLyBBc3N1bWUgcG9zaXRpb246Zml4ZWQgaW1wbGllcyBhdmFpbGFiaWxpdHkgb2YgZ2V0Qm91bmRpbmdDbGllbnRSZWN0XG5cdFx0XHRvZmZzZXQgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdG9mZnNldCA9IHRoaXMub2Zmc2V0KCk7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHRoZSAqcmVhbCogb2Zmc2V0IHBhcmVudCwgd2hpY2ggY2FuIGJlIHRoZSBkb2N1bWVudCBvciBpdHMgcm9vdCBlbGVtZW50XG5cdFx0XHQvLyB3aGVuIGEgc3RhdGljYWxseSBwb3NpdGlvbmVkIGVsZW1lbnQgaXMgaWRlbnRpZmllZFxuXHRcdFx0ZG9jID0gZWxlbS5vd25lckRvY3VtZW50O1xuXHRcdFx0b2Zmc2V0UGFyZW50ID0gZWxlbS5vZmZzZXRQYXJlbnQgfHwgZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmXG5cdFx0XHRcdCggb2Zmc2V0UGFyZW50ID09PSBkb2MuYm9keSB8fCBvZmZzZXRQYXJlbnQgPT09IGRvYy5kb2N1bWVudEVsZW1lbnQgKSAmJlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwicG9zaXRpb25cIiApID09PSBcInN0YXRpY1wiICkge1xuXG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5wYXJlbnROb2RlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0UGFyZW50ICE9PSBlbGVtICYmIG9mZnNldFBhcmVudC5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSBib3JkZXJzIGludG8gaXRzIG9mZnNldCwgc2luY2UgdGhleSBhcmUgb3V0c2lkZSBpdHMgY29udGVudCBvcmlnaW5cblx0XHRcdFx0cGFyZW50T2Zmc2V0ID0galF1ZXJ5KCBvZmZzZXRQYXJlbnQgKS5vZmZzZXQoKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LnRvcCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyVG9wV2lkdGhcIiwgdHJ1ZSApO1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQubGVmdCArPSBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnQsIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXHRcdFx0XHR3aW4gPSBlbGVtO1xuXHRcdFx0fSBlbHNlIGlmICggZWxlbS5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0d2luID0gZWxlbS5kZWZhdWx0Vmlldztcblx0XHRcdH1cblxuXHRcdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHdpbiA/IHdpblsgcHJvcCBdIDogZWxlbVsgbWV0aG9kIF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICggd2luICkge1xuXHRcdFx0XHR3aW4uc2Nyb2xsVG8oXG5cdFx0XHRcdFx0IXRvcCA/IHZhbCA6IHdpbi5wYWdlWE9mZnNldCxcblx0XHRcdFx0XHR0b3AgPyB2YWwgOiB3aW4ucGFnZVlPZmZzZXRcblx0XHRcdFx0KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbVsgbWV0aG9kIF0gPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSwgbWV0aG9kLCB2YWwsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fTtcbn0gKTtcblxuLy8gU3VwcG9ydDogU2FmYXJpIDw9NyAtIDkuMSwgQ2hyb21lIDw9MzcgLSA0OVxuLy8gQWRkIHRoZSB0b3AvbGVmdCBjc3NIb29rcyB1c2luZyBqUXVlcnkuZm4ucG9zaXRpb25cbi8vIFdlYmtpdCBidWc6IGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0yOTA4NFxuLy8gQmxpbmsgYnVnOiBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD01ODkzNDdcbi8vIGdldENvbXB1dGVkU3R5bGUgcmV0dXJucyBwZXJjZW50IHdoZW4gc3BlY2lmaWVkIGZvciB0b3AvbGVmdC9ib3R0b20vcmlnaHQ7XG4vLyByYXRoZXIgdGhhbiBtYWtlIHRoZSBjc3MgbW9kdWxlIGRlcGVuZCBvbiB0aGUgb2Zmc2V0IG1vZHVsZSwganVzdCBjaGVjayBmb3IgaXQgaGVyZVxualF1ZXJ5LmVhY2goIFsgXCJ0b3BcIiwgXCJsZWZ0XCIgXSwgZnVuY3Rpb24oIF9pLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7XG5cdFx0cGFkZGluZzogXCJpbm5lclwiICsgbmFtZSxcblx0XHRjb250ZW50OiB0eXBlLFxuXHRcdFwiXCI6IFwib3V0ZXJcIiArIG5hbWVcblx0fSwgZnVuY3Rpb24oIGRlZmF1bHRFeHRyYSwgZnVuY05hbWUgKSB7XG5cblx0XHQvLyBNYXJnaW4gaXMgb25seSBmb3Igb3V0ZXJIZWlnaHQsIG91dGVyV2lkdGhcblx0XHRqUXVlcnkuZm5bIGZ1bmNOYW1lIF0gPSBmdW5jdGlvbiggbWFyZ2luLCB2YWx1ZSApIHtcblx0XHRcdHZhciBjaGFpbmFibGUgPSBhcmd1bWVudHMubGVuZ3RoICYmICggZGVmYXVsdEV4dHJhIHx8IHR5cGVvZiBtYXJnaW4gIT09IFwiYm9vbGVhblwiICksXG5cdFx0XHRcdGV4dHJhID0gZGVmYXVsdEV4dHJhIHx8ICggbWFyZ2luID09PSB0cnVlIHx8IHZhbHVlID09PSB0cnVlID8gXCJtYXJnaW5cIiA6IFwiYm9yZGVyXCIgKTtcblxuXHRcdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIHR5cGUsIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgZG9jO1xuXG5cdFx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggX2ksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9LFxuXG5cdGhvdmVyOiBmdW5jdGlvbiggZm5PdmVyLCBmbk91dCApIHtcblx0XHRyZXR1cm4gdGhpcy5tb3VzZWVudGVyKCBmbk92ZXIgKS5tb3VzZWxlYXZlKCBmbk91dCB8fCBmbk92ZXIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaChcblx0KCBcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIFwiICtcblx0XCJtb3VzZWRvd24gbW91c2V1cCBtb3VzZW1vdmUgbW91c2VvdmVyIG1vdXNlb3V0IG1vdXNlZW50ZXIgbW91c2VsZWF2ZSBcIiArXG5cdFwiY2hhbmdlIHNlbGVjdCBzdWJtaXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBjb250ZXh0bWVudVwiICkuc3BsaXQoIFwiIFwiICksXG5cdGZ1bmN0aW9uKCBfaSwgbmFtZSApIHtcblxuXHRcdC8vIEhhbmRsZSBldmVudCBiaW5kaW5nXG5cdFx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0XHR0aGlzLm9uKCBuYW1lLCBudWxsLCBkYXRhLCBmbiApIDpcblx0XHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdFx0fTtcblx0fVxuKTtcblxuXG5cblxuLy8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG4vLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1BcbnZhciBydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxualF1ZXJ5LnRyaW0gPSBmdW5jdGlvbiggdGV4dCApIHtcblx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XCJcIiA6XG5cdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG59O1xuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggdHlwZW9mIG5vR2xvYmFsID09PSBcInVuZGVmaW5lZFwiICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE3LjAuMlxuICogcmVhY3QucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49NjAxMDMscD02MDEwNjtleHBvcnRzLkZyYWdtZW50PTYwMTA3O2V4cG9ydHMuU3RyaWN0TW9kZT02MDEwODtleHBvcnRzLlByb2ZpbGVyPTYwMTE0O3ZhciBxPTYwMTA5LHI9NjAxMTAsdD02MDExMjtleHBvcnRzLlN1c3BlbnNlPTYwMTEzO3ZhciB1PTYwMTE1LHY9NjAxMTY7XG5pZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yKXt2YXIgdz1TeW1ib2wuZm9yO249dyhcInJlYWN0LmVsZW1lbnRcIik7cD13KFwicmVhY3QucG9ydGFsXCIpO2V4cG9ydHMuRnJhZ21lbnQ9dyhcInJlYWN0LmZyYWdtZW50XCIpO2V4cG9ydHMuU3RyaWN0TW9kZT13KFwicmVhY3Quc3RyaWN0X21vZGVcIik7ZXhwb3J0cy5Qcm9maWxlcj13KFwicmVhY3QucHJvZmlsZXJcIik7cT13KFwicmVhY3QucHJvdmlkZXJcIik7cj13KFwicmVhY3QuY29udGV4dFwiKTt0PXcoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTtleHBvcnRzLlN1c3BlbnNlPXcoXCJyZWFjdC5zdXNwZW5zZVwiKTt1PXcoXCJyZWFjdC5tZW1vXCIpO3Y9dyhcInJlYWN0LmxhenlcIil9dmFyIHg9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO1xuZnVuY3Rpb24geShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eCYmYVt4XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfWZ1bmN0aW9uIHooYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9XG52YXIgQT17aXNNb3VudGVkOmZ1bmN0aW9uKCl7cmV0dXJuITF9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbigpe30sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKCl7fX0sQj17fTtmdW5jdGlvbiBDKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9Qy5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtDLnByb3RvdHlwZS5zZXRTdGF0ZT1mdW5jdGlvbihhLGIpe2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJm51bGwhPWEpdGhyb3cgRXJyb3Ioeig4NSkpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07Qy5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07XG5mdW5jdGlvbiBEKCl7fUQucHJvdG90eXBlPUMucHJvdG90eXBlO2Z1bmN0aW9uIEUoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX12YXIgRj1FLnByb3RvdHlwZT1uZXcgRDtGLmNvbnN0cnVjdG9yPUU7bChGLEMucHJvdG90eXBlKTtGLmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBHPXtjdXJyZW50Om51bGx9LEg9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxJPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBKKGEsYixjKXt2YXIgZSxkPXt9LGs9bnVsbCxoPW51bGw7aWYobnVsbCE9Yilmb3IoZSBpbiB2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYpLHZvaWQgMCE9PWIua2V5JiYoaz1cIlwiK2Iua2V5KSxiKUguY2FsbChiLGUpJiYhSS5oYXNPd25Qcm9wZXJ0eShlKSYmKGRbZV09YltlXSk7dmFyIGc9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1nKWQuY2hpbGRyZW49YztlbHNlIGlmKDE8Zyl7Zm9yKHZhciBmPUFycmF5KGcpLG09MDttPGc7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1mfWlmKGEmJmEuZGVmYXVsdFByb3BzKWZvcihlIGluIGc9YS5kZWZhdWx0UHJvcHMsZyl2b2lkIDA9PT1kW2VdJiYoZFtlXT1nW2VdKTtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEsa2V5OmsscmVmOmgscHJvcHM6ZCxfb3duZXI6Ry5jdXJyZW50fX1cbmZ1bmN0aW9uIEsoYSxiKXtyZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxrZXk6YixyZWY6YS5yZWYscHJvcHM6YS5wcm9wcyxfb3duZXI6YS5fb3duZXJ9fWZ1bmN0aW9uIEwoYSl7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmYS4kJHR5cGVvZj09PW59ZnVuY3Rpb24gZXNjYXBlKGEpe3ZhciBiPXtcIj1cIjpcIj0wXCIsXCI6XCI6XCI9MlwifTtyZXR1cm5cIiRcIithLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBNPS9cXC8rL2c7ZnVuY3Rpb24gTihhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShcIlwiK2Eua2V5KTpiLnRvU3RyaW5nKDM2KX1cbmZ1bmN0aW9uIE8oYSxiLGMsZSxkKXt2YXIgaz10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09a3x8XCJib29sZWFuXCI9PT1rKWE9bnVsbDt2YXIgaD0hMTtpZihudWxsPT09YSloPSEwO2Vsc2Ugc3dpdGNoKGspe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6aD0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgbjpjYXNlIHA6aD0hMH19aWYoaClyZXR1cm4gaD1hLGQ9ZChoKSxhPVwiXCI9PT1lP1wiLlwiK04oaCwwKTplLEFycmF5LmlzQXJyYXkoZCk/KGM9XCJcIixudWxsIT1hJiYoYz1hLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIiksTyhkLGIsYyxcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBhfSkpOm51bGwhPWQmJihMKGQpJiYoZD1LKGQsYysoIWQua2V5fHxoJiZoLmtleT09PWQua2V5P1wiXCI6KFwiXCIrZC5rZXkpLnJlcGxhY2UoTSxcIiQmL1wiKStcIi9cIikrYSkpLGIucHVzaChkKSksMTtoPTA7ZT1cIlwiPT09ZT9cIi5cIjplK1wiOlwiO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKHZhciBnPVxuMDtnPGEubGVuZ3RoO2crKyl7az1hW2ddO3ZhciBmPWUrTihrLGcpO2grPU8oayxiLGMsZixkKX1lbHNlIGlmKGY9eShhKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksZz0wOyEoaz1hLm5leHQoKSkuZG9uZTspaz1rLnZhbHVlLGY9ZStOKGssZysrKSxoKz1PKGssYixjLGYsZCk7ZWxzZSBpZihcIm9iamVjdFwiPT09ayl0aHJvdyBiPVwiXCIrYSxFcnJvcih6KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1iP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmIpKTtyZXR1cm4gaH1mdW5jdGlvbiBQKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdLGQ9MDtPKGEsZSxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChjLGEsZCsrKX0pO3JldHVybiBlfVxuZnVuY3Rpb24gUShhKXtpZigtMT09PWEuX3N0YXR1cyl7dmFyIGI9YS5fcmVzdWx0O2I9YigpO2EuX3N0YXR1cz0wO2EuX3Jlc3VsdD1iO2IudGhlbihmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYj1iLmRlZmF1bHQsYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWIpfSxmdW5jdGlvbihiKXswPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTIsYS5fcmVzdWx0PWIpfSl9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0O3Rocm93IGEuX3Jlc3VsdDt9dmFyIFI9e2N1cnJlbnQ6bnVsbH07ZnVuY3Rpb24gUygpe3ZhciBhPVIuY3VycmVudDtpZihudWxsPT09YSl0aHJvdyBFcnJvcih6KDMyMSkpO3JldHVybiBhfXZhciBUPXtSZWFjdEN1cnJlbnREaXNwYXRjaGVyOlIsUmVhY3RDdXJyZW50QmF0Y2hDb25maWc6e3RyYW5zaXRpb246MH0sUmVhY3RDdXJyZW50T3duZXI6RyxJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O1xuZXhwb3J0cy5DaGlsZHJlbj17bWFwOlAsZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7UChhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGMpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1AoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBQKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIUwoYSkpdGhyb3cgRXJyb3IoeigxNDMpKTtyZXR1cm4gYX19O2V4cG9ydHMuQ29tcG9uZW50PUM7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUU7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1UO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKHooMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksaz1hLnJlZixoPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZixoPUcuY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZz1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihmIGluIGIpSC5jYWxsKGIsZikmJiFJLmhhc093blByb3BlcnR5KGYpJiYoZVtmXT12b2lkIDA9PT1iW2ZdJiZ2b2lkIDAhPT1nP2dbZl06YltmXSl9dmFyIGY9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1mKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8Zil7Zz1BcnJheShmKTtmb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmsscHJvcHM6ZSxfb3duZXI6aH19O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOnIsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjpxLF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1KO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1KLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp0LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1MO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp2LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6UX19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp1LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDb250ZXh0KGEsYil9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsYyl9O1xuZXhwb3J0cy51c2VMYXlvdXRFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUxheW91dEVmZmVjdChhLGIpfTtleHBvcnRzLnVzZU1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZU1lbW8oYSxiKX07ZXhwb3J0cy51c2VSZWR1Y2VyPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZVJlZHVjZXIoYSxiLGMpfTtleHBvcnRzLnVzZVJlZj1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVJlZihhKX07ZXhwb3J0cy51c2VTdGF0ZT1mdW5jdGlvbihhKXtyZXR1cm4gUygpLnVzZVN0YXRlKGEpfTtleHBvcnRzLnZlcnNpb249XCIxNy4wLjJcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjIwLjJcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGYsZyxoLGs7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBwZXJmb3JtYW5jZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHBlcmZvcm1hbmNlLm5vdyl7dmFyIGw9cGVyZm9ybWFuY2U7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gbC5ub3coKX19ZWxzZXt2YXIgcD1EYXRlLHE9cC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBwLm5vdygpLXF9fVxuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHQ9bnVsbCx1PW51bGwsdz1mdW5jdGlvbigpe2lmKG51bGwhPT10KXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3QoITAsYSk7dD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodywwKSxiO319O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXQ/c2V0VGltZW91dChmLDAsYSk6KHQ9YSxzZXRUaW1lb3V0KHcsMCkpfTtnPWZ1bmN0aW9uKGEsYil7dT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQodSl9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXtyZXR1cm4hMX07az1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB4PXdpbmRvdy5zZXRUaW1lb3V0LHk9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciB6PVxud2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lJiZjb25zb2xlLmVycm9yKFwiVGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIHomJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtcG9seWZpbGxzXCIpfXZhciBBPSExLEI9bnVsbCxDPS0xLEQ9NSxFPTA7ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1cbkV9O2s9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWUgcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3Qgc3VwcG9ydGVkXCIpOkQ9MDxhP01hdGguZmxvb3IoMUUzL2EpOjV9O3ZhciBGPW5ldyBNZXNzYWdlQ2hhbm5lbCxHPUYucG9ydDI7Ri5wb3J0MS5vbm1lc3NhZ2U9ZnVuY3Rpb24oKXtpZihudWxsIT09Qil7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtFPWErRDt0cnl7QighMCxhKT9HLnBvc3RNZXNzYWdlKG51bGwpOihBPSExLEI9bnVsbCl9Y2F0Y2goYil7dGhyb3cgRy5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBBPSExfTtmPWZ1bmN0aW9uKGEpe0I9YTtBfHwoQT0hMCxHLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0M9XG54KGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9O2g9ZnVuY3Rpb24oKXt5KEMpO0M9LTF9fWZ1bmN0aW9uIEgoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKHZvaWQgMCE9PWUmJjA8SShlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gSihhKXthPWFbMF07cmV0dXJuIHZvaWQgMD09PWE/bnVsbDphfVxuZnVuY3Rpb24gSyhhKXt2YXIgYj1hWzBdO2lmKHZvaWQgMCE9PWIpe3ZhciBjPWEucG9wKCk7aWYoYyE9PWIpe2FbMF09YzthOmZvcih2YXIgZD0wLGU9YS5sZW5ndGg7ZDxlOyl7dmFyIG09MiooZCsxKS0xLG49YVttXSx2PW0rMSxyPWFbdl07aWYodm9pZCAwIT09biYmMD5JKG4sYykpdm9pZCAwIT09ciYmMD5JKHIsbik/KGFbZF09cixhW3ZdPWMsZD12KTooYVtkXT1uLGFbbV09YyxkPW0pO2Vsc2UgaWYodm9pZCAwIT09ciYmMD5JKHIsYykpYVtkXT1yLGFbdl09YyxkPXY7ZWxzZSBicmVhayBhfX1yZXR1cm4gYn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBJKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfXZhciBMPVtdLE09W10sTj0xLE89bnVsbCxQPTMsUT0hMSxSPSExLFM9ITE7XG5mdW5jdGlvbiBUKGEpe2Zvcih2YXIgYj1KKE0pO251bGwhPT1iOyl7aWYobnVsbD09PWIuY2FsbGJhY2spSyhNKTtlbHNlIGlmKGIuc3RhcnRUaW1lPD1hKUsoTSksYi5zb3J0SW5kZXg9Yi5leHBpcmF0aW9uVGltZSxIKEwsYik7ZWxzZSBicmVhaztiPUooTSl9fWZ1bmN0aW9uIFUoYSl7Uz0hMTtUKGEpO2lmKCFSKWlmKG51bGwhPT1KKEwpKVI9ITAsZihWKTtlbHNle3ZhciBiPUooTSk7bnVsbCE9PWImJmcoVSxiLnN0YXJ0VGltZS1hKX19XG5mdW5jdGlvbiBWKGEsYil7Uj0hMTtTJiYoUz0hMSxoKCkpO1E9ITA7dmFyIGM9UDt0cnl7VChiKTtmb3IoTz1KKEwpO251bGwhPT1PJiYoIShPLmV4cGlyYXRpb25UaW1lPmIpfHxhJiYhZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZCgpKTspe3ZhciBkPU8uY2FsbGJhY2s7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe08uY2FsbGJhY2s9bnVsbDtQPU8ucHJpb3JpdHlMZXZlbDt2YXIgZT1kKE8uZXhwaXJhdGlvblRpbWU8PWIpO2I9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZT9PLmNhbGxiYWNrPWU6Tz09PUooTCkmJksoTCk7VChiKX1lbHNlIEsoTCk7Tz1KKEwpfWlmKG51bGwhPT1PKXZhciBtPSEwO2Vsc2V7dmFyIG49SihNKTtudWxsIT09biYmZyhVLG4uc3RhcnRUaW1lLWIpO209ITF9cmV0dXJuIG19ZmluYWxseXtPPW51bGwsUD1jLFE9ITF9fXZhciBXPWs7ZXhwb3J0cy51bnN0YWJsZV9JZGxlUHJpb3JpdHk9NTtcbmV4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7Unx8UXx8KFI9ITAsZihWKSl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWw9ZnVuY3Rpb24oKXtyZXR1cm4gUH07ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBKKEwpfTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUCl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9UH12YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1A9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVc7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1QO1A9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1A9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDpOKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxIKE0sYSksbnVsbD09PUooTCkmJmE9PT1KKE0pJiYoUz9oKCk6Uz0hMCxnKFUsYy1kKSkpOihhLnNvcnRJbmRleD1lLEgoTCxhKSxSfHxRfHwoUj0hMCxmKFYpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9UDtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz1QO1A9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7UD1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgX19leHRlbmRzID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8XG4gICAgICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XG4gICAgICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xuICAgICAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBleHRlbmRTdGF0aWNzKGQsIGIpO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG59KSgpO1xudmFyIEFzc2VydGlvbkVycm9yID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBc3NlcnRpb25FcnJvciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBc3NlcnRpb25FcnJvcihtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIG1lc3NhZ2UpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm5hbWUgPSAnQXNzZXJ0aW9uRXJyb3InO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBBc3NlcnRpb25FcnJvcjtcbn0oRXJyb3IpKTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFzc2VydCh2YWx1ZSwgbWVzc2FnZSkge1xuICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEFzc2VydGlvbkVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG9iamVjdFRvR2V0UGFyYW1zKG9iamVjdCkge1xuICAgIHZhciBwYXJhbXMgPSBPYmplY3QuZW50cmllcyhvYmplY3QpXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IF9hWzFdO1xuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbDtcbiAgICB9KVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICB2YXIga2V5ID0gX2FbMF0sIHZhbHVlID0gX2FbMV07XG4gICAgICAgIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KFN0cmluZyh2YWx1ZSkpO1xuICAgIH0pO1xuICAgIHJldHVybiBwYXJhbXMubGVuZ3RoID4gMCA/IFwiP1wiICsgcGFyYW1zLmpvaW4oJyYnKSA6ICcnO1xufVxuIiwidmFyIF9fZXh0ZW5kcyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgICAgICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xufSkoKTtcbnZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjeCBmcm9tICdjbGFzc25hbWVzJztcbnZhciBpc1Byb21pc2UgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuICEhb2JqICYmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nKSAmJiB0eXBlb2Ygb2JqLnRoZW4gPT09ICdmdW5jdGlvbic7XG59O1xudmFyIGdldEJveFBvc2l0aW9uT25XaW5kb3dDZW50ZXIgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgeyByZXR1cm4gKHtcbiAgICBsZWZ0OiB3aW5kb3cub3V0ZXJXaWR0aCAvIDIgKyAod2luZG93LnNjcmVlblggfHwgd2luZG93LnNjcmVlbkxlZnQgfHwgMCkgLSB3aWR0aCAvIDIsXG4gICAgdG9wOiB3aW5kb3cub3V0ZXJIZWlnaHQgLyAyICsgKHdpbmRvdy5zY3JlZW5ZIHx8IHdpbmRvdy5zY3JlZW5Ub3AgfHwgMCkgLSBoZWlnaHQgLyAyLFxufSk7IH07XG52YXIgZ2V0Qm94UG9zaXRpb25PblNjcmVlbkNlbnRlciA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7IHJldHVybiAoe1xuICAgIHRvcDogKHdpbmRvdy5zY3JlZW4uaGVpZ2h0IC0gaGVpZ2h0KSAvIDIsXG4gICAgbGVmdDogKHdpbmRvdy5zY3JlZW4ud2lkdGggLSB3aWR0aCkgLyAyLFxufSk7IH07XG5mdW5jdGlvbiB3aW5kb3dPcGVuKHVybCwgX2EsIG9uQ2xvc2UpIHtcbiAgICB2YXIgaGVpZ2h0ID0gX2EuaGVpZ2h0LCB3aWR0aCA9IF9hLndpZHRoLCBjb25maWdSZXN0ID0gX19yZXN0KF9hLCBbXCJoZWlnaHRcIiwgXCJ3aWR0aFwiXSk7XG4gICAgdmFyIGNvbmZpZyA9IF9fYXNzaWduKHsgaGVpZ2h0OiBoZWlnaHQsXG4gICAgICAgIHdpZHRoOiB3aWR0aCwgbG9jYXRpb246ICdubycsIHRvb2xiYXI6ICdubycsIHN0YXR1czogJ25vJywgZGlyZWN0b3JpZXM6ICdubycsIG1lbnViYXI6ICdubycsIHNjcm9sbGJhcnM6ICd5ZXMnLCByZXNpemFibGU6ICdubycsIGNlbnRlcnNjcmVlbjogJ3llcycsIGNocm9tZTogJ3llcycgfSwgY29uZmlnUmVzdCk7XG4gICAgdmFyIHNoYXJlRGlhbG9nID0gd2luZG93Lm9wZW4odXJsLCAnJywgT2JqZWN0LmtleXMoY29uZmlnKVxuICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSArIFwiPVwiICsgY29uZmlnW2tleV07IH0pXG4gICAgICAgIC5qb2luKCcsICcpKTtcbiAgICBpZiAob25DbG9zZSkge1xuICAgICAgICB2YXIgaW50ZXJ2YWxfMSA9IHdpbmRvdy5zZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChzaGFyZURpYWxvZyA9PT0gbnVsbCB8fCBzaGFyZURpYWxvZy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxfMSk7XG4gICAgICAgICAgICAgICAgICAgIG9uQ2xvc2Uoc2hhcmVEaWFsb2cpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgICByZXR1cm4gc2hhcmVEaWFsb2c7XG59XG52YXIgU2hhcmVCdXR0b24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNoYXJlQnV0dG9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNoYXJlQnV0dG9uKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMub3BlblNoYXJlRGlhbG9nID0gZnVuY3Rpb24gKGxpbmspIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLnByb3BzLCBvblNoYXJlV2luZG93Q2xvc2UgPSBfYS5vblNoYXJlV2luZG93Q2xvc2UsIF9iID0gX2Eud2luZG93SGVpZ2h0LCB3aW5kb3dIZWlnaHQgPSBfYiA9PT0gdm9pZCAwID8gNDAwIDogX2IsIF9jID0gX2Eud2luZG93UG9zaXRpb24sIHdpbmRvd1Bvc2l0aW9uID0gX2MgPT09IHZvaWQgMCA/ICd3aW5kb3dDZW50ZXInIDogX2MsIF9kID0gX2Eud2luZG93V2lkdGgsIHdpbmRvd1dpZHRoID0gX2QgPT09IHZvaWQgMCA/IDU1MCA6IF9kO1xuICAgICAgICAgICAgdmFyIHdpbmRvd0NvbmZpZyA9IF9fYXNzaWduKHsgaGVpZ2h0OiB3aW5kb3dIZWlnaHQsIHdpZHRoOiB3aW5kb3dXaWR0aCB9LCAod2luZG93UG9zaXRpb24gPT09ICd3aW5kb3dDZW50ZXInXG4gICAgICAgICAgICAgICAgPyBnZXRCb3hQb3NpdGlvbk9uV2luZG93Q2VudGVyKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpXG4gICAgICAgICAgICAgICAgOiBnZXRCb3hQb3NpdGlvbk9uU2NyZWVuQ2VudGVyKHdpbmRvd1dpZHRoLCB3aW5kb3dIZWlnaHQpKSk7XG4gICAgICAgICAgICB3aW5kb3dPcGVuKGxpbmssIHdpbmRvd0NvbmZpZywgb25TaGFyZVdpbmRvd0Nsb3NlKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHsgcmV0dXJuIF9fYXdhaXRlcihfdGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSwgYmVmb3JlT25DbGljaywgZGlzYWJsZWQsIG5ldHdvcmtMaW5rLCBvbkNsaWNrLCB1cmwsIG9wZW5TaGFyZURpYWxvZ09uQ2xpY2ssIG9wdHMsIGxpbmssIHJldHVyblZhbDtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9hID0gdGhpcy5wcm9wcywgYmVmb3JlT25DbGljayA9IF9hLmJlZm9yZU9uQ2xpY2ssIGRpc2FibGVkID0gX2EuZGlzYWJsZWQsIG5ldHdvcmtMaW5rID0gX2EubmV0d29ya0xpbmssIG9uQ2xpY2sgPSBfYS5vbkNsaWNrLCB1cmwgPSBfYS51cmwsIG9wZW5TaGFyZURpYWxvZ09uQ2xpY2sgPSBfYS5vcGVuU2hhcmVEaWFsb2dPbkNsaWNrLCBvcHRzID0gX2Eub3B0cztcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmsgPSBuZXR3b3JrTGluayh1cmwsIG9wdHMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYmVmb3JlT25DbGljaykgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBiZWZvcmVPbkNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzUHJvbWlzZShyZXR1cm5WYWwpKSByZXR1cm4gWzMgLypicmVhayovLCAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJldHVyblZhbF07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5TaGFyZURpYWxvZ09uQ2xpY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wZW5TaGFyZURpYWxvZyhsaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvbkNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljayhldmVudCwgbGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFNoYXJlQnV0dG9uLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMucHJvcHMsIGJlZm9yZU9uQ2xpY2sgPSBfYS5iZWZvcmVPbkNsaWNrLCBjaGlsZHJlbiA9IF9hLmNoaWxkcmVuLCBjbGFzc05hbWUgPSBfYS5jbGFzc05hbWUsIGRpc2FibGVkID0gX2EuZGlzYWJsZWQsIGRpc2FibGVkU3R5bGUgPSBfYS5kaXNhYmxlZFN0eWxlLCBmb3J3YXJkZWRSZWYgPSBfYS5mb3J3YXJkZWRSZWYsIG5ldHdvcmtMaW5rID0gX2EubmV0d29ya0xpbmssIG5ldHdvcmtOYW1lID0gX2EubmV0d29ya05hbWUsIG9uU2hhcmVXaW5kb3dDbG9zZSA9IF9hLm9uU2hhcmVXaW5kb3dDbG9zZSwgb3BlblNoYXJlRGlhbG9nT25DbGljayA9IF9hLm9wZW5TaGFyZURpYWxvZ09uQ2xpY2ssIG9wdHMgPSBfYS5vcHRzLCByZXNldEJ1dHRvblN0eWxlID0gX2EucmVzZXRCdXR0b25TdHlsZSwgc3R5bGUgPSBfYS5zdHlsZSwgdXJsID0gX2EudXJsLCB3aW5kb3dIZWlnaHQgPSBfYS53aW5kb3dIZWlnaHQsIHdpbmRvd1Bvc2l0aW9uID0gX2Eud2luZG93UG9zaXRpb24sIHdpbmRvd1dpZHRoID0gX2Eud2luZG93V2lkdGgsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImJlZm9yZU9uQ2xpY2tcIiwgXCJjaGlsZHJlblwiLCBcImNsYXNzTmFtZVwiLCBcImRpc2FibGVkXCIsIFwiZGlzYWJsZWRTdHlsZVwiLCBcImZvcndhcmRlZFJlZlwiLCBcIm5ldHdvcmtMaW5rXCIsIFwibmV0d29ya05hbWVcIiwgXCJvblNoYXJlV2luZG93Q2xvc2VcIiwgXCJvcGVuU2hhcmVEaWFsb2dPbkNsaWNrXCIsIFwib3B0c1wiLCBcInJlc2V0QnV0dG9uU3R5bGVcIiwgXCJzdHlsZVwiLCBcInVybFwiLCBcIndpbmRvd0hlaWdodFwiLCBcIndpbmRvd1Bvc2l0aW9uXCIsIFwid2luZG93V2lkdGhcIl0pO1xuICAgICAgICB2YXIgbmV3Q2xhc3NOYW1lID0gY3goJ3JlYWN0LXNoYXJlX19TaGFyZUJ1dHRvbicsIHtcbiAgICAgICAgICAgICdyZWFjdC1zaGFyZV9fU2hhcmVCdXR0b24tLWRpc2FibGVkJzogISFkaXNhYmxlZCxcbiAgICAgICAgICAgIGRpc2FibGVkOiAhIWRpc2FibGVkLFxuICAgICAgICB9LCBjbGFzc05hbWUpO1xuICAgICAgICB2YXIgbmV3U3R5bGUgPSByZXNldEJ1dHRvblN0eWxlXG4gICAgICAgICAgICA/IF9fYXNzaWduKF9fYXNzaWduKHsgYmFja2dyb3VuZENvbG9yOiAndHJhbnNwYXJlbnQnLCBib3JkZXI6ICdub25lJywgcGFkZGluZzogMCwgZm9udDogJ2luaGVyaXQnLCBjb2xvcjogJ2luaGVyaXQnLCBjdXJzb3I6ICdwb2ludGVyJyB9LCBzdHlsZSksIChkaXNhYmxlZCAmJiBkaXNhYmxlZFN0eWxlKSkgOiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgc3R5bGUpLCAoZGlzYWJsZWQgJiYgZGlzYWJsZWRTdHlsZSkpO1xuICAgICAgICByZXR1cm4gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIiwgX19hc3NpZ24oe30sIHJlc3QsIHsgXCJhcmlhLWxhYmVsXCI6IHJlc3RbJ2FyaWEtbGFiZWwnXSB8fCBuZXR3b3JrTmFtZSwgY2xhc3NOYW1lOiBuZXdDbGFzc05hbWUsIG9uQ2xpY2s6IHRoaXMuaGFuZGxlQ2xpY2ssIHJlZjogZm9yd2FyZGVkUmVmLCBzdHlsZTogbmV3U3R5bGUgfSksIGNoaWxkcmVuKSk7XG4gICAgfTtcbiAgICBTaGFyZUJ1dHRvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGRpc2FibGVkU3R5bGU6IHsgb3BhY2l0eTogMC42IH0sXG4gICAgICAgIG9wZW5TaGFyZURpYWxvZ09uQ2xpY2s6IHRydWUsXG4gICAgICAgIHJlc2V0QnV0dG9uU3R5bGU6IHRydWUsXG4gICAgfTtcbiAgICByZXR1cm4gU2hhcmVCdXR0b247XG59KENvbXBvbmVudCkpO1xuZXhwb3J0IGRlZmF1bHQgU2hhcmVCdXR0b247XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xuaW1wb3J0IFJlYWN0LCB7IGZvcndhcmRSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgU2hhcmVCdXR0b24gZnJvbSAnLi4vU2hhcmVCdXR0b24nO1xuZnVuY3Rpb24gY3JlYXRlU2hhcmVCdXR0b24obmV0d29ya05hbWUsIGxpbmssIG9wdHNNYXAsIGRlZmF1bHRQcm9wcykge1xuICAgIGZ1bmN0aW9uIENyZWF0ZWRCdXR0b24ocHJvcHMsIHJlZikge1xuICAgICAgICB2YXIgb3B0cyA9IG9wdHNNYXAocHJvcHMpO1xuICAgICAgICB2YXIgcGFzc2VkUHJvcHMgPSBfX2Fzc2lnbih7fSwgcHJvcHMpO1xuICAgICAgICAvLyByZW1vdmUga2V5cyBmcm9tIHBhc3NlZCBwcm9wcyB0aGF0IGFyZSBwYXNzZWQgYXMgb3B0c1xuICAgICAgICB2YXIgb3B0c0tleXMgPSBPYmplY3Qua2V5cyhvcHRzKTtcbiAgICAgICAgb3B0c0tleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICBkZWxldGUgcGFzc2VkUHJvcHNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoUmVhY3QuY3JlYXRlRWxlbWVudChTaGFyZUJ1dHRvbiwgX19hc3NpZ24oe30sIGRlZmF1bHRQcm9wcywgcGFzc2VkUHJvcHMsIHsgZm9yd2FyZGVkUmVmOiByZWYsIG5ldHdvcmtOYW1lOiBuZXR3b3JrTmFtZSwgbmV0d29ya0xpbms6IGxpbmssIG9wdHM6IG9wdHNNYXAocHJvcHMpIH0pKSk7XG4gICAgfVxuICAgIENyZWF0ZWRCdXR0b24uZGlzcGxheU5hbWUgPSBcIlNoYXJlQnV0dG9uLVwiICsgbmV0d29ya05hbWU7XG4gICAgcmV0dXJuIGZvcndhcmRSZWYoQ3JlYXRlZEJ1dHRvbik7XG59XG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTaGFyZUJ1dHRvbjtcbiIsImltcG9ydCBhc3NlcnQgZnJvbSAnLi91dGlscy9hc3NlcnQnO1xuaW1wb3J0IG9iamVjdFRvR2V0UGFyYW1zIGZyb20gJy4vdXRpbHMvb2JqZWN0VG9HZXRQYXJhbXMnO1xuaW1wb3J0IGNyZWF0ZVNoYXJlQnV0dG9uIGZyb20gJy4vaG9jcy9jcmVhdGVTaGFyZUJ1dHRvbic7XG5mdW5jdGlvbiBmYWNlYm9va0xpbmsodXJsLCBfYSkge1xuICAgIHZhciBxdW90ZSA9IF9hLnF1b3RlLCBoYXNodGFnID0gX2EuaGFzaHRhZztcbiAgICBhc3NlcnQodXJsLCAnZmFjZWJvb2sudXJsJyk7XG4gICAgcmV0dXJuICgnaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3NoYXJlci9zaGFyZXIucGhwJyArXG4gICAgICAgIG9iamVjdFRvR2V0UGFyYW1zKHtcbiAgICAgICAgICAgIHU6IHVybCxcbiAgICAgICAgICAgIHF1b3RlOiBxdW90ZSxcbiAgICAgICAgICAgIGhhc2h0YWc6IGhhc2h0YWcsXG4gICAgICAgIH0pKTtcbn1cbnZhciBGYWNlYm9va1NoYXJlQnV0dG9uID0gY3JlYXRlU2hhcmVCdXR0b24oJ2ZhY2Vib29rJywgZmFjZWJvb2tMaW5rLCBmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuICh7XG4gICAgcXVvdGU6IHByb3BzLnF1b3RlLFxuICAgIGhhc2h0YWc6IHByb3BzLmhhc2h0YWcsXG59KTsgfSwge1xuICAgIHdpbmRvd1dpZHRoOiA1NTAsXG4gICAgd2luZG93SGVpZ2h0OiA0MDAsXG59KTtcbmV4cG9ydCBkZWZhdWx0IEZhY2Vib29rU2hhcmVCdXR0b247XG4iLCJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIF9fcmVzdCA9ICh0aGlzICYmIHRoaXMuX19yZXN0KSB8fCBmdW5jdGlvbiAocywgZSkge1xuICAgIHZhciB0ID0ge307XG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICAgIHRbcF0gPSBzW3BdO1xuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xuICAgICAgICB9XG4gICAgcmV0dXJuIHQ7XG59O1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUljb24oaWNvbkNvbmZpZykge1xuICAgIHZhciBJY29uID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciBiZ1N0eWxlID0gX2EuYmdTdHlsZSwgYm9yZGVyUmFkaXVzID0gX2EuYm9yZGVyUmFkaXVzLCBpY29uRmlsbENvbG9yID0gX2EuaWNvbkZpbGxDb2xvciwgcm91bmQgPSBfYS5yb3VuZCwgc2l6ZSA9IF9hLnNpemUsIHJlc3QgPSBfX3Jlc3QoX2EsIFtcImJnU3R5bGVcIiwgXCJib3JkZXJSYWRpdXNcIiwgXCJpY29uRmlsbENvbG9yXCIsIFwicm91bmRcIiwgXCJzaXplXCJdKTtcbiAgICAgICAgcmV0dXJuIChSZWFjdC5jcmVhdGVFbGVtZW50KFwic3ZnXCIsIF9fYXNzaWduKHsgdmlld0JveDogXCIwIDAgNjQgNjRcIiwgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSB9LCByZXN0KSxcbiAgICAgICAgICAgIHJvdW5kID8gKFJlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjaXJjbGVcIiwgeyBjeDogXCIzMlwiLCBjeTogXCIzMlwiLCByOiBcIjMxXCIsIGZpbGw6IGljb25Db25maWcuY29sb3IsIHN0eWxlOiBiZ1N0eWxlIH0pKSA6IChSZWFjdC5jcmVhdGVFbGVtZW50KFwicmVjdFwiLCB7IHdpZHRoOiBcIjY0XCIsIGhlaWdodDogXCI2NFwiLCByeDogYm9yZGVyUmFkaXVzLCByeTogYm9yZGVyUmFkaXVzLCBmaWxsOiBpY29uQ29uZmlnLmNvbG9yLCBzdHlsZTogYmdTdHlsZSB9KSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwicGF0aFwiLCB7IGQ6IGljb25Db25maWcucGF0aCwgZmlsbDogaWNvbkZpbGxDb2xvciB9KSkpO1xuICAgIH07XG4gICAgSWNvbi5kZWZhdWx0UHJvcHMgPSB7XG4gICAgICAgIGJnU3R5bGU6IHt9LFxuICAgICAgICBib3JkZXJSYWRpdXM6IDAsXG4gICAgICAgIGljb25GaWxsQ29sb3I6ICd3aGl0ZScsXG4gICAgICAgIHNpemU6IDY0LFxuICAgIH07XG4gICAgcmV0dXJuIEljb247XG59XG4iLCJpbXBvcnQgY3JlYXRlSWNvbiBmcm9tICcuL2hvY3MvY3JlYXRlSWNvbic7XG52YXIgRmFjZWJvb2tJY29uID0gY3JlYXRlSWNvbih7XG4gICAgY29sb3I6ICcjM2I1OTk4JyxcbiAgICBuZXR3b3JrTmFtZTogJ2ZhY2Vib29rJyxcbiAgICBwYXRoOiAnTTM0LjEsNDdWMzMuM2g0LjZsMC43LTUuM2gtNS4zdi0zLjRjMC0xLjUsMC40LTIuNiwyLjYtMi42bDIuOCwwdi00LjhjLTAuNS0wLjEtMi4yLTAuMi00LjEtMC4yIGMtNC4xLDAtNi45LDIuNS02LjksN1YyOEgyNHY1LjNoNC42VjQ3SDM0LjF6Jyxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgRmFjZWJvb2tJY29uO1xuIiwiaW1wb3J0IGFzc2VydCBmcm9tICcuL3V0aWxzL2Fzc2VydCc7XG5pbXBvcnQgb2JqZWN0VG9HZXRQYXJhbXMgZnJvbSAnLi91dGlscy9vYmplY3RUb0dldFBhcmFtcyc7XG5pbXBvcnQgY3JlYXRlU2hhcmVCdXR0b24gZnJvbSAnLi9ob2NzL2NyZWF0ZVNoYXJlQnV0dG9uJztcbmZ1bmN0aW9uIHR3aXR0ZXJMaW5rKHVybCwgX2EpIHtcbiAgICB2YXIgdGl0bGUgPSBfYS50aXRsZSwgdmlhID0gX2EudmlhLCBfYiA9IF9hLmhhc2h0YWdzLCBoYXNodGFncyA9IF9iID09PSB2b2lkIDAgPyBbXSA6IF9iLCBfYyA9IF9hLnJlbGF0ZWQsIHJlbGF0ZWQgPSBfYyA9PT0gdm9pZCAwID8gW10gOiBfYztcbiAgICBhc3NlcnQodXJsLCAndHdpdHRlci51cmwnKTtcbiAgICBhc3NlcnQoQXJyYXkuaXNBcnJheShoYXNodGFncyksICd0d2l0dGVyLmhhc2h0YWdzIGlzIG5vdCBhbiBhcnJheScpO1xuICAgIGFzc2VydChBcnJheS5pc0FycmF5KHJlbGF0ZWQpLCAndHdpdHRlci5yZWxhdGVkIGlzIG5vdCBhbiBhcnJheScpO1xuICAgIHJldHVybiAoJ2h0dHBzOi8vdHdpdHRlci5jb20vc2hhcmUnICtcbiAgICAgICAgb2JqZWN0VG9HZXRQYXJhbXMoe1xuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICB0ZXh0OiB0aXRsZSxcbiAgICAgICAgICAgIHZpYTogdmlhLFxuICAgICAgICAgICAgaGFzaHRhZ3M6IGhhc2h0YWdzLmxlbmd0aCA+IDAgPyBoYXNodGFncy5qb2luKCcsJykgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZWxhdGVkOiByZWxhdGVkLmxlbmd0aCA+IDAgPyByZWxhdGVkLmpvaW4oJywnKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSkpO1xufVxudmFyIFR3aXR0ZXJTaGFyZUJ1dHRvbiA9IGNyZWF0ZVNoYXJlQnV0dG9uKCd0d2l0dGVyJywgdHdpdHRlckxpbmssIGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gKHtcbiAgICBoYXNodGFnczogcHJvcHMuaGFzaHRhZ3MsXG4gICAgdGl0bGU6IHByb3BzLnRpdGxlLFxuICAgIHZpYTogcHJvcHMudmlhLFxuICAgIHJlbGF0ZWQ6IHByb3BzLnJlbGF0ZWQsXG59KTsgfSwge1xuICAgIHdpbmRvd1dpZHRoOiA1NTAsXG4gICAgd2luZG93SGVpZ2h0OiA0MDAsXG59KTtcbmV4cG9ydCBkZWZhdWx0IFR3aXR0ZXJTaGFyZUJ1dHRvbjtcbiIsImltcG9ydCBjcmVhdGVJY29uIGZyb20gJy4vaG9jcy9jcmVhdGVJY29uJztcbnZhciBUd2l0dGVySWNvbiA9IGNyZWF0ZUljb24oe1xuICAgIGNvbG9yOiAnIzAwYWNlZCcsXG4gICAgbmV0d29ya05hbWU6ICd0d2l0dGVyJyxcbiAgICBwYXRoOiAnTTQ4LDIyLjFjLTEuMiwwLjUtMi40LDAuOS0zLjgsMWMxLjQtMC44LDIuNC0yLjEsMi45LTMuNmMtMS4zLDAuOC0yLjcsMS4zLTQuMiwxLjYgQzQxLjcsMTkuOCw0MCwxOSwzOC4yLDE5Yy0zLjYsMC02LjYsMi45LTYuNiw2LjZjMCwwLjUsMC4xLDEsMC4yLDEuNWMtNS41LTAuMy0xMC4zLTIuOS0xMy41LTYuOWMtMC42LDEtMC45LDIuMS0wLjksMy4zIGMwLDIuMywxLjIsNC4zLDIuOSw1LjVjLTEuMSwwLTIuMS0wLjMtMy0wLjhjMCwwLDAsMC4xLDAsMC4xYzAsMy4yLDIuMyw1LjgsNS4zLDYuNGMtMC42LDAuMS0xLjEsMC4yLTEuNywwLjJjLTAuNCwwLTAuOCwwLTEuMi0wLjEgYzAuOCwyLjYsMy4zLDQuNSw2LjEsNC42Yy0yLjIsMS44LTUuMSwyLjgtOC4yLDIuOGMtMC41LDAtMS4xLDAtMS42LTAuMWMyLjksMS45LDYuNCwyLjksMTAuMSwyLjljMTIuMSwwLDE4LjctMTAsMTguNy0xOC43IGMwLTAuMywwLTAuNiwwLTAuOEM0NiwyNC41LDQ3LjEsMjMuNCw0OCwyMi4xeicsXG59KTtcbmV4cG9ydCBkZWZhdWx0IFR3aXR0ZXJJY29uO1xuIiwiaW1wb3J0IGFzc2VydCBmcm9tICcuL3V0aWxzL2Fzc2VydCc7XG5pbXBvcnQgb2JqZWN0VG9HZXRQYXJhbXMgZnJvbSAnLi91dGlscy9vYmplY3RUb0dldFBhcmFtcyc7XG5pbXBvcnQgY3JlYXRlU2hhcmVCdXR0b24gZnJvbSAnLi9ob2NzL2NyZWF0ZVNoYXJlQnV0dG9uJztcbmZ1bmN0aW9uIHBpbnRlcmVzdExpbmsodXJsLCBfYSkge1xuICAgIHZhciBtZWRpYSA9IF9hLm1lZGlhLCBkZXNjcmlwdGlvbiA9IF9hLmRlc2NyaXB0aW9uO1xuICAgIGFzc2VydCh1cmwsICdwaW50ZXJlc3QudXJsJyk7XG4gICAgYXNzZXJ0KG1lZGlhLCAncGludGVyZXN0Lm1lZGlhJyk7XG4gICAgcmV0dXJuICgnaHR0cHM6Ly9waW50ZXJlc3QuY29tL3Bpbi9jcmVhdGUvYnV0dG9uLycgK1xuICAgICAgICBvYmplY3RUb0dldFBhcmFtcyh7XG4gICAgICAgICAgICB1cmw6IHVybCxcbiAgICAgICAgICAgIG1lZGlhOiBtZWRpYSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbixcbiAgICAgICAgfSkpO1xufVxudmFyIFBpbnRlcmVzdFNoYXJlQnV0dG9uID0gY3JlYXRlU2hhcmVCdXR0b24oJ3BpbnRlcmVzdCcsIHBpbnRlcmVzdExpbmssIGZ1bmN0aW9uIChwcm9wcykgeyByZXR1cm4gKHtcbiAgICBtZWRpYTogcHJvcHMubWVkaWEsXG4gICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxufSk7IH0sIHtcbiAgICB3aW5kb3dXaWR0aDogMTAwMCxcbiAgICB3aW5kb3dIZWlnaHQ6IDczMCxcbn0pO1xuZXhwb3J0IGRlZmF1bHQgUGludGVyZXN0U2hhcmVCdXR0b247XG4iLCJpbXBvcnQgY3JlYXRlSWNvbiBmcm9tICcuL2hvY3MvY3JlYXRlSWNvbic7XG52YXIgUGludGVyZXN0SWNvbiA9IGNyZWF0ZUljb24oe1xuICAgIGNvbG9yOiAnI2NiMjEyOCcsXG4gICAgbmV0d29ya05hbWU6ICdwaW50ZXJlc3QnLFxuICAgIHBhdGg6ICdNMzIsMTZjLTguOCwwLTE2LDcuMi0xNiwxNmMwLDYuNiwzLjksMTIuMiw5LjYsMTQuN2MwLTEuMSwwLTIuNSwwLjMtMy43IGMwLjMtMS4zLDIuMS04LjcsMi4xLTguN3MtMC41LTEtMC41LTIuNWMwLTIuNCwxLjQtNC4xLDMuMS00LjFjMS41LDAsMi4yLDEuMSwyLjIsMi40YzAsMS41LTAuOSwzLjctMS40LDUuNyBjLTAuNCwxLjcsMC45LDMuMSwyLjUsMy4xYzMsMCw1LjEtMy45LDUuMS04LjVjMC0zLjUtMi40LTYuMS02LjctNi4xYy00LjksMC03LjksMy42LTcuOSw3LjdjMCwxLjQsMC40LDIuNCwxLjEsMy4xIGMwLjMsMC4zLDAuMywwLjUsMC4yLDAuOWMtMC4xLDAuMy0wLjMsMS0wLjMsMS4zYy0wLjEsMC40LTAuNCwwLjYtMC44LDAuNGMtMi4yLTAuOS0zLjMtMy40LTMuMy02LjFjMC00LjUsMy44LTEwLDExLjQtMTAgYzYuMSwwLDEwLjEsNC40LDEwLjEsOS4yYzAsNi4zLTMuNSwxMS04LjYsMTFjLTEuNywwLTMuNC0wLjktMy45LTJjMCwwLTAuOSwzLjctMS4xLDQuNGMtMC4zLDEuMi0xLDIuNS0xLjYsMy40IGMxLjQsMC40LDMsMC43LDQuNSwwLjdjOC44LDAsMTYtNy4yLDE2LTE2QzQ4LDIzLjIsNDAuOCwxNiwzMiwxNnonLFxufSk7XG5leHBvcnQgZGVmYXVsdCBQaW50ZXJlc3RJY29uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZhY2Vib29rU2hhcmVCdXR0b24sIEZhY2Vib29rSWNvbiwgVHdpdHRlclNoYXJlQnV0dG9uLCBUd2l0dGVySWNvbiwgUGludGVyZXN0U2hhcmVCdXR0b24sIFBpbnRlcmVzdEljb259IGZyb20gJ3JlYWN0LXNoYXJlJztcblxudmFyIFNoYXJlVG9Tb2NpYWxNZWRpYSA9IChwcm9wcykgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJzaGFyZVwiPlxuICAgICAgPEZhY2Vib29rU2hhcmVCdXR0b24gXG4gICAgICAgIHVybD17d2luZG93LmxvY2F0aW9uLmhyZWZ9XG4gICAgICAgIHRpdGxlPSdIaSBUaGVyZSEgSSBsb3ZlIHRoaXMgcHJvZHVjdCEgWW91IHNob3VsZCBjaGVjayBpdCBvdXQhJz5cbiAgICAgICAgPEZhY2Vib29rSWNvbiBcbiAgICAgICAgICBzaXplPXszMn1cbiAgICAgICAgICByb3VuZD17dHJ1ZX0vPlxuICAgICAgPC9GYWNlYm9va1NoYXJlQnV0dG9uPlxuICAgICAgPFR3aXR0ZXJTaGFyZUJ1dHRvbiBcbiAgICAgICAgdXJsPXt3aW5kb3cubG9jYXRpb24uaHJlZn1cbiAgICAgICAgdGl0bGU9J0hpIFRoZXJlISBJIGxvdmUgdGhpcyBwcm9kdWN0ISBZb3Ugc2hvdWxkIGNoZWNrIGl0IG91dCEnPlxuICAgICAgICA8VHdpdHRlckljb24gXG4gICAgICAgICAgc2l6ZT17MzJ9XG4gICAgICAgICAgcm91bmQ9e3RydWV9Lz5cbiAgICAgIDwvVHdpdHRlclNoYXJlQnV0dG9uPlxuICAgICAgPFBpbnRlcmVzdFNoYXJlQnV0dG9uIFxuICAgICAgICB1cmw9e3dpbmRvdy5sb2NhdGlvbi5ocmVmfVxuICAgICAgICBkZXNjcmlwdGlvbj0nSGkgVGhlcmUhIEkgbG92ZSB0aGlzIHByb2R1Y3QhIFlvdSBzaG91bGQgY2hlY2sgaXQgb3V0ISdcbiAgICAgICAgbWVkaWE9e3Byb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zW3Byb3BzLmN1cnJQaG90b0luZGV4XS51cmwgfHwgJ2h0dHBzOi8vd3d3LnRoZXJtYXhnbG9iYWwuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L2ltYWdlLW5vdC1mb3VuZC5qcGcnfT5cbiAgICAgICAgPFBpbnRlcmVzdEljb24gXG4gICAgICAgICAgc2l6ZT17MzJ9XG4gICAgICAgICAgcm91bmQ9e3RydWV9Lz5cbiAgICAgIDwvUGludGVyZXN0U2hhcmVCdXR0b24+XG4gICAgPC9kaXY+XG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNoYXJlVG9Tb2NpYWxNZWRpYTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBEZWZhdWx0VmlldyA9IChwcm9wcykgPT4ge1xuXG4gIGlmIChwcm9wcy5zZWxlY3RlZFN0eWxlKSB7XG4gICAgdmFyIHBob3RvR2FsbGVyeSA9IHByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zO1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPVwiZGVmYXVsdFZpZXdcIj5cbiAgICAgICAgPGEgdGFyZ2V0PVwiX2JsYW5rXCI+XG4gICAgICAgICAgPGltZyBcbiAgICAgICAgICAgIHNyYz17cGhvdG9HYWxsZXJ5W3Byb3BzLmN1cnJQaG90b0luZGV4XS51cmwgfHwgJ2h0dHBzOi8vd3d3LnRoZXJtYXhnbG9iYWwuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L2ltYWdlLW5vdC1mb3VuZC5qcGcnfSBcbiAgICAgICAgICAgIGFsdD17cHJvcHMuc2VsZWN0ZWRTdHlsZS5uYW1lfSBcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImRlZmF1bHRWaWV3XCIgXG4gICAgICAgICAgICBpZD17cHJvcHMuc2VsZWN0ZWRTdHlsZS5zdHlsZV9pZH1cbiAgICAgICAgICAgIG9uQ2xpY2s9e3Byb3BzLnRvZ2dsZVZpZXd9PlxuICAgICAgICAgIDwvaW1nPlxuICAgICAgICAgIDxhIG9uQ2xpY2s9e3Byb3BzLnRvZ2dsZVZpZXd9IGlkPVwiZnVsbHNjcmVlbkljb25cIj48aSBjbGFzcz1cImZhcyBmYS1leHBhbmRcIj48L2k+PC9hPlxuICAgICAgICAgIHtwcm9wcy5jdXJyUGhvdG9JbmRleCAhPT0gMCA/IFxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMuaGFuZGxlTGVmdENsaWNrfSBcbiAgICAgICAgICAgICAgaWQ9XCJsZWZ0QXJyb3dcIj4mbGFycjtcbiAgICAgICAgICAgIDwvYT4gOiBudWxsfVxuICAgICAgICAgIHtwcm9wcy5jdXJyUGhvdG9JbmRleCAhPT0gKHBob3RvR2FsbGVyeS5sZW5ndGggLSAxKSA/XG4gICAgICAgICAgICA8YSBcbiAgICAgICAgICAgICAgb25DbGljaz17cHJvcHMuaGFuZGxlUmlnaHRDbGlja31cbiAgICAgICAgICAgICAgaWQ9XCJyaWdodEFycm93XCI+JnJhcnI7XG4gICAgICAgICAgICA8L2E+IDogbnVsbH1cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEZWZhdWx0VmlldzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jbGFzcyBFeHBhbmRlZFZpZXcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB6b29tVmlldzogZmFsc2VcbiAgICB9O1xuICAgIFxuICAgIHRoaXMudG9nZ2xlWm9vbVZpZXcgPSB0aGlzLnRvZ2dsZVpvb21WaWV3LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVNb3VzZU1vdmUgPSB0aGlzLmhhbmRsZU1vdXNlTW92ZS5iaW5kKHRoaXMpO1xuICB9XG4gIFxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdleHBhbmRlZFZpZXcnKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5oYW5kbGVNb3VzZU1vdmUpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwYW5kZWRWaWV3Jyk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMuaGFuZGxlTW91c2VNb3ZlKTtcbiAgfVxuXG4gIHRvZ2dsZVpvb21WaWV3KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgem9vbVZpZXc6ICF0aGlzLnN0YXRlLnpvb21WaWV3XG4gICAgfSk7XG4gIH1cbiAgXG4gIGhhbmRsZU1vdXNlTW92ZShlKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZXhwYW5kZWRWaWV3Jyk7XG4gICAgdmFyIHhQZXJjZW50ID0gKGUub2Zmc2V0WCAvIGVsZW1lbnQuY2xpZW50V2lkdGgpICogMTAwO1xuICAgIHZhciB5UGVyY2VudCA9IChlLm9mZnNldFkgLyBlbGVtZW50LmNsaWVudEhlaWdodCkgKiAxMDA7XG4gICAgZWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb25YID0geFBlcmNlbnQgKyBcIiVcIjtcbiAgICBlbGVtZW50LnN0eWxlLmJhY2tncm91bmRQb3NpdGlvblkgPSB5UGVyY2VudCArIFwiJVwiO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUgJiYgIXRoaXMuc3RhdGUuem9vbVZpZXcpIHtcbiAgICAgIHZhciBwaG90b0dhbGxlcnkgPSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD1cImV4cGFuZGVkVmlld1wiPlxuICAgICAgICAgIDxhIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnRvZ2dsZVpvb21WaWV3fVxuICAgICAgICAgICAgICBzcmM9e3Bob3RvR2FsbGVyeVt0aGlzLnByb3BzLmN1cnJQaG90b0luZGV4XS51cmx9IFxuICAgICAgICAgICAgICBhbHQ9e3RoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZS5uYW1lfSBcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnpvb21WaWV3ID8gJ3pvb21JblZpZXcnIDogJ3pvb21PdXRWaWV3J30gXG4gICAgICAgICAgICAgIGlkPXt0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUuc3R5bGVfaWR9PlxuICAgICAgICAgICAgPC9pbWc+XG4gICAgICAgICAgICA8YSBvbkNsaWNrPXt0aGlzLnByb3BzLnRvZ2dsZVZpZXd9IGlkPVwiZnVsbHNjcmVlbkljb25cIj48aSBjbGFzcz1cImZhcyBmYS1leHBhbmRcIj48L2k+PC9hPlxuICAgICAgICAgICAge3RoaXMucHJvcHMuY3VyclBob3RvSW5kZXggIT09IDAgPyBcbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLnByb3BzLmhhbmRsZUxlZnRDbGlja30gXG4gICAgICAgICAgICAgICAgaWQ9XCJsZWZ0QXJyb3dcIj4mbGFycjtcbiAgICAgICAgICAgICAgPC9hPiA6IG51bGx9XG4gICAgICAgICAgICB7dGhpcy5wcm9wcy5jdXJyUGhvdG9JbmRleCAhPT0gKHRoaXMucHJvcHMuc3R5bGVJbmZvLmxlbmd0aCAtIDEpID9cbiAgICAgICAgICAgICAgPGEgXG4gICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5wcm9wcy5oYW5kbGVSaWdodENsaWNrfVxuICAgICAgICAgICAgICAgIGlkPVwicmlnaHRBcnJvd1wiPiZyYXJyO1xuICAgICAgICAgICAgICA8L2E+IDogbnVsbH1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuem9vbVZpZXcpIHtcbiAgICAgIHZhciBwaG90b0dhbGxlcnkgPSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zO1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBcbiAgICAgICAgICBpZD1cImV4cGFuZGVkVmlld1wiXG4gICAgICAgICAgY2xhc3NOYW1lPXt0aGlzLnN0YXRlLnpvb21WaWV3ID8gJ3pvb21JblZpZXcnIDogJ3pvb21PdXRWaWV3J31cbiAgICAgICAgICBzdHlsZT17eydiYWNrZ3JvdW5kSW1hZ2UnOiBgdXJsKCcke3Bob3RvR2FsbGVyeVt0aGlzLnByb3BzLmN1cnJQaG90b0luZGV4XS51cmx9JylgfX1cbiAgICAgICAgICBvbk1vdXNlTW92ZT17dGhpcy5oYW5kbGVNb3VzZU1vdmV9XG4gICAgICAgICAgb25DbGljaz17dGhpcy50b2dnbGVab29tVmlld30+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRXhwYW5kZWRWaWV3OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIFN0YXJSYXRpbmcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuYXZlcmFnZVJhdGluZykge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD1cInN0YXJSYXRpbmdcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXJzXCIgc3R5bGU9e3snLS1yYXRpbmcnOiB0aGlzLnByb3BzLmF2ZXJhZ2VSYXRpbmd9fT48L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBpZD1cInN0YXJSYXRpbmdcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXJzXCIgc3R5bGU9e3snLS1yYXRpbmcnOiAwfX0+PC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXJSYXRpbmc7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgUHJvZHVjdEluZm8gPSAocHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmluZm8gJiYgcHJvcHMuc2VsZWN0ZWRTdHlsZSkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPVwicHJvZHVjdEluZm9cIj5cbiAgICAgICAgPGRpdiBpZD1cInByb2R1Y3RDYXRlZ29yeVwiPnsocHJvcHMuaW5mby5jYXRlZ29yeSkudG9VcHBlckNhc2UoKX08L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cInByb2R1Y3RUaXRsZVwiPntwcm9wcy5pbmZvLm5hbWV9PC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9XCJwcm9kdWN0UHJpY2VcIj4ke3Byb3BzLmluZm8uZGVmYXVsdF9wcmljZX08L2Rpdj5cbiAgICAgICAgPGRpdiBpZD1cInN0eWxlSW5mb1wiPjxiPlNUWUxFID48L2I+IHsocHJvcHMuc2VsZWN0ZWRTdHlsZS5uYW1lKS50b1VwcGVyQ2FzZSgpfTwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD1cInByb2R1Y3RJbmZvXCI+PC9kaXY+XG4gICAgKVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBQcm9kdWN0SW5mbzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG52YXIgU3R5bGVUaHVtYm5haWwgPSAocHJvcHMpID0+IHtcbiAgaWYgKChwcm9wcy5pICsgMSkgJSA0ID09PSAwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhIG9uQ2xpY2s9e3Byb3BzLmNoYW5nZVN0eWxlfSBpZD17cHJvcHMuaW5kZXh9IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIHNyYz17cHJvcHMuc3R5bGUucGhvdG9zWzBdLnRodW1ibmFpbF91cmwgfHwgJ2h0dHBzOi8vd3d3LnRoZXJtYXhnbG9iYWwuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDIwLzA1L2ltYWdlLW5vdC1mb3VuZC5qcGcnfSBhbHQ9e3Byb3BzLnN0eWxlLm5hbWV9IGNsYXNzTmFtZT1cInN0eWxlXCIgaWQ9e3Byb3BzLmluZGV4fT48L2ltZz5cbiAgICAgICAgPGJyPjwvYnI+XG4gICAgICA8L2E+XG4gICAgKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxhIG9uQ2xpY2s9e3Byb3BzLmNoYW5nZVN0eWxlfSBpZD17cHJvcHMuaW5kZXh9IHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgPGltZyBzcmM9e3Byb3BzLnN0eWxlLnBob3Rvc1swXS50aHVtYm5haWxfdXJsIHx8ICdodHRwczovL3d3dy50aGVybWF4Z2xvYmFsLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wNS9pbWFnZS1ub3QtZm91bmQuanBnJ30gYWx0PXtwcm9wcy5zdHlsZS5uYW1lfSBjbGFzc05hbWU9XCJzdHlsZVwiIGlkPXtwcm9wcy5pbmRleH0+PC9pbWc+XG4gICAgPC9hPlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVUaHVtYm5haWw7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxudmFyIFN0eWxlQ2hlY2tUaHVtYm5haWwgPSAocHJvcHMpID0+IHtcbiAgcmV0dXJuIChcbiAgICA8YSBpZD17cHJvcHMuaW5kZXh9IGNsYXNzPVwiaW1nLWNvbnRhaW5lclwidGFyZ2V0PVwiX2JsYW5rXCIgPlxuICAgICAgPGltZyBzcmM9e3Byb3BzLnN0eWxlLnBob3Rvc1swXS50aHVtYm5haWxfdXJsIHx8ICdodHRwczovL3d3dy50aGVybWF4Z2xvYmFsLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAyMC8wNS9pbWFnZS1ub3QtZm91bmQuanBnJ30gYWx0PXtwcm9wcy5zdHlsZS5uYW1lfSBjbGFzc05hbWU9XCJzdHlsZVwiIGlkPXtwcm9wcy5zdHlsZS5zdHlsZV9pZH0+PC9pbWc+XG4gICAgICA8aSBpZD1cImNoZWNrSWNvblwiY2xhc3M9XCJmYSBmYS1jaGVjay1jaXJjbGVcIj48L2k+ICAgIFxuICAgIDwvYT5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFN0eWxlQ2hlY2tUaHVtYm5haWw7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTdHlsZVRodW1ibmFpbCBmcm9tICcuL1N0eWxlVGh1bWJuYWlsLmpzeCc7XG5pbXBvcnQgU3R5bGVDaGVja1RodW1ibmFpbCBmcm9tICcuL1N0eWxlQ2hlY2tUaHVtYm5haWwuanN4JztcblxuY29uc3QgU3R5bGVTZWxlY3RvciA9IChwcm9wcykgPT4ge1xuICBcbiAgaWYgKHByb3BzLnN0eWxlSW5mbykge1xuXG4gICAgdmFyIGkgPSAwO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJzdHlsZVNlbGVjdG9yXCI+XG4gICAgICAgIDxTdHlsZUNoZWNrVGh1bWJuYWlsIGNoYW5nZVN0eWxlPXtwcm9wcy5jaGFuZ2VTdHlsZX0gc3R5bGU9e3Byb3BzLnNlbGVjdGVkU3R5bGV9IGluZGV4PXtwcm9wcy5pbmRleFN0eWxlU2VsZWN0ZWR9Lz5cbiAgICAgICAge3Byb3BzLnN0eWxlSW5mby5tYXAoKHN0eWxlLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChpbmRleCAhPT0gcHJvcHMuaW5kZXhTdHlsZVNlbGVjdGVkKSB7XG4gICAgICAgICAgICBpID0gaSArIDE7XG4gICAgICAgICAgICByZXR1cm4gKDxTdHlsZVRodW1ibmFpbCBjaGFuZ2VTdHlsZT17cHJvcHMuY2hhbmdlU3R5bGV9IHN0eWxlPXtzdHlsZX0gaW5kZXg9e2luZGV4fSBpPXtpfS8+KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9XCJzdHlsZVNlbGVjdG9yXCI+PC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdHlsZVNlbGVjdG9yOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IEFkZFRvQmFnQnV0dG9uID0gKHByb3BzKSA9PiB7XG4gIC8vIGlmIHRoZXJlIGlzIG5vIHN0b2NrLCB0aGUgYnV0dG9uIHdpbGwgbm90IHJlbmRlclxuICBpZiAocHJvcHMuYXZhaWxhYmxlU2l6ZXMubGVuZ3RoICE9PSAwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxidXR0b24gaWQ9XCJhZGRUb0JhZ0J1dHRvblwiIG9uQ2xpY2s9e3Byb3BzLmhhbmRsZUFkZFRvQmFnU3VibWl0fT5BREQgVE8gQkFHPC9idXR0b24+XG4gICAgKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn07XG5leHBvcnQgZGVmYXVsdCBBZGRUb0JhZ0J1dHRvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFkZFRvQmFnQnV0dG9uIGZyb20gJy4vQWRkVG9CYWdCdXR0b24uanN4JztcbmNvbnN0ICQgPSByZXF1aXJlKCdqcXVlcnknKTtcblxuY2xhc3MgQWRkVG9CYWcgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWxlY3RlZFNpemU6ICdTRUxFQ1QgU0laRScsXG4gICAgICBzZWxlY3RlZFF1YW50aXR5OiAnLScsXG4gICAgICBtYXhRdWFudGl0eTogMSxcbiAgICAgIHNob3dNZXNzYWdlOiBmYWxzZSxcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVTaXplQ2hhbmdlID0gdGhpcy5oYW5kbGVTaXplQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVNYXhRdWFudGl0eSA9IHRoaXMudXBkYXRlTWF4UXVhbnRpdHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVF1YW50aXR5Q2hhbmdlID0gdGhpcy5oYW5kbGVRdWFudGl0eUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQWRkVG9CYWdTdWJtaXQgPSB0aGlzLmhhbmRsZUFkZFRvQmFnU3VibWl0LmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVTaXplQ2hhbmdlKGUpIHtcbiAgICB2YXIgc2VsZWN0ZWRTaXplID0gZS50YXJnZXQudmFsdWU7XG4gICAgdGhpcy51cGRhdGVNYXhRdWFudGl0eShzZWxlY3RlZFNpemUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2VsZWN0ZWRTaXplOiBzZWxlY3RlZFNpemUsXG4gICAgICBzZWxlY3RlZFF1YW50aXR5OiAxLFxuICAgICAgc2hvd01lc3NhZ2U6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICB1cGRhdGVNYXhRdWFudGl0eShzaXplKSB7XG4gICAgdmFyIG1heEF2YWlsYWJsZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMucHJvcHMuYXZhaWxhYmxlU2l6ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLmF2YWlsYWJsZVNpemVzW2ldWzBdID09PSBzaXplKSB7XG4gICAgICAgIG1heEF2YWlsYWJsZSA9IHRoaXMucHJvcHMuYXZhaWxhYmxlU2l6ZXNbaV1bMV07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChtYXhBdmFpbGFibGUgPiAxNSkge1xuICAgICAgbWF4QXZhaWxhYmxlID0gMTU7XG4gICAgfVxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWF4UXVhbnRpdHk6IG1heEF2YWlsYWJsZVxuICAgIH0pO1xuICB9XG4gIFxuICBoYW5kbGVRdWFudGl0eUNoYW5nZShlKSB7XG4gICAgdmFyIHNlbGVjdGVkUXVhbnRpdHkgPSBlLnRhcmdldC52YWx1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNlbGVjdGVkUXVhbnRpdHk6IHNlbGVjdGVkUXVhbnRpdHlcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUFkZFRvQmFnU3VibWl0KCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNlbGVjdGVkU2l6ZSAhPT0gJ1NFTEVDVCBTSVpFJykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLnByb3BzLmF2YWlsYWJsZVNpemVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmF2YWlsYWJsZVNpemVzW2ldWzBdID09PSB0aGlzLnN0YXRlLnNlbGVjdGVkU2l6ZSkge1xuICAgICAgICAgIHZhciBza3VfaWQgPSB0aGlzLnByb3BzLmF2YWlsYWJsZVNpemVzW2ldWzJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgXCJza3VfaWRcIjogc2t1X2lkLFxuICAgICAgICBcImNvdW50XCI6IHRoaXMuc3RhdGUuc2VsZWN0ZWRRdWFudGl0eVxuICAgICAgfTtcbiAgICAgIC8vIFRPRE86IEFkZCBjYWxsIHRvIHBvc3QgZGF0YSBoZXJlICYgdG8gc2VydmVyXG4gICAgICBmZXRjaChgL2NhcnRgLCB7XG4gICAgICAgIG1ldGhvZDogJ3Bvc3QnLFxuICAgICAgICBoZWFkZXJzOiB7J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ30sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMpXG4gICAgICB9KVxuICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnUG9zdGVkIGNhcnQhJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBBZGQgY29kZSB0byBvcGVuIHRoZSBzaXplIGRyb3Bkb3duXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgc2hvd01lc3NhZ2U6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICB2YXIgcXVhbnRpdHlBcnIgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8ICh0aGlzLnN0YXRlLm1heFF1YW50aXR5ICsgMSk7IGkrKykge1xuICAgICAgcXVhbnRpdHlBcnIucHVzaChpKTtcbiAgICB9XG4gICAgdmFyIGRlZmF1bHRTaXplT3B0aW9uID0gIXRoaXMucHJvcHMuYXZhaWxhYmxlU2l6ZXNbMF0gPyAnT1VUIE9GIFNUT0NLJyA6ICdTRUxFQ1QgU0laRSc7XG4gICAgdmFyIGRlZmF1bHRRdWFudGl0eSA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRTaXplID09PSAnU0VMRUNUIFNJWkUnID8gJy0nIDogMTtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPVwiYWRkVG9CYWdcIj5cbiAgICAgICAge3RoaXMuc3RhdGUuc2hvd01lc3NhZ2UgPyA8YSBpZD1cImVycm9yTWVzc2FnZVwiPlBsZWFzZSBTZWxlY3QgU2l6ZTwvYT4gOiBudWxsfVxuICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgPHNlbGVjdCBuYW1lPXt0aGlzLnN0YXRlLnNlbGVjdGVkU2l6ZX0gaWQ9XCJzZWxlY3RTaXplXCIgcGxhY2Vob2xkZXI9e2RlZmF1bHRTaXplT3B0aW9ufSBvbkNoYW5nZT17dGhpcy5oYW5kbGVTaXplQ2hhbmdlfT5cbiAgICAgICAgICA8b3B0aW9uIHZhbHVlPXtkZWZhdWx0U2l6ZU9wdGlvbn0+e2RlZmF1bHRTaXplT3B0aW9ufTwvb3B0aW9uPlxuICAgICAgICAgIHt0aGlzLnByb3BzLmF2YWlsYWJsZVNpemVzLm1hcCgoc2l6ZSkgPT4gPG9wdGlvbiB2YWx1ZT17c2l6ZVswXX0+e3NpemVbMF19PC9vcHRpb24+KX1cbiAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDxzZWxlY3QgbmFtZT17dGhpcy5zdGF0ZS5zZWxlY3RlZFF1YW50aXR5fSBpZD1cInNlbGVjdFF1YW50aXR5XCIgcGxhY2Vob2xkZXI9e2RlZmF1bHRRdWFudGl0eX0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlUXVhbnRpdHlDaGFuZ2V9PlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNlbGVjdGVkU2l6ZSA9PT0gJ1NFTEVDVCBTSVpFJyA/IDxvcHRpb24gdmFsdWU9XCItXCI+LTwvb3B0aW9uPiA6IG51bGx9XG4gICAgICAgICAge3F1YW50aXR5QXJyLm1hcCgocXVhbnRpdHkpID0+IDxvcHRpb24gdmFsdWU9e3F1YW50aXR5fT57cXVhbnRpdHl9PC9vcHRpb24+KX1cbiAgICAgICAgPC9zZWxlY3Q+PGJyPjwvYnI+XG4gICAgICAgIDxBZGRUb0JhZ0J1dHRvbiBcbiAgICAgICAgICBoYW5kbGVBZGRUb0JhZ1N1Ym1pdD17dGhpcy5oYW5kbGVBZGRUb0JhZ1N1Ym1pdH1cbiAgICAgICAgICBhdmFpbGFibGVTaXplcz17dGhpcy5wcm9wcy5hdmFpbGFibGVTaXplc30vPlxuICAgICAgICA8YnV0dG9uIGlkPVwic3RhckJ1dHRvblwiPiYjOTczNDs8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBBZGRUb0JhZzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBPdmVydmlld0Rlc2NyaXB0aW9uID0gKHByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pbmZvICYmIHByb3BzLmluZm8uc2xvZ2FuKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJvdmVydmlld0Rlc2NyaXB0aW9uXCI+XG4gICAgICAgIDxoMj57cHJvcHMuaW5mby5zbG9nYW59PC9oMj5cbiAgICAgICAgPGRpdj57cHJvcHMuaW5mby5kZXNjcmlwdGlvbn08L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJvdmVydmlld0Rlc2NyaXB0aW9uXCI+PC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgT3ZlcnZpZXdEZXNjcmlwdGlvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBPdmVydmlld0ZlYXR1cmVzID0gKHByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5pbmZvICYmIHByb3BzLmluZm8uZmVhdHVyZXMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD1cIm92ZXJ2aWV3RmVhdHVyZXNcIj5cbiAgICAgICAge3Byb3BzLmluZm8uZmVhdHVyZXMubWFwKChmZWF0dXJlKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxkaXYgaWQ9e2ZlYXR1cmUuZmVhdHVyZX0gY2xhc3NOYW1lPVwiZmVhdHVyZVwiPiYjMTAwMDM7IHtmZWF0dXJlLmZlYXR1cmV9OiB7ZmVhdHVyZS52YWx1ZX08L2Rpdj5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9XCJvdmVydmlld0ZlYXR1cmVzXCI+PC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgT3ZlcnZpZXdGZWF0dXJlczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBUaHVtYm5haWwgPSAocHJvcHMpID0+IHtcbiAgaWYgKHByb3BzLmluZGV4ID09PSBwcm9wcy5pbmRleFNlbGVjdGVkKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxhIHRhcmdldD1cIl9ibGFua1wiPlxuICAgICAgICA8aW1nIFxuICAgICAgICAgIHNyYz17cHJvcHMucGhvdG8udGh1bWJuYWlsX3VybCB8fCAnaHR0cHM6Ly93d3cudGhlcm1heGdsb2JhbC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvaW1hZ2Utbm90LWZvdW5kLmpwZyd9IFxuICAgICAgICAgIGFsdD17cHJvcHMubmFtZX0gXG4gICAgICAgICAgY2xhc3NOYW1lPXsnc3R5bGVQaG90bycgKyBwcm9wcy52aWV3ICsgJyBzZWxlY3RlZFRodW1ibmFpbCd9XG4gICAgICAgICAgaWQ9e3Byb3BzLmluZGV4fS8+XG4gICAgICAgIDxicj48L2JyPlxuICAgICAgPC9hPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIChcbiAgICA8YSB0YXJnZXQ9XCJfYmxhbmtcIj5cbiAgICAgIDxpbWcgXG4gICAgICAgIHNyYz17cHJvcHMucGhvdG8udGh1bWJuYWlsX3VybCB8fCAnaHR0cHM6Ly93d3cudGhlcm1heGdsb2JhbC5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMjAvMDUvaW1hZ2Utbm90LWZvdW5kLmpwZyd9IFxuICAgICAgICBhbHQ9e3Byb3BzLm5hbWV9IFxuICAgICAgICBjbGFzc05hbWU9eydzdHlsZVBob3RvJyArIHByb3BzLnZpZXcgfSBcbiAgICAgICAgaWQ9e3Byb3BzLmluZGV4fVxuICAgICAgICBvbkNsaWNrPXtwcm9wcy5oYW5kbGVQaG90b1NlbGVjdGlvbn0+PC9pbWc+XG4gICAgICA8YnI+PC9icj5cbiAgICA8L2E+XG4gICk7XG4gIFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGh1bWJuYWlsOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgVGh1bWJuYWlsIGZyb20gJy4vVGh1bWJuYWlsLmpzeCc7XG5cbmNsYXNzIFRodW1ibmFpbExpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBmaXJzdFBob3RvSW5kZXg6IDAsXG4gICAgICBwaG90b0luZGV4TGlzdDogbnVsbFxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZVVwU2Nyb2xsID0gdGhpcy5oYW5kbGVVcFNjcm9sbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlRG93blNjcm9sbCA9IHRoaXMuaGFuZGxlRG93blNjcm9sbC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlVXBTY3JvbGwoKSB7XG4gICAgdmFyIG5ld0luZGV4ID0gdGhpcy5zdGF0ZS5maXJzdFBob3RvSW5kZXggPT09IDAgP1xuICAgICAgKHRoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZS5waG90b3MubGVuZ3RoIC0gMSkgOiB0aGlzLnN0YXRlLmZpcnN0UGhvdG9JbmRleCAtIDE7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBmaXJzdFBob3RvSW5kZXg6IG5ld0luZGV4XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVEb3duU2Nyb2xsKCkge1xuICAgIHZhciBuZXdJbmRleCA9IHRoaXMuc3RhdGUuZmlyc3RQaG90b0luZGV4ID09PSAodGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlLnBob3Rvcy5sZW5ndGggLSAxKSA/XG4gICAgICAwIDogdGhpcy5zdGF0ZS5maXJzdFBob3RvSW5kZXggKyAxO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZmlyc3RQaG90b0luZGV4OiBuZXdJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUpIHtcbiAgICAgIHZhciBwaG90b3MgPSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zLnNsaWNlKHRoaXMuc3RhdGUuZmlyc3RQaG90b0luZGV4LCB0aGlzLnN0YXRlLmZpcnN0UGhvdG9JbmRleCArIDcpO1xuICAgICAgaWYgKHBob3Rvcy5sZW5ndGggPCA3KSB7XG4gICAgICAgIHZhciByZW1haW5kZXIgPSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zLnNsaWNlKDAsICg3IC0gcGhvdG9zLmxlbmd0aCkpO1xuICAgICAgICBwaG90b3MgPSBwaG90b3MuY29uY2F0KHJlbWFpbmRlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgaWQ9XCJ0aHVtYm5haWxMaXN0XCIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLnZpZXd9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zLmxlbmd0aCA+IDcgP1xuICAgICAgICAgICAgPGEgb25DbGljaz17dGhpcy5oYW5kbGVVcFNjcm9sbH0gaWQ9XCJ1cFNjcm9sbC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgPGkgaWQ9XCJ1cFNjcm9sbFwiIGNsYXNzPVwiZmEgZmEtYW5nbGUtdXBcIj48L2k+XG4gICAgICAgICAgICA8L2E+IDogbnVsbH1cbiAgICAgICAgICA8YnI+PC9icj5cbiAgICAgICAgICB7cGhvdG9zLm1hcCgocGhvdG8sIGluZGV4KSA9PiB7XG4gICAgICAgICAgICB2YXIgaW5pdEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBpZiAoKGluaXRJbmRleCArIHRoaXMuc3RhdGUuZmlyc3RQaG90b0luZGV4KSA+PSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUucGhvdG9zLmxlbmd0aCkge1xuICAgICAgICAgICAgICB2YXIgZmluYWxJbmRleCA9IGluaXRJbmRleCArIHRoaXMuc3RhdGUuZmlyc3RQaG90b0luZGV4IC0gdGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlLnBob3Rvcy5sZW5ndGg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgZmluYWxJbmRleCA9IGluaXRJbmRleCArIHRoaXMuc3RhdGUuZmlyc3RQaG90b0luZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgPFRodW1ibmFpbFxuICAgICAgICAgICAgICAgIG5hbWU9e3RoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZS5uYW1lfVxuICAgICAgICAgICAgICAgIHBob3RvPXtwaG90b31cbiAgICAgICAgICAgICAgICBpbmRleD17ZmluYWxJbmRleH1cbiAgICAgICAgICAgICAgICBpbmRleFNlbGVjdGVkPXt0aGlzLnByb3BzLmN1cnJQaG90b0luZGV4fVxuICAgICAgICAgICAgICAgIGhhbmRsZVBob3RvU2VsZWN0aW9uPXt0aGlzLnByb3BzLmhhbmRsZVBob3RvU2VsZWN0aW9ufVxuICAgICAgICAgICAgICAgIHZpZXc9e3RoaXMucHJvcHMudmlld30vPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KX1cbiAgICAgICAgICB7dGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlLnBob3Rvcy5sZW5ndGggPiA3ID9cbiAgICAgICAgICAgIDxhIG9uQ2xpY2s9e3RoaXMuaGFuZGxlRG93blNjcm9sbH0gaWQ9XCJkb3duU2Nyb2xsLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICA8aSBpZD1cImRvd25TY3JvbGxcIiBjbGFzcz1cImZhIGZhLWFuZ2xlLWRvd25cIj48L2k+XG4gICAgICAgICAgICA8L2E+IDogbnVsbH1cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IFRodW1ibmFpbExpc3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTaGFyZVRvU29jaWFsTWVkaWEgZnJvbSAnLi9TaGFyZVRvU29jaWFsTWVkaWEuanN4JztcbmltcG9ydCBEZWZhdWx0VmlldyBmcm9tICcuL0RlZmF1bHRWaWV3LmpzeCc7XG5pbXBvcnQgRXhwYW5kZWRWaWV3IGZyb20gJy4vRXhwYW5kZWRWaWV3LmpzeCc7XG5pbXBvcnQgU3RhclJhdGluZyBmcm9tICcuL1N0YXJSYXRpbmcuanN4JztcbmltcG9ydCBQcm9kdWN0SW5mbyBmcm9tICcuL1Byb2R1Y3RJbmZvLmpzeCc7XG5pbXBvcnQgU3R5bGVTZWxlY3RvciBmcm9tICcuL1N0eWxlU2VsZWN0b3IuanN4JztcbmltcG9ydCBBZGRUb0JhZyBmcm9tICcuL0FkZFRvQmFnLmpzeCc7XG5pbXBvcnQgT3ZlcnZpZXdEZXNjcmlwdGlvbiBmcm9tICcuL092ZXJ2aWV3RGVzY3JpcHRpb24uanN4JztcbmltcG9ydCBPdmVydmlld0ZlYXR1cmVzIGZyb20gJy4vT3ZlcnZpZXdGZWF0dXJlcy5qc3gnO1xuaW1wb3J0IFRodW1ibmFpbExpc3QgZnJvbSAnLi9UaHVtYm5haWxMaXN0LmpzeCc7XG5cbmNsYXNzIFByb2R1Y3REZXRhaWxzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdmlldzogJ2RlZmF1bHQnLFxuICAgICAgY3VyclBob3RvSW5kZXg6IDAsXG4gICAgfTtcbiAgICBcbiAgICB0aGlzLmhhbmRsZVBob3RvU2VsZWN0aW9uID0gdGhpcy5oYW5kbGVQaG90b1NlbGVjdGlvbi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlTGVmdENsaWNrID0gdGhpcy5oYW5kbGVMZWZ0Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJpZ2h0Q2xpY2sgPSB0aGlzLmhhbmRsZVJpZ2h0Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLnRvZ2dsZVZpZXcgPSB0aGlzLnRvZ2dsZVZpZXcuYmluZCh0aGlzKTtcbiAgfVxuICBcbiAgdG9nZ2xlVmlldygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS52aWV3ID09PSAnZGVmYXVsdCcpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICB2aWV3OiAnZXhwYW5kZWQnXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHZpZXc6ICdkZWZhdWx0J1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlUGhvdG9TZWxlY3Rpb24oZSkge1xuICAgIHZhciBpbmRleCA9IGUudGFyZ2V0LmlkO1xuICAgIGluZGV4ID0gTnVtYmVyKGluZGV4KTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJQaG90b0luZGV4OiBpbmRleFxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlTGVmdENsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIHRvdGFsUGhvdG9zID0gdGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlLnBob3Rvcy5sZW5ndGg7XG4gICAgdmFyIG5ld0luZGV4ID0gdGhpcy5zdGF0ZS5jdXJyUGhvdG9JbmRleCA9PT0gMCA/IHRvdGFsUGhvdG9zIC0gMSA6IHRoaXMuc3RhdGUuY3VyclBob3RvSW5kZXggLSAxO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VyclBob3RvSW5kZXg6IG5ld0luZGV4XG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVSaWdodENsaWNrKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIHRvdGFsUGhvdG9zID0gdGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlLnBob3Rvcy5sZW5ndGg7XG4gICAgdmFyIG5ld0luZGV4ID0gdGhpcy5zdGF0ZS5jdXJyUGhvdG9JbmRleCA9PT0gdG90YWxQaG90b3MgLSAxID8gMCA6IHRoaXMuc3RhdGUuY3VyclBob3RvSW5kZXggKyAxO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VyclBob3RvSW5kZXg6IG5ld0luZGV4XG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgXG4gICAgdmFyIGF2YWlsYWJsZVNpemVzID0gW107XG4gICAgaWYgKHRoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZSkge1xuICAgICAgdmFyIHNrdXMgPSB0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGUuc2t1cztcbiAgICAgIGZvciAodmFyIGtleSBpbiBza3VzKSB7XG4gICAgICAgIGF2YWlsYWJsZVNpemVzLnB1c2goW3NrdXNba2V5XVsnc2l6ZSddLCBza3VzW2tleV1bJ3F1YW50aXR5J10sIGtleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGlkPVwicHJvZHVjdERldGFpbHNcIj5cbiAgICAgICAge3RoaXMuc3RhdGUudmlldyA9PT0gJ2RlZmF1bHQnID9cbiAgICAgICAgICA8ZGl2IGlkPSdmaXJzdFBhbmVsRGVmYXVsdCc+XG4gICAgICAgICAgICA8VGh1bWJuYWlsTGlzdCBcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTdHlsZT17dGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlfVxuICAgICAgICAgICAgICBzdHlsZUluZm89e3RoaXMucHJvcHMuc3R5bGVJbmZvfSBcbiAgICAgICAgICAgICAgY3VyclBob3RvSW5kZXg9e3RoaXMuc3RhdGUuY3VyclBob3RvSW5kZXh9XG4gICAgICAgICAgICAgIGhhbmRsZVBob3RvU2VsZWN0aW9uPXt0aGlzLmhhbmRsZVBob3RvU2VsZWN0aW9ufVxuICAgICAgICAgICAgICB2aWV3PXt0aGlzLnN0YXRlLnZpZXd9Lz5cbiAgICAgICAgICAgIDxEZWZhdWx0VmlldyBcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTdHlsZT17dGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlfVxuICAgICAgICAgICAgICBzdHlsZUluZm89e3RoaXMucHJvcHMuc3R5bGVJbmZvfSBcbiAgICAgICAgICAgICAgY3VyclBob3RvSW5kZXg9e3RoaXMuc3RhdGUuY3VyclBob3RvSW5kZXh9XG4gICAgICAgICAgICAgIHRvZ2dsZVZpZXc9e3RoaXMudG9nZ2xlVmlld31cbiAgICAgICAgICAgICAgaGFuZGxlTGVmdENsaWNrPXt0aGlzLmhhbmRsZUxlZnRDbGlja31cbiAgICAgICAgICAgICAgaGFuZGxlUmlnaHRDbGljaz17dGhpcy5oYW5kbGVSaWdodENsaWNrfS8+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiaW5mb1wiPlxuICAgICAgICAgICAgICA8U3RhclJhdGluZyBhdmVyYWdlUmF0aW5nPXt0aGlzLnByb3BzLmF2ZXJhZ2VSYXRpbmd9Lz5cbiAgICAgICAgICAgICAgPFByb2R1Y3RJbmZvIFxuICAgICAgICAgICAgICAgIGluZm89e3RoaXMucHJvcHMuaW5mb30gXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRTdHlsZT17dGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlfS8+XG4gICAgICAgICAgICAgIDxTdHlsZVNlbGVjdG9yIFxuICAgICAgICAgICAgICAgIGNoYW5nZVN0eWxlPXt0aGlzLnByb3BzLmhhbmRsZVN0eWxlU2VsZWN0aW9ufSBcbiAgICAgICAgICAgICAgICBzdHlsZUluZm89e3RoaXMucHJvcHMuc3R5bGVJbmZvfSBcbiAgICAgICAgICAgICAgICBpbmRleFN0eWxlU2VsZWN0ZWQ9e3RoaXMucHJvcHMuaW5kZXhTdHlsZVNlbGVjdGVkfSBcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFN0eWxlPXt0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGV9Lz5cbiAgICAgICAgICAgICAgPEFkZFRvQmFnIFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkU3R5bGU9e3RoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZX0gXG4gICAgICAgICAgICAgICAgYXZhaWxhYmxlU2l6ZXM9e2F2YWlsYWJsZVNpemVzfS8+XG4gICAgICAgICAgICA8L2Rpdj4gXG4gICAgICAgICAgPC9kaXY+IDpcbiAgICAgICAgICA8ZGl2IGlkPVwiZmlyc3RQYW5lbEV4cGFuZGVkXCI+XG4gICAgICAgICAgICA8VGh1bWJuYWlsTGlzdCBcbiAgICAgICAgICAgICAgc2VsZWN0ZWRTdHlsZT17dGhpcy5wcm9wcy5zZWxlY3RlZFN0eWxlfVxuICAgICAgICAgICAgICBzdHlsZUluZm89e3RoaXMucHJvcHMuc3R5bGVJbmZvfSBcbiAgICAgICAgICAgICAgY3VyclBob3RvSW5kZXg9e3RoaXMuc3RhdGUuY3VyclBob3RvSW5kZXh9XG4gICAgICAgICAgICAgIGhhbmRsZVBob3RvU2VsZWN0aW9uPXt0aGlzLmhhbmRsZVBob3RvU2VsZWN0aW9ufVxuICAgICAgICAgICAgICB2aWV3PXt0aGlzLnN0YXRlLnZpZXd9Lz5cbiAgICAgICAgICAgIDxFeHBhbmRlZFZpZXcgXG4gICAgICAgICAgICAgIHNlbGVjdGVkU3R5bGU9e3RoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZX1cbiAgICAgICAgICAgICAgc3R5bGVJbmZvPXt0aGlzLnByb3BzLnN0eWxlSW5mb31cbiAgICAgICAgICAgICAgY3VyclBob3RvSW5kZXg9e3RoaXMuc3RhdGUuY3VyclBob3RvSW5kZXh9XG4gICAgICAgICAgICAgIHRvZ2dsZVZpZXc9e3RoaXMudG9nZ2xlVmlld31cbiAgICAgICAgICAgICAgaGFuZGxlTGVmdENsaWNrPXt0aGlzLmhhbmRsZUxlZnRDbGlja31cbiAgICAgICAgICAgICAgaGFuZGxlUmlnaHRDbGljaz17dGhpcy5oYW5kbGVSaWdodENsaWNrfS8+XG4gICAgICAgICAgPC9kaXY+fVxuICAgICAgICA8ZGl2IGlkPVwic2Vjb25kUGFuZWxcIj5cbiAgICAgICAgICA8T3ZlcnZpZXdEZXNjcmlwdGlvbiBpbmZvPXt0aGlzLnByb3BzLmluZm99Lz5cbiAgICAgICAgICA8T3ZlcnZpZXdGZWF0dXJlcyBpbmZvPXt0aGlzLnByb3BzLmluZm99Lz5cbiAgICAgICAgICA8U2hhcmVUb1NvY2lhbE1lZGlhIGN1cnJQaG90b0luZGV4PXt0aGlzLnN0YXRlLmN1cnJQaG90b0luZGV4fSBzZWxlY3RlZFN0eWxlPXt0aGlzLnByb3BzLnNlbGVjdGVkU3R5bGV9Lz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3REZXRhaWxzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IFNlYXJjaCA9IChwcm9wcykgPT4gKFxuXG4gIDxkaXYgY2xhc3NOYW1lPVwicWEtc2VhcmNoXCI+XG4gICAgPGlucHV0XG4gICAgICBhcmlhLWxhYmVsPVwiU2VhcmNoIHRocm91Z2ggcXVlc3Rpb25zXCJcbiAgICAgIGNsYXNzPVwicWEtc2VhcmNoLWlucHV0XCJcbiAgICAgIHR5cGU9XCJzZWFyY2hcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJIQVZFIEEgUVVFU1RJT04/IFNFQVJDSCBGT1IgQU5TV0VSUy4uLlwiXG4gICAgICB2YWx1ZT17cHJvcHMucXVlcnl9XG4gICAgICBvbkNoYW5nZT17cHJvcHMuaGFuZGxlU2VhcmNofVxuICAgIC8+XG4gICAgey8qIDxpIGNsYXNzPVwiZmEgZmEtc2VhcmNoXCI+PC9pPiAqL31cbiAgPC9kaXY+XG4pO1xuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2g7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgZm9ybWF0QW5zd2VyZXJOYW1lID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5hbWUgPT09ICdTZWxsZXInID8gPGI+e25hbWV9PC9iPiA6IG5hbWU7XG59O1xuXG5jb25zdCBmb3JtYXREYXRlID0gKHJhd0RhdGUpID0+IHtcblxuICBjb25zdCBtb250aHMgPSB7XG4gICAgJzAxJzogJ0phbnVhcnknLFxuICAgICcwMic6ICdGZWJydWFyeScsXG4gICAgJzAzJzogJ01hcmNoJyxcbiAgICAnMDQnOiAnQXByaWwnLFxuICAgICcwNSc6ICdNYXknLFxuICAgICcwNic6ICdKdW5lJyxcbiAgICAnMDcnOiAnSnVseScsXG4gICAgJzA4JzogJ0F1Z3VzdCcsXG4gICAgJzA5JzogJ1NlcHRlbWJlcicsXG4gICAgJzEwJzogJ09jdG9iZXInLFxuICAgICcxMSc6ICdOb3ZlbWJlcicsXG4gICAgJzEyJzogJ0RlY2VtYmVyJyxcbiAgfTtcblxuICBsZXQgZGF0ZVRvRm9ybWF0ID0gcmF3RGF0ZS5zbGljZSgwLCAxMCkuc3BsaXQoJy0nKTtcbiAgbGV0IG1vbnRoID0gbW9udGhzW2RhdGVUb0Zvcm1hdFsxXV07XG4gIGxldCBkYXkgPSBkYXRlVG9Gb3JtYXRbMl1bMF0gPT09ICcwJyA/IGRhdGVUb0Zvcm1hdFsyXVsxXSA6IGRhdGVUb0Zvcm1hdFsyXTtcbiAgbGV0IHllYXIgPSBkYXRlVG9Gb3JtYXRbMF07XG5cbiAgcmV0dXJuIGAke21vbnRofSAke2RheX0sICR7eWVhcn1gO1xuXG59O1xuXG5jb25zdCBzb3J0QW5zd2Vyc0xpc3QgPSAodW5zb3J0ZWRMaXN0KSA9PiB7XG5cbiAgbGV0IHNvcnRlZExpc3QgPSB1bnNvcnRlZExpc3Quc29ydCgoYSwgYikgPT4gYi5oZWxwZnVsbmVzcyAtIGEuaGVscGZ1bG5lc3MpO1xuICBsZXQgc2VsbGVyUmVzcG9uc2VzID0gW107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3J0ZWRMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHNvcnRlZExpc3RbaV0uYW5zd2VyZXJfbmFtZSA9PT0gJ1NlbGxlcicpIHtcbiAgICAgIHNlbGxlclJlc3BvbnNlcyA9IHNlbGxlclJlc3BvbnNlcy5jb25jYXQoc29ydGVkTGlzdC5zcGxpY2UoaSwgMSkpO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWxsZXJSZXNwb25zZXMuY29uY2F0KHNvcnRlZExpc3QpO1xufTtcblxuY29uc3QgdmFsaWRhdGVFbWFpbCA9IChlbWFpbCkgPT4ge1xuICBjb25zdCByZSA9IC9eW15cXHNAXStAW15cXHNAXSskLztcbiAgcmV0dXJuIHJlLnRlc3QoZW1haWwpO1xufTtcblxuY29uc3QgdmFsaWRhdGVGb3JtRmllbGRzID0gKHF1ZXN0aW9uLCBuaWNrbmFtZSwgZW1haWwpID0+IHtcblxuICBsZXQgcHJvYmxlbSA9ICcnO1xuICBpZiAoIXF1ZXN0aW9uKSB7XG4gICAgcHJvYmxlbSArPSAnXFxuIHF1ZXN0aW9uJztcbiAgfVxuICBpZiAoIW5pY2tuYW1lKSB7XG4gICAgcHJvYmxlbSArPSAnXFxuIG5pY2tuYW1lJztcbiAgfVxuICBpZiAoIXZhbGlkYXRlRW1haWwoZW1haWwpKSB7XG4gICAgcHJvYmxlbSArPSAnXFxuIGVtYWlsJztcbiAgfVxuICByZXR1cm4gcHJvYmxlbSA/IGBQbGVhc2UgZW50ZXIgYSB2YWxpZDogJHtwcm9ibGVtfWAgOiBudWxsO1xuXG59O1xuXG5leHBvcnQgeyBmb3JtYXRBbnN3ZXJlck5hbWUsIGZvcm1hdERhdGUsIHNvcnRBbnN3ZXJzTGlzdCwgdmFsaWRhdGVGb3JtRmllbGRzIH07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgSGVscGZ1bFJlcG9ydCA9IChwcm9wcykgPT4ge1xuXG4gIGxldCByZW5kZXJSZXBvcnRlZExpbmssIHJlbmRlckhlbHBmdWxMaW5rO1xuICBsZXQgaGVscGZ1bElkcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0ocHJvcHMuY29udGVudF90eXBlID09PSAncXVlc3Rpb24nID8gJ2hlbHBmdWxRdWVzdGlvbnMnIDogJ2hlbHBmdWxBbnN3ZXJzJykpO1xuXG4gIGlmIChwcm9wcy5yZXBvcnRlZCkge1xuICAgIHJlbmRlclJlcG9ydGVkTGluayA9ICg8c3Bhbj4gPGk+UmVwb3J0ZWQ8L2k+IHwgPC9zcGFuPik7XG4gIH0gZWxzZSB7XG4gICAgcmVuZGVyUmVwb3J0ZWRMaW5rID0gKCA8c3Bhbj5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPVwicWEtYnV0dG9uLWxpbmtcIiBvbkNsaWNrPXtwcm9wcy5oYW5kbGVSZXBvcnRCdXR0b25DbGlja30+IFJlcG9ydCA8L2J1dHRvbj5cbiAgICA8L3NwYW4+XG4gICAgKTtcbiAgfVxuXG4gIGlmIChoZWxwZnVsSWRzLmluY2x1ZGVzKHByb3BzLmNvbnRlbnRfaWQpKSB7XG4gICAgcmVuZGVySGVscGZ1bExpbmsgPSAoPHNwYW4+IHsnSGVscGZ1bD8nfSA8aT5ZZXM8L2k+IHtgKCR7cHJvcHMuaGVscGZ1bG5lc3N9KSB8IGB9PC9zcGFuPik7XG4gIH0gZWxzZSB7XG4gICAgcmVuZGVySGVscGZ1bExpbmsgPSAoPHNwYW4+XG4gICAgICA8c3Bhbj4gSGVscGZ1bD8gPC9zcGFuPlxuICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJxYS1idXR0b24tbGlua1wiIG9uQ2xpY2s9e3Byb3BzLmhhbmRsZUhlbHBmdWxCdXR0b25DbGlja30+IFllcyA8L2J1dHRvbj5cbiAgICAgIDxzcGFuPiB7YCgke3Byb3BzLmhlbHBmdWxuZXNzfSkgfCBgfSA8L3NwYW4+XG4gICAgPC9zcGFuPik7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxzcGFuPlxuICAgICAge3JlbmRlckhlbHBmdWxMaW5rfVxuICAgICAge3JlbmRlclJlcG9ydGVkTGlua31cbiAgICA8L3NwYW4+XG4gICk7XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEhlbHBmdWxSZXBvcnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGZvcm1hdEFuc3dlcmVyTmFtZSwgZm9ybWF0RGF0ZSB9IGZyb20gJy4uL2hlbHBlcnMuanMnO1xuaW1wb3J0IEhlbHBmdWxSZXBvcnQgZnJvbSAnLi9IZWxwZnVsUmVwb3J0LmpzeCc7XG5pbXBvcnQgeyBtYXJrQW5zd2VySGVscGZ1bCwgcmVwb3J0QW5zd2VyIH0gZnJvbSAnLi4vY29udHJvbGxlcnMuanMnO1xuXG5jbGFzcyBBbnN3ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmVwb3J0ZWQ6IGZhbHNlLFxuICAgICAgaGVscGZ1bG5lc3M6IHRoaXMucHJvcHMuaGVscGZ1bG5lc3NcbiAgICB9O1xuXG4gICAgdGhpcy5oYW5kbGVIZWxwZnVsQnV0dG9uQ2xpY2sgPSB0aGlzLmhhbmRsZUhlbHBmdWxCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlUmVwb3J0QnV0dG9uQ2xpY2sgPSB0aGlzLmhhbmRsZVJlcG9ydEJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVIZWxwZnVsQnV0dG9uQ2xpY2soKSB7XG4gICAgbWFya0Fuc3dlckhlbHBmdWwodGhpcy5wcm9wcy5hbnN3ZXJfaWQudG9TdHJpbmcoKSlcbiAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgbGV0IGhlbHBmdWxBbnN3ZXJzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaGVscGZ1bEFuc3dlcnMnKSk7XG4gICAgICAgIGhlbHBmdWxBbnN3ZXJzLnB1c2godGhpcy5wcm9wcy5hbnN3ZXJfaWQpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGVscGZ1bEFuc3dlcnMnLCBKU09OLnN0cmluZ2lmeShoZWxwZnVsQW5zd2VycykpO1xuICAgICAgICB0aGlzLnByb3BzLmluY3JlbWVudEhlbHBmdWxBbnN3ZXIodGhpcy5wcm9wcy5hbnN3ZXJfaWQpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBoZWxwZnVsbmVzczogdGhpcy5zdGF0ZS5oZWxwZnVsbmVzcyArIDFcbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlUmVwb3J0QnV0dG9uQ2xpY2soKSB7XG4gICAgcmVwb3J0QW5zd2VyKHRoaXMucHJvcHMuYW5zd2VyX2lkLnRvU3RyaW5nKCkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe3JlcG9ydGVkOiB0cnVlfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgY29uc3QgeyBhbnN3ZXJlcl9uYW1lLCBkYXRlLCBib2R5IH0gPSB0aGlzLnByb3BzLmFuc3dlcjtcblxuICAgIHJldHVybiAoXG5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtYW5zd2VyXCI+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtYW5zd2VyLXRleHRcIj5cbiAgICAgICAgICB7Ym9keX1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtYW5zd2VyLWZvb3RlclwiPlxuICAgICAgICAgIDxzcGFuPiBieSB7Zm9ybWF0QW5zd2VyZXJOYW1lKGFuc3dlcmVyX25hbWUpfSwge2Zvcm1hdERhdGUoZGF0ZSl9IDwvc3Bhbj5cbiAgICAgICAgICA8c3Bhbj4geycgfCAnfSA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+IDxIZWxwZnVsUmVwb3J0XG4gICAgICAgICAgICBoYW5kbGVIZWxwZnVsQnV0dG9uQ2xpY2s9e3RoaXMuaGFuZGxlSGVscGZ1bEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgaGFuZGxlUmVwb3J0QnV0dG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVwb3J0QnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICByZXBvcnRlZD17dGhpcy5zdGF0ZS5yZXBvcnRlZH1cbiAgICAgICAgICAgIGhlbHBmdWxuZXNzPXt0aGlzLnN0YXRlLmhlbHBmdWxuZXNzfVxuICAgICAgICAgICAgY29udGVudF9pZD17dGhpcy5wcm9wcy5hbnN3ZXJfaWR9XG4gICAgICAgICAgICBjb250ZW50X3R5cGU9eydhbnN3ZXInfVxuICAgICAgICAgIC8+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgKTtcblxuICB9XG5cbn1cblxuZXhwb3J0IGRlZmF1bHQgQW5zd2VyOyIsImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5cbmNvbnN0IGZldGNoUXVlc3Rpb25zID0gKHByb2R1Y3RfaWQsIGNvdW50LCBwYWdlKSA9PiB7XG5cbiAgcmV0dXJuICQuYWpheCh7XG4gICAgdXJsOiBgL3FhL3F1ZXN0aW9ucz9wcm9kdWN0X2lkPSR7cHJvZHVjdF9pZH0mY291bnQ9JHtjb3VudH0mcGFnZT0ke3BhZ2V9YCxcbiAgICBtZXRob2Q6ICdHRVQnXG4gIH0pO1xuXG59O1xuXG5jb25zdCBzdWJtaXRRdWVzdGlvbiA9IChxdWVzdGlvbiwgbmlja25hbWUsIGVtYWlsLCBwcm9kdWN0X2lkKSA9PiB7XG5cbiAgcmV0dXJuICQuYWpheCh7XG4gICAgdXJsOiBgL3FhL3F1ZXN0aW9uc2AsXG4gICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgY29udGVudFR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgZGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgYm9keTogcXVlc3Rpb24sXG4gICAgICBuYW1lOiBuaWNrbmFtZSxcbiAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgIHByb2R1Y3RfaWQ6IE51bWJlcihwcm9kdWN0X2lkKVxuICAgIH0pXG4gIH0pO1xuXG59O1xuY29uc3Qgc3VibWl0QW5zd2VyID0gKGFuc3dlciwgbmlja25hbWUsIGVtYWlsLCBxdWVzdGlvbl9pZCkgPT4ge1xuXG4gIHJldHVybiAkLmFqYXgoe1xuICAgIHVybDogYC9xYS9xdWVzdGlvbnMvJHtxdWVzdGlvbl9pZC50b1N0cmluZygpfS9hbnN3ZXJzYCxcbiAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICBjb250ZW50VHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcbiAgICBkYXRhOiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBib2R5OiBhbnN3ZXIsXG4gICAgICBuYW1lOiBuaWNrbmFtZSxcbiAgICAgIGVtYWlsOiBlbWFpbCxcbiAgICAgIHBob3RvczogW11cbiAgICB9KVxuICB9KTtcblxufTtcblxuY29uc3QgbWFya1F1ZXN0aW9uSGVscGZ1bCA9IChxdWVzdGlvbl9pZCkgPT4ge1xuICByZXR1cm4gJC5hamF4KHtcbiAgICB1cmw6IGAvcWEvcXVlc3Rpb25zLyR7cXVlc3Rpb25faWR9L2hlbHBmdWxgLFxuICAgIG1ldGhvZDogJ1BVVCdcbiAgfSk7XG59O1xuXG5jb25zdCByZXBvcnRRdWVzdGlvbiA9IChxdWVzdGlvbl9pZCkgPT4ge1xuICByZXR1cm4gJC5hamF4KHtcbiAgICB1cmw6IGAvcWEvcXVlc3Rpb25zLyR7cXVlc3Rpb25faWR9L3JlcG9ydGAsXG4gICAgbWV0aG9kOiAnUFVUJ1xuICB9KTtcbn07XG5cbmNvbnN0IG1hcmtBbnN3ZXJIZWxwZnVsID0gKGFuc3dlcl9pZCkgPT4ge1xuICByZXR1cm4gJC5hamF4KHtcbiAgICB1cmw6IGAvcWEvYW5zd2Vycy8ke2Fuc3dlcl9pZH0vaGVscGZ1bGAsXG4gICAgbWV0aG9kOiAnUFVUJ1xuICB9KTtcbn07XG5cbmNvbnN0IHJlcG9ydEFuc3dlciA9IChhbnN3ZXJfaWQpID0+IHtcbiAgcmV0dXJuICQuYWpheCh7XG4gICAgdXJsOiBgL3FhL2Fuc3dlcnMvJHthbnN3ZXJfaWR9L3JlcG9ydGAsXG4gICAgbWV0aG9kOiAnUFVUJ1xuICB9KTtcbn07XG5cbmV4cG9ydCB7IGZldGNoUXVlc3Rpb25zLCBzdWJtaXRRdWVzdGlvbiwgc3VibWl0QW5zd2VyLCBtYXJrUXVlc3Rpb25IZWxwZnVsLCByZXBvcnRRdWVzdGlvbiwgbWFya0Fuc3dlckhlbHBmdWwsIHJlcG9ydEFuc3dlciB9OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQW5zd2VyIGZyb20gJy4vQW5zd2VyLmpzeCc7XG5pbXBvcnQgeyBzb3J0QW5zd2Vyc0xpc3QgfSBmcm9tICcuLi9oZWxwZXJzLmpzJztcblxuY2xhc3MgQW5zd2Vyc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYW5zd2VyczogW10sXG4gICAgICByZW1haW5pbmdBbnN3ZXJzOiBbXSxcbiAgICAgIHNob3dBbnN3ZXJzTGlzdDogZmFsc2UsXG4gICAgICBzaG93TG9hZE1vcmVBbnN3ZXJzQnV0dG9uOiBmYWxzZSxcbiAgICAgIHNob3dDb2xsYXBzZUFuc3dlcnNMaXN0QnV0dG9uOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgdGhpcy5jb2xsYXBzZUFuc3dlcnNMaXN0ID0gdGhpcy5jb2xsYXBzZUFuc3dlcnNMaXN0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5sb2FkUmVtYWluaW5nQW5zd2VycyA9IHRoaXMubG9hZFJlbWFpbmluZ0Fuc3dlcnMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmluY3JlbWVudEhlbHBmdWxBbnN3ZXIgPSB0aGlzLmluY3JlbWVudEhlbHBmdWxBbnN3ZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgbGV0IHVuc29ydGVkQW5zd2Vyc0xpc3QgPSBPYmplY3QudmFsdWVzKHRoaXMucHJvcHMuYW5zd2Vycyk7XG4gICAgbGV0IHNvcnRlZEFuc3dlcnNMaXN0ID0gc29ydEFuc3dlcnNMaXN0KHVuc29ydGVkQW5zd2Vyc0xpc3QpO1xuICAgIGxldCBmaXJzdFR3b0Fuc3dlcnMgPSBzb3J0ZWRBbnN3ZXJzTGlzdC5zbGljZSgwLCAyKTtcbiAgICBsZXQgcmVtYWluaW5nQW5zd2VycyA9IHNvcnRlZEFuc3dlcnNMaXN0LnNsaWNlKDIpO1xuICAgIGlmICghIWZpcnN0VHdvQW5zd2Vycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RhdGUuYW5zd2VycyA9IGZpcnN0VHdvQW5zd2VycztcbiAgICAgIHRoaXMuc3RhdGUuc2hvd0Fuc3dlcnNMaXN0ID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCEhcmVtYWluaW5nQW5zd2Vycy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuc3RhdGUucmVtYWluaW5nQW5zd2VycyA9IHJlbWFpbmluZ0Fuc3dlcnM7XG4gICAgICB0aGlzLnN0YXRlLnNob3dMb2FkTW9yZUFuc3dlcnNCdXR0b24gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGNvbGxhcHNlQW5zd2Vyc0xpc3QoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICByZW1haW5pbmdBbnN3ZXJzOiB0aGlzLnN0YXRlLmFuc3dlcnMuc2xpY2UoMiksXG4gICAgICBhbnN3ZXJzOiB0aGlzLnN0YXRlLmFuc3dlcnMuc2xpY2UoMCwgMiksXG4gICAgICBzaG93TG9hZE1vcmVBbnN3ZXJzQnV0dG9uOiB0cnVlLFxuICAgICAgc2hvd0NvbGxhcHNlQW5zd2Vyc0xpc3RCdXR0b246IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBsb2FkUmVtYWluaW5nQW5zd2VycygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGFuc3dlcnM6IHRoaXMuc3RhdGUuYW5zd2Vycy5jb25jYXQodGhpcy5zdGF0ZS5yZW1haW5pbmdBbnN3ZXJzKSxcbiAgICAgIHJlbWFpbmluZ0Fuc3dlcnM6IFtdLFxuICAgICAgc2hvd0xvYWRNb3JlQW5zd2Vyc0J1dHRvbjogZmFsc2UsXG4gICAgICBzaG93Q29sbGFwc2VBbnN3ZXJzTGlzdEJ1dHRvbjogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgaW5jcmVtZW50SGVscGZ1bEFuc3dlcihhbnN3ZXJJZCkge1xuICAgIGlmICh0aGlzLnN0YXRlLnNob3dDb2xsYXBzZUFuc3dlcnNMaXN0QnV0dG9uKSB7XG4gICAgICB0aGlzLnN0YXRlLmFuc3dlcnMuZm9yRWFjaCgoYW5zd2VyKSA9PiB7XG4gICAgICAgIGlmIChhbnN3ZXIuaWQgPT09IGFuc3dlcklkKSB7XG4gICAgICAgICAgYW5zd2VyLmhlbHBmdWxuZXNzKys7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuc3RhdGUuc2hvd0Fuc3dlcnNMaXN0ICYmXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLWFuc3dlcnMtbGlzdC1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxYS1iaWctYVwiPjxiPkE6PC9iPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLWFuc3dlcnMtbGlzdFwiPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLmFuc3dlcnMubWFwKChhbnN3ZXIpID0+IDxBbnN3ZXJcbiAgICAgICAgICAgIGtleT17YW5zd2VyLmlkfSBhbnN3ZXI9e2Fuc3dlcn1cbiAgICAgICAgICAgIGhlbHBmdWxuZXNzPXthbnN3ZXIuaGVscGZ1bG5lc3N9XG4gICAgICAgICAgICBhbnN3ZXJfaWQ9e2Fuc3dlci5pZH1cbiAgICAgICAgICAgIGluY3JlbWVudEhlbHBmdWxBbnN3ZXI9e3RoaXMuaW5jcmVtZW50SGVscGZ1bEFuc3dlcn1cbiAgICAgICAgICAvPil9XG4gICAgICAgICAge3RoaXMuc3RhdGUuc2hvd0xvYWRNb3JlQW5zd2Vyc0J1dHRvbiAmJiA8YnV0dG9uIGNsYXNzTmFtZT1cInFhLWFuc3dlcnMtbGlzdC1idXR0b25cIiBvbkNsaWNrPXt0aGlzLmxvYWRSZW1haW5pbmdBbnN3ZXJzfT4gU2VlIG1vcmUgYW5zd2VycyA8L2J1dHRvbj59XG4gICAgICAgICAge3RoaXMuc3RhdGUuc2hvd0NvbGxhcHNlQW5zd2Vyc0xpc3RCdXR0b24gJiYgPGJ1dHRvbiBjbGFzc05hbWU9XCJxYS1hbnN3ZXJzLWxpc3QtYnV0dG9uXCIgb25DbGljaz17dGhpcy5jb2xsYXBzZUFuc3dlcnNMaXN0fT4gQ29sbGFwc2UgYW5zd2VycyA8L2J1dHRvbj59XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFuc3dlcnNMaXN0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNsYXNzIEFuc3dlckZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYW5zd2VyOiAnJyxcbiAgICAgIG5pY2tuYW1lOiAnJyxcbiAgICAgIGVtYWlsOiAnJ1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCBuYW1lID0gZS50YXJnZXQubmFtZTtcbiAgICBjb25zdCB2YWx1ZSA9IGUudGFyZ2V0LnZhbHVlO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW25hbWVdOiB2YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtbW9kYWxcIiBvbkNsaWNrPXt0aGlzLnByb3BzLmNsb3NlQW5zd2VyTW9kYWx9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLW1vZGFsLWNvbnRlbnRcIiBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtbW9kYWwtdG9wLXJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxYS1tb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInFhLW1vZGFsLXRpdGxlXCI+IFNVQk1JVCBZT1VSIEFOU1dFUiA8L2g0PlxuICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwicWEtbW9kYWwtdGl0bGVcIj4ge2Ake3RoaXMucHJvcHMubmFtZX06ICR7dGhpcy5wcm9wcy5xdWVzdGlvbn1gfSA8L2g1PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInFhLW1vZGFsLWNsb3NlXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZUFuc3dlck1vZGFsfSBzcmM9XCIvaW1hZ2VzL2Nsb3NlLnBuZ1wiIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxYS1tb2RhbC1ib2R5XCI+XG4gICAgICAgICAgICA8Zm9ybSBjbGFzc05hbWU9XCJxYS1tb2RhbC1mb3JtXCIgb25TdWJtaXQ9e3RoaXMucHJvcHMuaGFuZGxlQW5zd2VyU3VibWl0fT5cbiAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIFlvdXIgQW5zd2VyKlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBtYXhsZW5ndGg9XCIxMDAwXCIgY29scz1cIjUwXCIgcm93cz1cIjEwXCIgbmFtZT1cImFuc3dlclwiIHZhbHVlPXt0aGlzLnN0YXRlLmFuc3dlcn0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+XG4gICAgICAgICAgICAgIDwvbGFiZWw+XG4gICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICA8bGFiZWw+XG4gICAgICAgICAgICAgICAgV2hhdCBJcyBZb3VyIE5pY2tuYW1lPypcbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgIG5hbWU9XCJuaWNrbmFtZVwiIG1heGxlbmd0aD1cIjYwXCIgc2l6ZT1cIjYwXCIgdmFsdWU9e3RoaXMuc3RhdGUubmlja25hbWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gcGxhY2Vob2xkZXI9XCJFeGFtcGxlOiBqYWNrNTQzIVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8c21hbGw+IEZvciBwcml2YWN5IHJlYXNvbnMsIGRvIG5vdCB1c2UgeW91ciBmdWxsIG5hbWUgb3IgZW1haWwgYWRkcmVzcyA8L3NtYWxsPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIFlvdXIgRW1haWwqXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIiBtYXhsZW5ndGg9XCI2MFwiIHNpemU9XCI2MFwiIHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IHBsYWNlaG9sZGVyPVwiRXhhbXBsZTogamFja0BlbWFpbC5jb21cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPHNtYWxsPiBGb3IgYXV0aGVudGljYXRpb24gcmVhc29ucywgeW91IHdpbGwgbm90IGJlIGVtYWlsZWQgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJxYS1idXR0b25cIiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTdWJtaXQgQW5zd2VyXCIvPlxuICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQW5zd2VyRm9ybTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFuc3dlcnNMaXN0IGZyb20gJy4vQW5zd2Vyc0xpc3QuanN4JztcbmltcG9ydCBBbnN3ZXJGb3JtIGZyb20gJy4vQW5zd2VyRm9ybS5qc3gnO1xuaW1wb3J0IHsgc3VibWl0QW5zd2VyLCBtYXJrUXVlc3Rpb25IZWxwZnVsLCByZXBvcnRRdWVzdGlvbiB9IGZyb20gJy4uL2NvbnRyb2xsZXJzLmpzJztcbmltcG9ydCBIZWxwZnVsUmVwb3J0IGZyb20gJy4vSGVscGZ1bFJlcG9ydC5qc3gnO1xuaW1wb3J0IHsgdmFsaWRhdGVGb3JtRmllbGRzIH0gZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbmNsYXNzIFF1ZXN0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGhlbHBmdWxuZXNzOiB0aGlzLnByb3BzLmhlbHBmdWxuZXNzLFxuICAgICAgcmVwb3J0ZWQ6IGZhbHNlLFxuICAgICAgc2hvd0Fuc3dlck1vZGFsOiBmYWxzZSxcbiAgICB9O1xuICAgIHRoaXMuaGFuZGxlQWRkQW5zd2VyQ2xpY2sgPSB0aGlzLmhhbmRsZUFkZEFuc3dlckNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVBbnN3ZXJTdWJtaXQgPSB0aGlzLmhhbmRsZUFuc3dlclN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2xvc2VBbnN3ZXJNb2RhbCA9IHRoaXMuY2xvc2VBbnN3ZXJNb2RhbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlSGVscGZ1bEJ1dHRvbkNsaWNrID0gdGhpcy5oYW5kbGVIZWxwZnVsQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJlcG9ydEJ1dHRvbkNsaWNrID0gdGhpcy5oYW5kbGVSZXBvcnRCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlSGVscGZ1bEJ1dHRvbkNsaWNrKCkge1xuXG4gICAgbWFya1F1ZXN0aW9uSGVscGZ1bCh0aGlzLnByb3BzLnF1ZXN0aW9uX2lkLnRvU3RyaW5nKCkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIGxldCBoZWxwZnVsUXVlc3Rpb25zID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaGVscGZ1bFF1ZXN0aW9ucycpKTtcbiAgICAgICAgaGVscGZ1bFF1ZXN0aW9ucy5wdXNoKHRoaXMucHJvcHMucXVlc3Rpb25faWQpO1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGVscGZ1bFF1ZXN0aW9ucycsIEpTT04uc3RyaW5naWZ5KGhlbHBmdWxRdWVzdGlvbnMpKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgaGVscGZ1bG5lc3M6IHRoaXMuc3RhdGUuaGVscGZ1bG5lc3MgKyAxXG4gICAgICAgIH0pO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcbiAgICAvLyB1cGRhdGUgdGhlIGhlbHBmdWxuZXNzIGNvdW50cyBpbiB0aGUgdG9wLWxldmVsIHF1ZXN0aW9ucyBsaXN0cz8gLS0+IHNlZW1zIHRvIGJlIHdvcmtpbmcgd2l0aG91dCB0aGlzIHN0ZXAuLi5cblxuICB9XG5cbiAgaGFuZGxlUmVwb3J0QnV0dG9uQ2xpY2soKSB7XG5cbiAgICByZXBvcnRRdWVzdGlvbih0aGlzLnByb3BzLnF1ZXN0aW9uX2lkLnRvU3RyaW5nKCkpXG4gICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe3JlcG9ydGVkOiB0cnVlfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH0pO1xuXG4gIH1cblxuICBjbG9zZUFuc3dlck1vZGFsKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd0Fuc3dlck1vZGFsOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlQWRkQW5zd2VyQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93QW5zd2VyTW9kYWw6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZUFuc3dlclN1Ym1pdChlKSB7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBhbnN3ZXIgPSBlLnRhcmdldC5hbnN3ZXIudmFsdWU7XG4gICAgY29uc3Qgbmlja25hbWUgPSBlLnRhcmdldC5uaWNrbmFtZS52YWx1ZTtcbiAgICBjb25zdCBlbWFpbCA9IGUudGFyZ2V0LmVtYWlsLnZhbHVlO1xuXG4gICAgY29uc3QgaW52YWxpZCA9IHZhbGlkYXRlRm9ybUZpZWxkcyhhbnN3ZXIsIG5pY2tuYW1lLCBlbWFpbCk7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgYWxlcnQoaW52YWxpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3VibWl0QW5zd2VyKGFuc3dlciwgbmlja25hbWUsIGVtYWlsLCB0aGlzLnByb3BzLnF1ZXN0aW9uX2lkKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93QW5zd2VyTW9kYWw6IGZhbHNlXG4gICAgfSk7XG5cbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLWxpc3QtaXRlbS1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxYS1xdWVzdGlvbi1jb250YWluZXJcIj5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJxYS1xdWVzdGlvbi10ZXh0XCI+XG4gICAgICAgICAgICBROiZuYnNwOyB7dGhpcy5wcm9wcy5xdWVzdGlvbn1cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwicWEtaGVscGZ1bC1yZXBvcnQtYW5zd2VyXCI+XG4gICAgICAgICAgICA8SGVscGZ1bFJlcG9ydFxuICAgICAgICAgICAgICBoYW5kbGVIZWxwZnVsQnV0dG9uQ2xpY2s9e3RoaXMuaGFuZGxlSGVscGZ1bEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICBoYW5kbGVSZXBvcnRCdXR0b25DbGljaz17dGhpcy5oYW5kbGVSZXBvcnRCdXR0b25DbGlja31cbiAgICAgICAgICAgICAgcmVwb3J0ZWQ9e3RoaXMuc3RhdGUucmVwb3J0ZWR9XG4gICAgICAgICAgICAgIGhlbHBmdWxuZXNzPXt0aGlzLnN0YXRlLmhlbHBmdWxuZXNzfVxuICAgICAgICAgICAgICBjb250ZW50X2lkPXt0aGlzLnByb3BzLnF1ZXN0aW9uX2lkfVxuICAgICAgICAgICAgICBjb250ZW50X3R5cGU9eydxdWVzdGlvbid9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgIHsnIHwgJ31cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwicWEtYnV0dG9uLWxpbmtcIiBvbkNsaWNrPXt0aGlzLmhhbmRsZUFkZEFuc3dlckNsaWNrfT4gQWRkIEFuc3dlciA8L2J1dHRvbj5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QW5zd2Vyc0xpc3QgYW5zd2Vycz17dGhpcy5wcm9wcy5hbnN3ZXJzfS8+XG4gICAgICAgIHt0aGlzLnN0YXRlLnNob3dBbnN3ZXJNb2RhbCAmJiA8QW5zd2VyRm9ybVxuICAgICAgICAgIGNsb3NlQW5zd2VyTW9kYWw9e3RoaXMuY2xvc2VBbnN3ZXJNb2RhbH1cbiAgICAgICAgICBxdWVzdGlvbj17dGhpcy5wcm9wcy5xdWVzdGlvbn1cbiAgICAgICAgICBuYW1lPXt0aGlzLnByb3BzLm5hbWV9XG4gICAgICAgICAgaGFuZGxlQW5zd2VyU3VibWl0PXt0aGlzLmhhbmRsZUFuc3dlclN1Ym1pdH1cbiAgICAgICAgLz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBRdWVzdGlvbjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFF1ZXN0aW9uIGZyb20gJy4vUXVlc3Rpb24uanN4JztcblxuY29uc3QgUXVlc3Rpb25zTGlzdCA9IChwcm9wcykgPT4gKFxuICA8ZGl2IGNsYXNzTmFtZT1cInFhLXF1ZXN0aW9ucy1saXN0LWNvbnRhaW5lci13cmFwcGVyXCI+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJxYS1xdWVzdGlvbnMtbGlzdC1jb250YWluZXJcIj5cbiAgICAgIHtwcm9wcy5xdWVzdGlvbnMubWFwKChxdWVzdGlvbikgPT4gPFF1ZXN0aW9uXG4gICAgICAgIGtleT17cXVlc3Rpb24ucXVlc3Rpb25faWR9XG4gICAgICAgIHF1ZXN0aW9uPXtxdWVzdGlvbi5xdWVzdGlvbl9ib2R5fVxuICAgICAgICBoZWxwZnVsbmVzcz17cXVlc3Rpb24ucXVlc3Rpb25faGVscGZ1bG5lc3N9XG4gICAgICAgIGFuc3dlcnM9e3F1ZXN0aW9uLmFuc3dlcnN9XG4gICAgICAgIHF1ZXN0aW9uX2lkPXtxdWVzdGlvbi5xdWVzdGlvbl9pZH1cbiAgICAgICAgbmFtZT17cHJvcHMubmFtZX1cbiAgICAgICAgaGFuZGxlQWRkQW5zd2VyQ2xpY2s9e3Byb3BzLmhhbmRsZUFkZEFuc3dlckNsaWNrfVxuICAgICAgLz4pfVxuICAgIDwvZGl2PlxuICA8L2Rpdj5cblxuKTtcblxuZXhwb3J0IGRlZmF1bHQgUXVlc3Rpb25zTGlzdDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jbGFzcyBRdWVzdGlvbkZvcm0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcXVlc3Rpb246ICcnLFxuICAgICAgbmlja25hbWU6ICcnLFxuICAgICAgZW1haWw6ICcnXG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gdGhpcy5oYW5kbGVDaGFuZ2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGhhbmRsZUNoYW5nZShlKSB7XG4gICAgY29uc3QgbmFtZSA9IGUudGFyZ2V0Lm5hbWU7XG4gICAgY29uc3QgdmFsdWUgPSBlLnRhcmdldC52YWx1ZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIFtuYW1lXTogdmFsdWVcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLW1vZGFsXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZVF1ZXN0aW9uTW9kYWx9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLW1vZGFsLWNvbnRlbnRcIiBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicWEtbW9kYWwtdG9wLXJvd1wiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJxYS1tb2RhbC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGg0IGNsYXNzTmFtZT1cInFhLW1vZGFsLXRpdGxlXCI+IEFTSyBZT1VSIFFVRVNUSU9OIDwvaDQ+XG4gICAgICAgICAgICAgIDxoNSBjbGFzc05hbWU9XCJxYS1tb2RhbC10aXRsZVwiPiB7YEFib3V0IHRoZSAke3RoaXMucHJvcHMubmFtZX1gfSA8L2g1PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8aW1nIGNsYXNzTmFtZT1cInFhLW1vZGFsLWNsb3NlXCIgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZVF1ZXN0aW9uTW9kYWx9IHNyYz1cIi9pbWFnZXMvY2xvc2UucG5nXCIgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInFhLW1vZGFsLWJvZHlcIj5cbiAgICAgICAgICAgIDxmb3JtIGNsYXNzTmFtZT1cInFhLW1vZGFsLWZvcm1cIiBvblN1Ym1pdD17dGhpcy5wcm9wcy5oYW5kbGVRdWVzdGlvblN1Ym1pdH0+XG4gICAgICAgICAgICAgIDxsYWJlbD5cbiAgICAgICAgICAgICAgICBZb3VyIFF1ZXN0aW9uKlxuICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBtYXhsZW5ndGg9XCIxMDAwXCIgY29scz1cIjUwXCIgcm93cz1cIjEwXCIgbmFtZT1cInF1ZXN0aW9uXCIgdmFsdWU9e3RoaXMuc3RhdGUucXVlc3Rpb259IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0vPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIFdoYXQgSXMgWW91ciBOaWNrbmFtZT8qXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XCI2MFwiIHNpemU9XCI2MFwiIG5hbWU9XCJuaWNrbmFtZVwiIHZhbHVlPXt0aGlzLnN0YXRlLm5pY2tuYW1lfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IHBsYWNlaG9sZGVyPVwiRXhhbXBsZTogamFja3NvbjExIVwiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICA8c21hbGw+IEZvciBwcml2YWN5IHJlYXNvbnMsIGRvIG5vdCB1c2UgeW91ciBmdWxsIG5hbWUgb3IgZW1haWwgYWRkcmVzcyA8L3NtYWxsPlxuICAgICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgICAgIFlvdXIgRW1haWwqXG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICBtYXhsZW5ndGg9XCI2MFwiIHNpemU9XCI2MFwiIG5hbWU9XCJlbWFpbFwiIHZhbHVlPXt0aGlzLnN0YXRlLmVtYWlsfSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9IHBsYWNlaG9sZGVyPVwiRXhhbXBsZTogamFja0BlbWFpbC5jb21cIlxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgICAgPHNtYWxsPiBGb3IgYXV0aGVudGljYXRpb24gcmVhc29ucywgeW91IHdpbGwgbm90IGJlIGVtYWlsZWQgPC9zbWFsbD5cbiAgICAgICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgICAgICAgPGJyIC8+XG4gICAgICAgICAgICAgIDxpbnB1dCBjbGFzc05hbWU9XCJxYS1idXR0b25cIiB0eXBlPVwic3VibWl0XCIgdmFsdWU9XCJTVUJNSVQgUVVFU1RJT05cIi8+XG4gICAgICAgICAgICA8L2Zvcm0+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcblxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFF1ZXN0aW9uRm9ybTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgZmV0Y2hRdWVzdGlvbnMsIHN1Ym1pdFF1ZXN0aW9uIH0gZnJvbSAnLi9jb250cm9sbGVycy5qcyc7XG5pbXBvcnQgU2VhcmNoIGZyb20gJy4vY29tcG9uZW50cy9TZWFyY2guanN4JztcbmltcG9ydCBRdWVzdGlvbnNMaXN0IGZyb20gJy4vY29tcG9uZW50cy9RdWVzdGlvbnNMaXN0LmpzeCc7XG5pbXBvcnQgUXVlc3Rpb25Gb3JtIGZyb20gJy4vY29tcG9uZW50cy9RdWVzdGlvbkZvcm0uanN4JztcbmltcG9ydCB7IHZhbGlkYXRlRm9ybUZpZWxkcyB9IGZyb20gJy4vaGVscGVycy5qcyc7XG5cbmNsYXNzIFF1ZXN0aW9uc0Fuc3dlcnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93TW9yZUFuc3dlcmVkUXVlc3Rpb25zQnV0dG9uOiBmYWxzZSxcbiAgICAgIHJlbmRlcmVkUXVlc3Rpb25zOiBbXSxcbiAgICAgIHJlbWFpbmluZ1F1ZXN0aW9uczogW10sXG4gICAgICBzZWFyY2hSZXN1bHRzOiBudWxsLFxuICAgICAgc2hvd1NlYXJjaDogZmFsc2UsXG4gICAgICBxdWVyeTogJycsXG4gICAgICBzaG93UXVlc3Rpb25Nb2RhbDogZmFsc2VcblxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZU1vcmVRdWVzdGlvbnNDbGljayA9IHRoaXMuaGFuZGxlTW9yZVF1ZXN0aW9uc0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTZWFyY2ggPSB0aGlzLmhhbmRsZVNlYXJjaC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlQWRkUXVlc3Rpb25DbGljayA9IHRoaXMuaGFuZGxlQWRkUXVlc3Rpb25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlUXVlc3Rpb25TdWJtaXQgPSB0aGlzLmhhbmRsZVF1ZXN0aW9uU3VibWl0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZVF1ZXN0aW9uTW9kYWwgPSB0aGlzLmNsb3NlUXVlc3Rpb25Nb2RhbC5iaW5kKHRoaXMpO1xuXG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBpbml0aWFsaXplIGxvY2FsU3RvcmFnZVxuICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hlbHBmdWxRdWVzdGlvbnMnKSkge1xuICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2hlbHBmdWxRdWVzdGlvbnMnLCBKU09OLnN0cmluZ2lmeShbXSkpO1xuICAgIH1cblxuICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hlbHBmdWxBbnN3ZXJzJykpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoZWxwZnVsQW5zd2VycycsIEpTT04uc3RyaW5naWZ5KFtdKSk7XG4gICAgfVxuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmIChwcmV2UHJvcHMucHJvZHVjdF9pZCAhPT0gdGhpcy5wcm9wcy5wcm9kdWN0X2lkKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuXG4gICAgZmV0Y2hRdWVzdGlvbnModGhpcy5wcm9wcy5wcm9kdWN0X2lkLCAxMDAsIDEpXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBsZXQgcXVlc3Rpb25zID0gZGF0YS5yZXN1bHRzO1xuICAgICAgICBpZiAoIXF1ZXN0aW9ucy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdHM6IG51bGwsXG4gICAgICAgICAgICBxdWVyeTogJycsXG4gICAgICAgICAgICByZW5kZXJlZFF1ZXN0aW9uczogW10sXG4gICAgICAgICAgICBzaG93TW9yZUFuc3dlcmVkUXVlc3Rpb25zQnV0dG9uOiBmYWxzZSxcbiAgICAgICAgICAgIHNob3dTZWFyY2g6IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAocXVlc3Rpb25zLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdHM6IG51bGwsXG4gICAgICAgICAgICBxdWVyeTogJycsXG4gICAgICAgICAgICByZW5kZXJlZFF1ZXN0aW9uczogcXVlc3Rpb25zLFxuICAgICAgICAgICAgc2hvd1NlYXJjaDogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dNb3JlQW5zd2VyZWRRdWVzdGlvbnNCdXR0b246IGZhbHNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBzZWFyY2hSZXN1bHRzOiBudWxsLFxuICAgICAgICAgICAgcXVlcnk6ICcnLFxuICAgICAgICAgICAgcmVuZGVyZWRRdWVzdGlvbnM6IHF1ZXN0aW9ucy5zbGljZSgwLCAyKSxcbiAgICAgICAgICAgIHJlbWFpbmluZ1F1ZXN0aW9uczogcXVlc3Rpb25zLnNsaWNlKDIpLFxuICAgICAgICAgICAgc2hvd01vcmVBbnN3ZXJlZFF1ZXN0aW9uc0J1dHRvbjogdHJ1ZSxcbiAgICAgICAgICAgIHNob3dTZWFyY2g6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICB9KTtcblxuICB9XG5cbiAgY2xvc2VRdWVzdGlvbk1vZGFsKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd1F1ZXN0aW9uTW9kYWw6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVNb3JlUXVlc3Rpb25zQ2xpY2soKSB7XG5cbiAgICBsZXQgbmV4dFR3b1F1ZXN0aW9uc1RvUmVuZGVyID0gdGhpcy5zdGF0ZS5yZW1haW5pbmdRdWVzdGlvbnMuc2xpY2UoMCwgMik7XG4gICAgbGV0IHJlbWFpbmluZ1F1ZXN0aW9ucyA9IHRoaXMuc3RhdGUucmVtYWluaW5nUXVlc3Rpb25zLnNsaWNlKDIpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgcmVuZGVyZWRRdWVzdGlvbnM6IFsuLi50aGlzLnN0YXRlLnJlbmRlcmVkUXVlc3Rpb25zLCAuLi5uZXh0VHdvUXVlc3Rpb25zVG9SZW5kZXJdLFxuICAgICAgcmVtYWluaW5nUXVlc3Rpb25zOiByZW1haW5pbmdRdWVzdGlvbnMsXG4gICAgICBzaG93TW9yZUFuc3dlcmVkUXVlc3Rpb25zQnV0dG9uOiByZW1haW5pbmdRdWVzdGlvbnMubGVuZ3RoID8gdHJ1ZSA6IGZhbHNlXG4gICAgfSk7XG5cbiAgfVxuXG4gIGhhbmRsZVNlYXJjaChlKSB7XG5cbiAgICBsZXQgcXVlcnkgPSBlLnRhcmdldC52YWx1ZTtcbiAgICBpZiAocXVlcnkubGVuZ3RoIDwgMykge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogbnVsbCxcbiAgICAgICAgc2hvd01vcmVBbnN3ZXJlZFF1ZXN0aW9uc0J1dHRvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBzZWFyY2hSZXN1bHRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeSh0aGlzLnN0YXRlLnJlbmRlcmVkUXVlc3Rpb25zKSk7XG4gICAgICBzZWFyY2hSZXN1bHRzID0gc2VhcmNoUmVzdWx0cy5maWx0ZXIoKHF1ZXN0aW9uKSA9PiBxdWVzdGlvbi5xdWVzdGlvbl9ib2R5LmluY2x1ZGVzKHF1ZXJ5KSk7XG5cbiAgICAgIHNlYXJjaFJlc3VsdHMuZm9yRWFjaCgocXVlc3Rpb24pID0+IHtcbiAgICAgICAgcXVlc3Rpb24ucXVlc3Rpb25fYm9keSA9IChcbiAgICAgICAgICA8c3BhbiBkYW5nZXJvdXNseVNldElubmVySFRNTD17e19faHRtbDogcXVlc3Rpb24ucXVlc3Rpb25fYm9keS5zcGxpdChxdWVyeSkuam9pbihgPG1hcms+JHtxdWVyeX08L21hcms+YCl9fT48L3NwYW4+XG4gICAgICAgICk7XG4gICAgICB9KTtcblxuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICAgICAgc2VhcmNoUmVzdWx0czogc2VhcmNoUmVzdWx0cyxcbiAgICAgICAgc2hvd01vcmVBbnN3ZXJlZFF1ZXN0aW9uc0J1dHRvbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICB9XG5cbiAgaGFuZGxlQWRkUXVlc3Rpb25DbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dRdWVzdGlvbk1vZGFsOiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVRdWVzdGlvblN1Ym1pdChlKSB7XG5cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCBxdWVzdGlvbiA9IGUudGFyZ2V0LnF1ZXN0aW9uLnZhbHVlO1xuICAgIGNvbnN0IG5pY2tuYW1lID0gZS50YXJnZXQubmlja25hbWUudmFsdWU7XG4gICAgY29uc3QgZW1haWwgPSBlLnRhcmdldC5lbWFpbC52YWx1ZTtcblxuICAgIGNvbnN0IGludmFsaWQgPSB2YWxpZGF0ZUZvcm1GaWVsZHMocXVlc3Rpb24sIG5pY2tuYW1lLCBlbWFpbCk7XG5cbiAgICBpZiAoaW52YWxpZCkge1xuICAgICAgYWxlcnQoaW52YWxpZCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3VibWl0UXVlc3Rpb24ocXVlc3Rpb24sIG5pY2tuYW1lLCBlbWFpbCwgdGhpcy5wcm9wcy5wcm9kdWN0X2lkKVxuICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3dRdWVzdGlvbk1vZGFsOiBmYWxzZVxuICAgIH0pO1xuXG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBpZD1cInFhLWNvbXBvbmVudFwiPlxuICAgICAgICA8aDUgY2xhc3NOYW1lPVwicWEtaGVhZGluZ1wiPiB7YFFVRVNUSU9OUyAmIEFOU1dFUlNgfSA8L2g1PlxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93U2VhcmNoICYmIDxTZWFyY2ggcXVlcnk9e3RoaXMuc3RhdGUucXVlcnl9IGhhbmRsZVNlYXJjaD17dGhpcy5oYW5kbGVTZWFyY2h9Lz59XG4gICAgICAgIDxRdWVzdGlvbnNMaXN0IHF1ZXN0aW9ucz17dGhpcy5zdGF0ZS5zZWFyY2hSZXN1bHRzIHx8IHRoaXMuc3RhdGUucmVuZGVyZWRRdWVzdGlvbnN9IG5hbWU9e3RoaXMucHJvcHMubmFtZX0vPlxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93TW9yZUFuc3dlcmVkUXVlc3Rpb25zQnV0dG9uICYmIDxidXR0b24gY2xhc3NOYW1lPVwicWEtYnV0dG9uXCIgb25DbGljaz17dGhpcy5oYW5kbGVNb3JlUXVlc3Rpb25zQ2xpY2t9Pk1PUkUgQU5TV0VSRUQgUVVFU1RJT05TPC9idXR0b24+fVxuICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cInFhLWJ1dHRvblwiIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQWRkUXVlc3Rpb25DbGlja30+QUREIEEgUVVFU1RJT04gKzwvYnV0dG9uPlxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93UXVlc3Rpb25Nb2RhbCAmJiA8UXVlc3Rpb25Gb3JtIG5hbWU9e3RoaXMucHJvcHMubmFtZX0gaGFuZGxlUXVlc3Rpb25TdWJtaXQ9e3RoaXMuaGFuZGxlUXVlc3Rpb25TdWJtaXR9IGNsb3NlUXVlc3Rpb25Nb2RhbD17dGhpcy5jbG9zZVF1ZXN0aW9uTW9kYWx9Lz59XG4gICAgICA8L2Rpdj5cbiAgICApO1xuXG4gIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBRdWVzdGlvbnNBbnN3ZXJzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IFJhdGluZ0JyZWFrZG93bkJhciA9IChwcm9wcykgPT4ge1xuICBjb25zdCBoYW5kbGVDbGljayA9ICgpID0+IHtcbiAgICBwcm9wcy5oYW5kbGVSYXRpbmdCcmVha2Rvd25DbGljayhwcm9wcy5zdGFyKTtcbiAgfTtcbiAgcmV0dXJuIChcbiAgICA8ZGl2IG9uQ2xpY2s9e2hhbmRsZUNsaWNrfSBjbGFzcz0ncmV2aWV3LWJyZWFrZG93bi1iYXIgcmV2aWV3LWNsaWNrYWJsZSc+XG4gICAgICA8c3BhbiBjbGFzcz0ncmV2aWV3LWNsaWNrYWJsZSc+e3Byb3BzLnN0YXJ9IHN0YXJzOjwvc3Bhbj5cbiAgICAgIDxzcGFuPjxwcm9ncmVzcyBtYXg9XCIxMDBcIiB2YWx1ZT17cHJvcHMucGVyY2VudGFnZX0+PC9wcm9ncmVzcz48L3NwYW4+XG4gICAgICA8c3BhbiBjbGFzcz0ncmV2aWV3LWJyZWFrZG93bi1mcmVxJz57cHJvcHMuZnJlcX08L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSYXRpbmdCcmVha2Rvd25CYXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUmF0aW5nQnJlYWtkb3duQmFyIGZyb20gJy4vUmF0aW5nQnJlYWtkb3duQmFyLmpzeCc7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuLi9oZWxwZXJzLmpzJztcblxuY2xhc3MgUmF0aW5nQnJlYWtkb3duIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1ldGE6IHt9LFxuICAgICAgcmF0aW5nczoge30sXG4gICAgICBhdmVyYWdlUmF0aW5nOiBbMCwgMF0sXG4gICAgICBicmVha2Rvd246IFtbMCwgMF0sIFswLCAwXSwgWzAsIDBdLCBbMCwgMF0sIFswLCAwXV0sXG4gICAgICByZWNvbW1lbmRlZDogMFxuICAgIH07XG4gICAgdGhpcy5pbml0aWFsaXplID0gdGhpcy5pbml0aWFsaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVSYXRpbmdCcmVha2Rvd25DbGljayA9IHRoaXMuaGFuZGxlUmF0aW5nQnJlYWtkb3duQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLm1ldGEgIT09IHByZXZQcm9wcy5tZXRhKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWV0YTogdGhpcy5wcm9wcy5tZXRhLFxuICAgICAgcmF0aW5nczogdGhpcy5wcm9wcy5tZXRhLnJhdGluZ3MsXG4gICAgICBhdmVyYWdlUmF0aW5nOiBoZWxwZXJzLmNvbXB1dGVBdmVyYWdlUmF0aW5nKHRoaXMucHJvcHMubWV0YS5yYXRpbmdzKSxcbiAgICAgIGJyZWFrZG93bjogaGVscGVycy5jb21wdXRlUmF0aW5nQnJlYWtkb3duKHRoaXMucHJvcHMubWV0YS5yYXRpbmdzKSxcbiAgICAgIHJlY29tbWVuZGVkOiBoZWxwZXJzLmNvbXB1dGVSZWNvbW1lbmRlZFBlcmNlbnRhZ2UodGhpcy5wcm9wcy5tZXRhLnJlY29tbWVuZGVkKVxuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlUmF0aW5nQnJlYWtkb3duQ2xpY2soc3Rhcikge1xuICAgIHRoaXMucHJvcHMuaGFuZGxlU3RhckZpbHRlcnMoc3Rhcik7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5zdGF0ZS5yYXRpbmdzKSkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LXJhdGluZy1icmVha2Rvd24nPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1hdmVyYWdlLXJhdGluZyc+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz0ncmV2aWV3LWF2ZXJhZ2UtcmF0aW5nLW51bWJlcic+e3RoaXMuc3RhdGUuYXZlcmFnZVJhdGluZ1swXX08L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXJzXCIgc3R5bGU9e3snLS1yYXRpbmcnOiB0aGlzLnN0YXRlLmF2ZXJhZ2VSYXRpbmdbMV19fT48L3NwYW4+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LXJlY29tbWVuZGVkLXBlcmNlbnRhZ2UnPlxuICAgICAgICAgICAgPHNwYW4+e3RoaXMuc3RhdGUucmVjb21tZW5kZWR9IG9mIHJldmlld3MgcmVjb21tZW5kZWQgdGhpcyBwcm9kdWN0PC9zcGFuPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1maWx0ZXItcGFuZWwnPlxuICAgICAgICAgICAgPGRpdiBpZD0ncmV2aWV3LWZpbHRlci1wYW5lbC10aXRsZSc+UmF0aW5nIEJyZWFrZG93bjwvZGl2PlxuICAgICAgICAgICAgPGRpdj5DdXJyZW50bHkgYXBwbGllZCBmaWx0ZXJzOiB7dGhpcy5wcm9wcy5zdGFyRmlsdGVycy5tYXAoc3RhckZpbHRlciA9PiBzdGFyRmlsdGVyICsgJyAnKX08L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1jbGlja2FibGUnIG9uQ2xpY2s9e3RoaXMucHJvcHMucmVtb3ZlRmlsdGVyc30+UmVtb3ZlIGFsbCBmaWx0ZXJzPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LXJhdGluZy1iYXInPlxuICAgICAgICAgICAge1suLi5BcnJheSg1KS5rZXlzKCldLnJldmVyc2UoKS5tYXAoeCA9PiA8UmF0aW5nQnJlYWtkb3duQmFyIHN0YXI9e3ggKyAxfSBwZXJjZW50YWdlPXt0aGlzLnN0YXRlLmJyZWFrZG93blt4XVswXX0gZnJlcT17dGhpcy5zdGF0ZS5icmVha2Rvd25beF1bMV19IGhhbmRsZVJhdGluZ0JyZWFrZG93bkNsaWNrPXt0aGlzLmhhbmRsZVJhdGluZ0JyZWFrZG93bkNsaWNrfS8+KX1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctcmF0aW5nLWJyZWFrZG93bic+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LWF2ZXJhZ2UtcmF0aW5nJz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdyZXZpZXctYXZlcmFnZS1yYXRpbmctbnVtYmVyJz4wPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzdGFyc1wiIHN0eWxlPXt7Jy0tcmF0aW5nJzogMH19Pjwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctcmF0aW5nLWJhcic+XG4gICAgICAgICAgICB7Wy4uLkFycmF5KDUpLmtleXMoKV0ucmV2ZXJzZSgpLm1hcCh4ID0+IDxSYXRpbmdCcmVha2Rvd25CYXIgc3Rhcj17eCArIDF9IHBlcmNlbnRhZ2U9ezB9Lz4pfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJhdGluZ0JyZWFrZG93bjsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhlbHBlcnMgZnJvbSAnLi4vaGVscGVycy5qcyc7XG5cbmNvbnN0IENoYXJhY3RlcmlzdGljQnJlYWtkb3duID0gKHByb3BzKSA9PiB7XG4gIGlmIChwcm9wcy5jaGFyYWN0ZXJpc3RpYy52YWx1ZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8bGFiZWwgY2xhc3M9J3Jldmlldy1wcm9kdWN0LWNoYXJhY3RlcmlzdGljLW5hbWUnPntwcm9wcy5jaGFyYWN0ZXJpc3RpYy5uYW1lfTwvbGFiZWw+PGJyPjwvYnI+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1wcm9kdWN0LWJyZWFrZG93bi1jb250YWluZXInPlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aW5wdXQgY2xhc3M9J3Jldmlldy1wcm9kdWN0LWJyZWFrZG93bi1iYXInIHR5cGU9J3JhbmdlJyBtaW49JzEnIG1heD0nNScgdmFsdWU9e3Byb3BzLmNoYXJhY3RlcmlzdGljLnZhbHVlfT48L2lucHV0PlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1wcm9kdWN0LWJyZWFrZG93bi1kZXNjcmlwdGlvbi1jb250YWluZXInPlxuICAgICAgICAgICAge1sxLCAzLCA1XS5tYXAoa2V5ID0+XG4gICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdyZXZpZXctcHJvZHVjdC1icmVha2Rvd24tZGVzY3JpcHRpb24nPntoZWxwZXJzLnByb2R1Y3RDaGFyYWN0ZXJpc3RpY3NbcHJvcHMuY2hhcmFjdGVyaXN0aWMubmFtZV1ba2V5XX08L3NwYW4+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+PC9kaXY+XG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hhcmFjdGVyaXN0aWNCcmVha2Rvd247IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgQ2hhcmFjdGVyaXN0aWNCcmVha2Rvd24gZnJvbSAnLi9DaHJhY3RlcmlzdGljQnJlYWtkb3duLmpzeCc7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuLi9oZWxwZXJzLmpzJztcblxuY2xhc3MgUHJvZHVjdEJyZWFrZG93biBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtZXRhOiB7fSxcbiAgICAgIGNoYXJhY3RlcmlzdGljczoge31cbiAgICB9O1xuICAgIHRoaXMuaW5pdGlhbGl6ZSA9IHRoaXMuaW5pdGlhbGl6ZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMubWV0YSAhPT0gcHJldlByb3BzLm1ldGEpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBtZXRhOiB0aGlzLnByb3BzLm1ldGEsXG4gICAgICBjaGFyYWN0ZXJpc3RpY3M6IGhlbHBlcnMuZm9ybWF0Q2hhcmFjdGVyaXN0aWNzKHRoaXMucHJvcHMubWV0YS5jaGFyYWN0ZXJpc3RpY3MpXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgaWYgKCEkLmlzRW1wdHlPYmplY3QodGhpcy5zdGF0ZS5jaGFyYWN0ZXJpc3RpY3MpKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctcHJvZHVjdC1icmVha2Rvd24nPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLmNoYXJhY3RlcmlzdGljcy5tYXAoY2hhcmFjdGVyaXN0aWMgPT4gPENoYXJhY3RlcmlzdGljQnJlYWtkb3duIGNoYXJhY3RlcmlzdGljPXtjaGFyYWN0ZXJpc3RpY30vPil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj48L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb2R1Y3RCcmVha2Rvd247IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgU29ydGluZ09wdGlvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgc29ydGluZ1ZhbHVlOiAncmVsZXZhbmNlJ1xuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICB0aGlzLnByb3BzLmhhbmRsZU9wdGlvbkNoYW5nZXMoZS50YXJnZXQudmFsdWUpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc29ydGluZ1ZhbHVlOiBlLnRhcmdldC52YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctc29ydGluZy1vcHRpb25zJz5cbiAgICAgICAgPGxhYmVsIGZvcj1cIm9wdGlvbnNcIj57dGhpcy5wcm9wcy5yZXZpZXdzLmxlbmd0aH0gcmV2aWV3cywgc29ydGVkIGJ5IDwvbGFiZWw+XG4gICAgICAgIDxzZWxlY3QgdmFsdWU9e3RoaXMuc3RhdGUudmFsdWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0gbmFtZT0nb3B0aW9ucycgaWQ9J3NvcnRpbmctb3B0aW9ucycgY2xhc3M9J3Jldmlldy1jbGlja2FibGUnPlxuICAgICAgICAgIDxvcHRpb24gc2VsZWN0ZWQ9J3NlbGVjdGVkJyB2YWx1ZT1cInJlbGV2YW5jZVwiPlJlbGV2YW50PC9vcHRpb24+XG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhlbHBmdWxuZXNzXCI+SGVscGZ1bDwvb3B0aW9uPlxuICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJkYXRlXCI+TmV3ZXN0PC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTb3J0aW5nT3B0aW9uczsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcblxuY2xhc3MgTW9kYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuc2hvdykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctcGhvdG8tbW9kYWwnIG9uQ2xpY2s9e3RoaXMucHJvcHMuY2xvc2VNb2RhbH0+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1waG90by1tb2RhbC1jb250ZW50JyBvbkNsaWNrPXtlID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9PlxuICAgICAgICAgIDxpbWcgY2xhc3M9J3Jldmlldy1waG90by1tb2RhbC1jb250ZW50JyBzcmM9e3RoaXMucHJvcHMudXJsfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IE1vZGFsIGZyb20gJy4vUmV2aWV3UGhvdG9Nb2RhbC5qc3gnO1xuXG5jbGFzcyBSZXZpZXdQaG90byBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93OiB0aGlzLnByb3BzLnNob3dQaG90b3NcbiAgICB9O1xuICAgIHRoaXMuc2hvd01vZGFsID0gdGhpcy5zaG93TW9kYWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmNsb3NlTW9kYWwgPSB0aGlzLmNsb3NlTW9kYWwuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHNob3dNb2RhbCgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHNob3c6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIGNsb3NlTW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDxpbWcgb25DbGljaz17dGhpcy5zaG93TW9kYWx9IGNsYXNzPSdyZXZpZXctcGhvdG8nIHNyYz17dGhpcy5wcm9wcy5waG90by51cmx9Lz5cbiAgICAgICAgPE1vZGFsIHNob3c9e3RoaXMuc3RhdGUuc2hvd30gY2xvc2VNb2RhbD17dGhpcy5jbG9zZU1vZGFsfSB1cmw9e3RoaXMucHJvcHMucGhvdG8udXJsfS8+XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmV2aWV3UGhvdG87IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0ICQgZnJvbSAnanF1ZXJ5JztcbmltcG9ydCBoZWxwZXJzIGZyb20gJy4uL2hlbHBlcnMuanMnO1xuaW1wb3J0IFJldmlld1Bob3RvIGZyb20gJy4vUmV2aWV3UGhvdG8uanN4JztcblxuY2xhc3MgUmV2aWV3VGlsZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzdW1tYXJ5OiAnJyxcbiAgICAgIGJvZHk6ICcnLFxuICAgICAgYWRkaXRpb25hbEJvZHk6ICcnLFxuICAgICAgc2hvd0JvZHk6IGZhbHNlLFxuICAgICAgc2hvd0FkZGl0aW9uYWxCb2R5OiBmYWxzZSxcbiAgICAgIHNob3dBZGRpdGlvbmFsQm9keUJ1dHRvbjogZmFsc2UsXG4gICAgICBzaG93UGhvdG9zOiBmYWxzZSxcbiAgICAgIHNob3dSZWNvbW1lbmQ6IGZhbHNlLFxuICAgICAgc2hvd1Jlc3BvbnNlOiBmYWxzZSxcbiAgICAgIHJlcG9ydFN0YXR1czogZmFsc2UsXG4gICAgICBoZWxwZnVsbmVzczogMCxcbiAgICAgIHNob3dBZGRIZWxwZnVsQnV0dG9uOiB0cnVlLFxuICAgICAgcmVwb3J0U3RhdHVzOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy50b2dnbGVBZGRpdGlvbmFsQm9keSA9IHRoaXMudG9nZ2xlQWRkaXRpb25hbEJvZHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZUFkZEhlbHBmdWwgPSB0aGlzLmhhbmRsZUFkZEhlbHBmdWwuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZVJlcG9ydCA9IHRoaXMuaGFuZGxlUmVwb3J0LmJpbmQodGhpcyk7XG4gIH1cblxuICB0b2dnbGVBZGRpdGlvbmFsQm9keShlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93QWRkaXRpb25hbEJvZHk6ICF0aGlzLnN0YXRlLnNob3dBZGRpdGlvbmFsQm9keSxcbiAgICAgIHNob3dCb2R5OiAhdGhpcy5zdGF0ZS5zaG93Qm9keSxcbiAgICB9KTtcbiAgICBpZiAoJChlLnRhcmdldCkudGV4dCgpID09PSAnU2hvdyBNb3JlJykge1xuICAgICAgJChlLnRhcmdldCkudGV4dCgnU2hvdyBMZXNzJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICQoZS50YXJnZXQpLnRleHQoJ1Nob3cgTW9yZScpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUFkZEhlbHBmdWwoKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogYHJldmlld3MvJHt0aGlzLnByb3BzLnJldmlldy5yZXZpZXdfaWR9L2hlbHBmdWxgLFxuICAgICAgbWV0aG9kOiAnUFVUJ1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRIZWxwZnVsUmV2aWV3cyA9IEpTT04ucGFyc2Uoc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgnaGVscGZ1bFJldmlld3MnKSk7XG4gICAgICBjdXJyZW50SGVscGZ1bFJldmlld3MucHVzaCh0aGlzLnByb3BzLnJldmlldy5yZXZpZXdfaWQpO1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgnaGVscGZ1bFJldmlld3MnLCBKU09OLnN0cmluZ2lmeShjdXJyZW50SGVscGZ1bFJldmlld3MpKTtcblxuICAgICAgbGV0IGFsbEhlbHBmdWxSZXZpZXdzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnaGVscGZ1bFJldmlld3MnKSk7XG4gICAgICBhbGxIZWxwZnVsUmV2aWV3cy5wdXNoKHRoaXMucHJvcHMucmV2aWV3LnJldmlld19pZCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnaGVscGZ1bFJldmlld3MnLCBKU09OLnN0cmluZ2lmeShhbGxIZWxwZnVsUmV2aWV3cykpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgaGVscGZ1bG5lc3M6IHRoaXMuc3RhdGUuaGVscGZ1bG5lc3MgKyAxLFxuICAgICAgICBzaG93QWRkSGVscGZ1bEJ1dHRvbjogZmFsc2VcbiAgICAgIH0pO1xuICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgaGFuZGxlUmVwb3J0KCkge1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6IGByZXZpZXdzLyR7dGhpcy5wcm9wcy5yZXZpZXcucmV2aWV3X2lkfS9yZXBvcnRgLFxuICAgICAgbWV0aG9kOiAnUFVUJ1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgbGV0IGN1cnJlbnRSZXBvcnRlZFJldmlld3MgPSBKU09OLnBhcnNlKHNlc3Npb25TdG9yYWdlLmdldEl0ZW0oJ3JlcG9ydGVkUmV2aWV3cycpKTtcbiAgICAgIGN1cnJlbnRSZXBvcnRlZFJldmlld3MucHVzaCh0aGlzLnByb3BzLnJldmlldy5yZXZpZXdfaWQpO1xuICAgICAgc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgncmVwb3J0ZWRSZXZpZXdzJywgSlNPTi5zdHJpbmdpZnkoY3VycmVudFJlcG9ydGVkUmV2aWV3cykpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgcmVwb3J0U3RhdHVzOiB0cnVlXG4gICAgICB9KTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHZhciBmb3JtYXR0ZWRSZXZpZXdUaWxlSW5mbyA9IGhlbHBlcnMuZm9ybWF0UmV2aWV3VGlsZSh0aGlzLnByb3BzLnJldmlldy5zdW1tYXJ5LCB0aGlzLnByb3BzLnJldmlldy5ib2R5LCB0aGlzLnByb3BzLnJldmlldy5waG90b3MsIHRoaXMucHJvcHMucmV2aWV3LnJldmlld19pZCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzdW1tYXJ5OiBmb3JtYXR0ZWRSZXZpZXdUaWxlSW5mb1swXSxcbiAgICAgIGJvZHk6IGZvcm1hdHRlZFJldmlld1RpbGVJbmZvWzFdLFxuICAgICAgYWRkaXRpb25hbEJvZHk6IGZvcm1hdHRlZFJldmlld1RpbGVJbmZvWzJdLFxuICAgICAgc2hvd0JvZHk6IHRydWUsXG4gICAgICBzaG93QWRkaXRpb25hbEJvZHk6IGZhbHNlLFxuICAgICAgc2hvd0FkZGl0aW9uYWxCb2R5QnV0dG9uOiBmb3JtYXR0ZWRSZXZpZXdUaWxlSW5mb1szXSxcbiAgICAgIHNob3dQaG90b3M6IGZvcm1hdHRlZFJldmlld1RpbGVJbmZvWzRdLFxuICAgICAgc2hvd1JlY29tbWVuZDogdGhpcy5wcm9wcy5yZXZpZXcucmVjb21tZW5kLFxuICAgICAgc2hvd1Jlc3BvbnNlOiAhKHRoaXMucHJvcHMucmV2aWV3LnJlc3BvbnNlID09PSBudWxsIHx8IHRoaXMucHJvcHMucmV2aWV3LnJlc3BvbnNlLmxlbmd0aCA9PT0gMCksXG4gICAgICByZXBvcnRTdGF0dXM6IGZhbHNlLFxuICAgICAgaGVscGZ1bG5lc3M6IHRoaXMucHJvcHMucmV2aWV3LmhlbHBmdWxuZXNzICsgZm9ybWF0dGVkUmV2aWV3VGlsZUluZm9bNV0sXG4gICAgICBzaG93QWRkSGVscGZ1bEJ1dHRvbjogZm9ybWF0dGVkUmV2aWV3VGlsZUluZm9bNl0sXG4gICAgICByZXBvcnRTdGF0dXM6IGZvcm1hdHRlZFJldmlld1RpbGVJbmZvWzddXG4gICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy10aWxlJz5cbiAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LXRpbGUtdG9wLXBhbmVsJz5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXJzXCIgc3R5bGU9e3snLS1yYXRpbmcnOiB0aGlzLnByb3BzLnJldmlldy5yYXRpbmd9fT48L3NwYW4+XG4gICAgICAgICAgPHNwYW4+e3RoaXMucHJvcHMucmV2aWV3LnJldmlld2VyX25hbWV9LCB7aGVscGVycy5mb3JtYXREYXRlKHRoaXMucHJvcHMucmV2aWV3LmRhdGUuc2xpY2UoMCwgMTApKX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctc3VtbWFyeSc+e3RoaXMuc3RhdGUuc3VtbWFyeX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LWJvZHknIGhpZGRlbj17IXRoaXMuc3RhdGUuc2hvd0JvZHl9Pnt0aGlzLnN0YXRlLmJvZHl9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1hZGRpdGlvbmFsLWJvZHknIGhpZGRlbj17IXRoaXMuc3RhdGUuc2hvd0FkZGl0aW9uYWxCb2R5fT57dGhpcy5zdGF0ZS5hZGRpdGlvbmFsQm9keX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LWFkZGl0aW9uYWwtYm9keS1idXR0b24gcmV2aWV3LWNsaWNrYWJsZScgaGlkZGVuPXshdGhpcy5zdGF0ZS5zaG93QWRkaXRpb25hbEJvZHlCdXR0b259IG9uQ2xpY2s9e3RoaXMudG9nZ2xlQWRkaXRpb25hbEJvZHl9PlNob3cgTW9yZTwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctcGhvdG9zJyBoaWRkZW49eyF0aGlzLnN0YXRlLnNob3dQaG90b3N9PlxuICAgICAgICAgIHt0aGlzLnByb3BzLnJldmlldy5waG90b3MubWFwKHBob3RvID0+IDxSZXZpZXdQaG90byBwaG90bz17cGhvdG99IHNob3dQaG90b3M9e3RoaXMuc3RhdGUuc2hvd1Bob3Rvc30vPil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPSd1c2VyLXJlY29tbWVuZCcgaGlkZGVuPXshdGhpcy5zdGF0ZS5zaG93UmVjb21tZW5kfT5JIHJlY29tbWVuZCB0aGlzIHByb2R1Y3QhPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J3NlbGxlci1yZXNwb25zZScgaGlkZGVuPXshdGhpcy5zdGF0ZS5zaG93UmVzcG9uc2V9PlJlc3BvbnNlOiB7dGhpcy5wcm9wcy5yZXZpZXcucmVzcG9uc2V9PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1ib3R0b20tcGFuZWwnPlxuICAgICAgICAgIDxzcGFuPkhlbHBmdWw/PC9zcGFuPlxuICAgICAgICAgIHt0aGlzLnN0YXRlLnNob3dBZGRIZWxwZnVsQnV0dG9uID8gPHNwYW4gY2xhc3M9J3Jldmlldy1jbGlja2FibGUnIG9uQ2xpY2s9e3RoaXMuaGFuZGxlQWRkSGVscGZ1bH0+WWVzPC9zcGFuPiA6IDxzcGFuPlllczwvc3Bhbj59XG4gICAgICAgICAgPHNwYW4+KHt0aGlzLnN0YXRlLmhlbHBmdWxuZXNzfSk8L3NwYW4+XG4gICAgICAgICAgPHNwYW4+fDwvc3Bhbj5cbiAgICAgICAgICB7IXRoaXMuc3RhdGUucmVwb3J0U3RhdHVzID8gPHNwYW4gY2xhc3M9J3Jldmlldy1jbGlja2FibGUnIG9uQ2xpY2s9e3RoaXMuaGFuZGxlUmVwb3J0fT5SZXBvcnQ8L3NwYW4+IDogPHNwYW4+UmVwb3J0ZWQhPC9zcGFuPn1cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld1RpbGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUmV2aWV3VGlsZSBmcm9tICcuL1Jldmlld1RpbGUuanN4JztcblxuY2xhc3MgUmV2aWV3c0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYWxsUmV2aWV3czogW10sXG4gICAgICBjdXJyZW50UmV2aWV3czogW10sXG4gICAgICBvdGhlclJldmlld3M6IFtdLFxuICAgICAgc2hvd01vcmVSZXZpZXdzQnV0dG9uOiBmYWxzZSxcbiAgICAgIHNob3dMZXNzUmV2aWV3c0J1dHRvbjogZmFsc2UsXG4gICAgICBzb3J0aW5nT3B0aW9uOiAncmVsZXZhbmNlJ1xuICAgIH07XG4gICAgdGhpcy5pbml0aWFsaXplID0gdGhpcy5pbml0aWFsaXplLmJpbmQodGhpcyk7XG4gICAgdGhpcy5zaG93TW9yZVJldmlld3MgPSB0aGlzLnNob3dNb3JlUmV2aWV3cy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd0xlc3NSZXZpZXdzID0gdGhpcy5zaG93TGVzc1Jldmlld3MuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcykge1xuICAgIGlmICh0aGlzLnByb3BzLnJldmlld3MgIT09IHByZXZQcm9wcy5yZXZpZXdzKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH1cblxuICAvLyBtYXkgbmVlZCByZWZhY3RvcmluZ1xuICBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMucmV2aWV3cy5sZW5ndGggPiAyKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWxsUmV2aWV3czogbmV4dFByb3BzLnJldmlld3MsXG4gICAgICAgIGN1cnJlbnRSZXZpZXdzOiBuZXh0UHJvcHMucmV2aWV3cy5zbGljZSgwLCAyKSxcbiAgICAgICAgb3RoZXJSZXZpZXdzOiBuZXh0UHJvcHMucmV2aWV3cy5zbGljZSgyKSxcbiAgICAgICAgc2hvd01vcmVSZXZpZXdzQnV0dG9uOiB0cnVlLFxuICAgICAgICBzaG93TGVzc1Jldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzb3J0aW5nT3B0aW9uOiBuZXh0UHJvcHMuc29ydGluZ09wdGlvblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBhbGxSZXZpZXdzOiBuZXh0UHJvcHMucmV2aWV3cyxcbiAgICAgICAgY3VycmVudFJldmlld3M6IG5leHRQcm9wcy5yZXZpZXdzLFxuICAgICAgICBvdGhlclJldmlld3M6IFtdLFxuICAgICAgICBzaG93TW9yZVJldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzaG93TGVzc1Jldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzb3J0aW5nT3B0aW9uOiBuZXh0UHJvcHMuc29ydGluZ09wdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5yZXZpZXdzICYmIHRoaXMucHJvcHMucmV2aWV3cy5sZW5ndGggPiAyKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWxsUmV2aWV3czogdGhpcy5wcm9wcy5yZXZpZXdzLFxuICAgICAgICBjdXJyZW50UmV2aWV3czogdGhpcy5wcm9wcy5yZXZpZXdzLnNsaWNlKDAsIDIpLFxuICAgICAgICBvdGhlclJldmlld3M6IHRoaXMucHJvcHMucmV2aWV3cy5zbGljZSgyKSxcbiAgICAgICAgc2hvd01vcmVSZXZpZXdzQnV0dG9uOiB0cnVlLFxuICAgICAgICBzaG93TGVzc1Jldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzb3J0aW5nT3B0aW9uOiB0aGlzLnByb3BzLnNvcnRpbmdPcHRpb25cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgYWxsUmV2aWV3czogdGhpcy5wcm9wcy5yZXZpZXdzLFxuICAgICAgICBjdXJyZW50UmV2aWV3czogdGhpcy5wcm9wcy5yZXZpZXdzLFxuICAgICAgICBvdGhlclJldmlld3M6IFtdLFxuICAgICAgICBzaG93TW9yZVJldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzaG93TGVzc1Jldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzb3J0aW5nT3B0aW9uOiB0aGlzLnByb3BzLnNvcnRpbmdPcHRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNob3dNb3JlUmV2aWV3cygpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5vdGhlclJldmlld3MubGVuZ3RoID4gMikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGN1cnJlbnRSZXZpZXdzOiB0aGlzLnN0YXRlLmN1cnJlbnRSZXZpZXdzLmNvbmNhdCh0aGlzLnN0YXRlLm90aGVyUmV2aWV3cy5zbGljZSgwLCAyKSksXG4gICAgICAgIG90aGVyUmV2aWV3czogdGhpcy5zdGF0ZS5vdGhlclJldmlld3Muc2xpY2UoMiksXG4gICAgICAgIHNob3dMZXNzUmV2aWV3c0J1dHRvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBjdXJyZW50UmV2aWV3czogdGhpcy5zdGF0ZS5jdXJyZW50UmV2aWV3cy5jb25jYXQodGhpcy5zdGF0ZS5vdGhlclJldmlld3MpLFxuICAgICAgICBzaG93TW9yZVJldmlld3NCdXR0b246IGZhbHNlLFxuICAgICAgICBzaG93TGVzc1Jldmlld3NCdXR0b246IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHNob3dMZXNzUmV2aWV3cygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRSZXZpZXdzOiB0aGlzLnN0YXRlLmFsbFJldmlld3Muc2xpY2UoMCwgMiksXG4gICAgICBvdGhlclJldmlld3M6IHRoaXMuc3RhdGUuYWxsUmV2aWV3cy5zbGljZSgyKSxcbiAgICAgIHNob3dNb3JlUmV2aWV3c0J1dHRvbjogdHJ1ZSxcbiAgICAgIHNob3dMZXNzUmV2aWV3c0J1dHRvbjogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAodGhpcy5zdGF0ZS5hbGxSZXZpZXdzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBrZXk9e3RoaXMucHJvcHMucmV2aWV3c1swXS5yZXZpZXdfaWR9IGNsYXNzPSdyZXZpZXdzLWxpc3QnPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlld3MtbGlzdC10aWxlcyc+e3RoaXMuc3RhdGUuY3VycmVudFJldmlld3MubWFwKHJldmlldyA9PiA8UmV2aWV3VGlsZSByZXZpZXc9e3Jldmlld30vPil9PC9kaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9J3Jldmlldy1idXR0b24gcmV2aWV3LW1vcmUnIG9uQ2xpY2s9e3RoaXMuc2hvd01vcmVSZXZpZXdzfSBoaWRkZW49eyF0aGlzLnN0YXRlLnNob3dNb3JlUmV2aWV3c0J1dHRvbn0+TU9SRSBSRVZJRVdTPC9idXR0b24+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSdyZXZpZXctYnV0dG9uIHJldmlldy1sZXNzJyBvbkNsaWNrPXt0aGlzLnNob3dMZXNzUmV2aWV3c30gaGlkZGVuPXshdGhpcy5zdGF0ZS5zaG93TGVzc1Jldmlld3NCdXR0b259PkxFU1MgUkVWSUVXUzwvYnV0dG9uPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1lbXB0eS1yZXZpZXdzLWxpc3QnPlxuICAgICAgICAgIFN1Y2ggZW1wdGluZXNzISBCZSB0aGUgZmlyc3QgcGVyc29uIHRvIHJldmlldyB0aGlzIHByb2R1Y3QhXG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmV2aWV3c0xpc3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBoZWxwZXJzIGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBSZXZpZXdGb3JtQ2hhcmFjdGVyaXNpY3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgIH07XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1mb3JtLWNoYXJhY3RlcmlzdGljLXJhZGlvLWNvbnRhaW5lcic+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LWZvcm0tY2hhcmFjdGVyaXN0aWMtbmFtZSc+e3RoaXMucHJvcHMuY2hhcmFjdGVyaXN0aWMubmFtZX08L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctZm9ybS1jaGFyYWN0ZXJpc3RpYy1yYWRpbyc+XG4gICAgICAgICAgICB7Wy4uLkFycmF5KDUpLmtleXMoKV0ubWFwKGtleSA9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctZm9ybS1yYWRpby1kZXNjcmlwdGlvbic+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdyYWRpbycgbmFtZT17J2NoYXJhY3RlcmlzdGljcycgKyB0aGlzLnByb3BzLmNoYXJhY3RlcmlzdGljLm5hbWV9IHZhbHVlPXtrZXkgKyAxfSBjbGFzcz17dGhpcy5wcm9wcy5jaGFyYWN0ZXJpc3RpYy5pZH0gb25DaGFuZ2U9e3RoaXMucHJvcHMuaGFuZGxlQ2hhbmdlfT48L2lucHV0PlxuICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj17J2NoYXJhY3RlcmlzdGljcycgKyB0aGlzLnByb3BzLmNoYXJhY3RlcmlzdGljLm5hbWV9PntrZXkgKyAxfTwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdyZXZpZXctZm9ybS1jaGFyYWN0ZXJpc3RpYy1kZXNjcmlwdGlvbic+e2hlbHBlcnMucHJvZHVjdENoYXJhY3RlcmlzdGljc1t0aGlzLnByb3BzLmNoYXJhY3RlcmlzdGljLm5hbWVdW2tleSArIDFdfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApfVxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmV2aWV3Rm9ybUNoYXJhY3RlcmlzaWNzOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJCBmcm9tICdqcXVlcnknO1xuaW1wb3J0IFJldmlld0Zvcm1DaGFyYWN0ZXJpc2ljcyBmcm9tICcuL1Jldmlld0Zvcm1DaGFyYWN0ZXJpc3RpY3MuanN4JztcbmltcG9ydCBoZWxwZXJzIGZyb20gJy4uL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBSZXZpZXdGb3JtTW9kYWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcmF0aW5nOiAnJyxcbiAgICAgIHN1bW1hcnk6ICcnLFxuICAgICAgYm9keTogJycsXG4gICAgICByZWNvbW1lbmQ6IHRydWUsXG4gICAgICBuYW1lOiAnJyxcbiAgICAgIGVtYWlsOiAnJyxcbiAgICAgIHBob3RvczogW10sXG4gICAgICBjaGFyYWN0ZXJpc3RpY3M6IHt9LFxuICAgICAgcGhvdG9Db3VudDogMCxcbiAgICAgIHNob3c6IGZhbHNlLFxuICAgICAgc2hvd1VwbG9hZFBob3Rvc0J1dHRvbjogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5oYW5kbGVDaGFuZ2UgPSB0aGlzLmhhbmRsZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlUGhvdG9VcGxvYWQgPSB0aGlzLmhhbmRsZVBob3RvVXBsb2FkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTdWJtaXQgPSB0aGlzLmhhbmRsZVN1Ym1pdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMudG9nZ2xlTW9kYWwgPSB0aGlzLnRvZ2dsZU1vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy52YWxpZGF0ZUZvcm0gPSB0aGlzLnZhbGlkYXRlRm9ybS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgaGFuZGxlQ2hhbmdlKGUpIHtcbiAgICBsZXQgbmFtZSA9IGUudGFyZ2V0Lm5hbWU7XG4gICAgbGV0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XG4gICAgaWYgKG5hbWUuc2xpY2UoMCwgMTUpID09PSAnY2hhcmFjdGVyaXN0aWNzJykge1xuICAgICAgbGV0IGN1cnJlbnRDaGFyYWN0ZXJpc3RpY3MgPSB0aGlzLnN0YXRlLmNoYXJhY3RlcmlzdGljcztcbiAgICAgIGN1cnJlbnRDaGFyYWN0ZXJpc3RpY3NbZS50YXJnZXQuY2xhc3NOYW1lLnRvU3RyaW5nKCldID0gTnVtYmVyLnBhcnNlSW50KHZhbHVlKTtcbiAgICAgIHZhbHVlID0gY3VycmVudENoYXJhY3RlcmlzdGljcztcbiAgICAgIG5hbWUgPSBuYW1lLnNsaWNlKDAsIDE1KTtcbiAgICB9XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbbmFtZV06IHZhbHVlXG4gICAgfSk7XG4gIH1cblxuICBoYW5kbGVQaG90b1VwbG9hZChlKSB7XG4gICAgJCgnI3Jldmlldy1mb3JtLXVwbG9hZC1waG90bycpLnRleHQoJ3VwbG9hZGluZy4uLicpO1xuICAgIGxldCBwaG90byA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyZXZpZXctdXBsb2FkZWQtcGhvdG8nKS5maWxlc1swXTtcbiAgICBsZXQgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBsZXQgZGF0YVVSSTtcbiAgICByZWFkZXIub25sb2FkID0gKCkgPT4ge1xuICAgICAgZGF0YVVSSSA9IHJlYWRlci5yZXN1bHQ7XG4gICAgICAkLmFqYXgoe1xuICAgICAgICB1cmw6ICcvcmV2aWV3L2ltYWdlJyxcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGRhdGFUeXBlOiAndGV4dCcsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICBkYXRhVVJJOiBkYXRhVVJJXG4gICAgICAgIH1cbiAgICAgIH0pLnRoZW4oKGNsb3VkaW5hcnlVUkwpID0+IHtcbiAgICAgICAgbGV0IHNob3dVcGxvYWRQaG90b3NCdXR0b24gPSB0aGlzLnN0YXRlLnBob3RvQ291bnQgKyAxIDwgNTtcbiAgICAgICAgbGV0IGN1cnJlbnRQaG90b3MgPSB0aGlzLnN0YXRlLnBob3RvcztcbiAgICAgICAgY3VycmVudFBob3Rvcy5wdXNoKGNsb3VkaW5hcnlVUkwpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBwaG90b3M6IGN1cnJlbnRQaG90b3MsXG4gICAgICAgICAgcGhvdG9Db3VudDogdGhpcy5zdGF0ZS5waG90b0NvdW50ICsgMSxcbiAgICAgICAgICBzaG93VXBsb2FkUGhvdG9zQnV0dG9uOiBzaG93VXBsb2FkUGhvdG9zQnV0dG9uXG4gICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAkKCcjcmV2aWV3LWZvcm0tdXBsb2FkLXBob3RvJykudGV4dCgnJyk7XG4gICAgICAgIH0pO1xuICAgICAgfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgJCgnI3Jldmlldy1mb3JtLXVwbG9hZC1waG90bycpLnRleHQoJ3VwbG9hZCBmYWlsZWQnKTtcbiAgICAgIH0pO1xuICAgIH07XG4gICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwocGhvdG8pO1xuICB9XG5cbiAgaGFuZGxlU3VibWl0KGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKCF0aGlzLnZhbGlkYXRlRm9ybSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBkYXRhID0ge1xuICAgICAgJ3Byb2R1Y3RfaWQnOiBOdW1iZXIucGFyc2VJbnQodGhpcy5wcm9wcy5tZXRhLnByb2R1Y3RfaWQpLFxuICAgICAgcmF0aW5nOiBOdW1iZXIucGFyc2VJbnQodGhpcy5zdGF0ZS5yYXRpbmcpLFxuICAgICAgc3VtbWFyeTogdGhpcy5zdGF0ZS5zdW1tYXJ5LFxuICAgICAgYm9keTogdGhpcy5zdGF0ZS5ib2R5LFxuICAgICAgcmVjb21tZW5kOiBKU09OLnBhcnNlKHRoaXMuc3RhdGUucmVjb21tZW5kKSxcbiAgICAgIG5hbWU6IHRoaXMuc3RhdGUubmFtZSxcbiAgICAgIGVtYWlsOiB0aGlzLnN0YXRlLmVtYWlsLFxuICAgICAgcGhvdG9zOiB0aGlzLnN0YXRlLnBob3RvcyxcbiAgICAgIGNoYXJhY3RlcmlzdGljczogdGhpcy5zdGF0ZS5jaGFyYWN0ZXJpc3RpY3NcbiAgICB9O1xuICAgICQuYWpheCh7XG4gICAgICB1cmw6ICcvcmV2aWV3cycsXG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGNvbnRlbnRUeXBlOiAnYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOCcsXG4gICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIHJhdGluZzogJycsXG4gICAgICAgIHN1bW1hcnk6ICcnLFxuICAgICAgICBib2R5OiAnJyxcbiAgICAgICAgcmVjb21tZW5kOiB0cnVlLFxuICAgICAgICBuYW1lOiAnJyxcbiAgICAgICAgZW1haWw6ICcnLFxuICAgICAgICBwaG90b3M6IFtdLFxuICAgICAgICBjaGFyYWN0ZXJpc3RpY3M6IHt9LFxuICAgICAgICBwaG90b0NvdW50OiAwLFxuICAgICAgICBzaG93OiBmYWxzZSxcbiAgICAgICAgc2hvd1VwbG9hZFBob3Rvc0J1dHRvbjogdHJ1ZVxuICAgICAgfSwgdGhpcy5wcm9wcy5jbG9zZU1vZGFsKTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcbiAgfVxuXG4gIHRvZ2dsZU1vZGFsKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogIXRoaXMuc3RhdGUuc2hvd1xuICAgIH0pO1xuICB9XG5cbiAgdmFsaWRhdGVGb3JtKCkge1xuICAgIGxldCB2YWxpZCA9IHRydWU7XG4gICAgbGV0IHByb3BlcnRpZXMgPSBbJ3JhdGluZycsICdzdW1tYXJ5JywgJ2JvZHknLCAnbmFtZScsICdlbWFpbCcsICdjaGFyYWN0ZXJpc3RpY3MnXTtcbiAgICBwcm9wZXJ0aWVzLmZvckVhY2gocHJvcGVydHkgPT4ge1xuICAgICAgbGV0IGludmFsaWRDaGFyYWN0ZXJpc3RpY3MgPSAocHJvcGVydHkgPT09ICdjaGFyYWN0ZXJpc3RpY3MnICYmIE9iamVjdC5rZXlzKHRoaXMuc3RhdGVbcHJvcGVydHldKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHRoaXMucHJvcHMubWV0YS5jaGFyYWN0ZXJpc3RpY3MpLmxlbmd0aCk7XG4gICAgICBsZXQgaW52YWxpZEVtYWlsID0gKHByb3BlcnR5ID09PSAnZW1haWwnICYmIHRoaXMuc3RhdGVbcHJvcGVydHldLmluZGV4T2YoJ0AnKSA9PT0gLTEpO1xuICAgICAgaWYgKGludmFsaWRFbWFpbCB8fCBpbnZhbGlkQ2hhcmFjdGVyaXN0aWNzIHx8IHRoaXMuc3RhdGVbcHJvcGVydHldID09PSAnJykge1xuICAgICAgICAkKCcjcmV2aWV3LWZvcm0tJyArIHByb3BlcnR5KS50ZXh0KCcqcmVxdWlyZWQnKTtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICQoJyNyZXZpZXctZm9ybS0nICsgcHJvcGVydHkpLnRleHQoJycpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWxpZDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuc2hvdykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGxldCB1cGxvYWRlZEltYWdlUHJldmlld3M7XG4gICAgaWYgKHRoaXMuc3RhdGUucGhvdG9zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgdXBsb2FkZWRJbWFnZVByZXZpZXdzID0gKFxuICAgICAgICA8ZGl2Pnt0aGlzLnN0YXRlLnBob3Rvcy5tYXAocGhvdG8gPT4gPGltZyBjbGFzcz0ncmV2aWV3LXBob3RvIHJldmlldy10aHVtYm5haWwnIHNyYz17cGhvdG99Lz4pfTwvZGl2PlxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdyZXZpZXctZm9ybS1tb2RhbCcgb25DbGljaz17dGhpcy5wcm9wcy5jbG9zZU1vZGFsfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jldmlldy1mb3JtLW1vZGFsLWNvbnRlbnQnIG9uQ2xpY2s9e2UgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jldmlldy1mb3JtLW1vZGFsLWhlYWRlcic+XG4gICAgICAgICAgICA8ZGl2PldyaXRlIFlvdXIgUmV2aWV3PC9kaXY+XG4gICAgICAgICAgICA8ZGl2PkFib3V0IHRoZSB7dGhpcy5wcm9wcy5wcm9kdWN0TmFtZX08L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3Jldmlldy1mb3JtLW1vZGFsLWJvZHknPlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ncmV2aWV3LWZvcm0tc3ViLWhlYWRpbmcnPk92ZXJhbGwgcmF0aW5nOjwvbGFiZWw+PHNwYW4gaWQ9J3Jldmlldy1mb3JtLXJhdGluZycgY2xhc3M9J3Jldmlldy1mb3JtLWludmFsaWQtd2FybmluZyc+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPSdyZXZpZXctZm9ybS1vdmVyYWxsLXJhdGluZycgbmFtZT0ncmF0aW5nJyB2YWx1ZT17dGhpcy5zdGF0ZS5yYXRpbmd9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9Jyc+LS1QbGVhc2UgY2hvb3NlIGFuIG9wdGlvbi0tPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ezV9PjU8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17NH0+NDwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPXszfT4zPC9vcHRpb24+XG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ezJ9PjI8L29wdGlvbj5cbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT17MX0+MTwvb3B0aW9uPlxuICAgICAgICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGlkPSdyZXZpZXctZm9ybS1yZWNvbW1lbmQnPlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ncmV2aWV3LWZvcm0tc3ViLWhlYWRpbmcnPkRvIHlvdSByZWNvbW1lbmQgdGhpcyBwcm9kdWN0PzwvbGFiZWw+XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSdyYWRpbycgaWQ9J3Jldmlldy1yZWNvbW1lbmQteWVzJyBuYW1lPSdyZWNvbW1lbmQnIHZhbHVlPXt0cnVlfSBjaGVja2VkIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3JlY29tbWVuZCc+WWVzPC9sYWJlbD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9J3JhZGlvJyBpZD0ncmV2aWV3LXJlY29tbWVuZC1ubycgbmFtZT0ncmVjb21tZW5kJyB2YWx1ZT17ZmFsc2V9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9J3JlY29tbWVuZCc+Tm88L2xhYmVsPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8bGFiZWwgY2xhc3M9J3Jldmlldy1mb3JtLXN1Yi1oZWFkaW5nJz5DaGFyYWN0ZXJpc3RpY3M6PC9sYWJlbD48c3BhbiBpZD0ncmV2aWV3LWZvcm0tY2hhcmFjdGVyaXN0aWNzJyBjbGFzcz0ncmV2aWV3LWZvcm0taW52YWxpZC13YXJuaW5nJz48L3NwYW4+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ncmV2aWV3LWZvcm0tYWxsLWNoYXJhY3RlcmlzdGljcyc+XG4gICAgICAgICAgICAgICAgICB7aGVscGVycy5mb3JtYXRDaGFyYWN0ZXJpc3RpY3ModGhpcy5wcm9wcy5tZXRhLmNoYXJhY3RlcmlzdGljcykubWFwKGNoYXJhY3RlcmlzdGljID0+IDxSZXZpZXdGb3JtQ2hhcmFjdGVyaXNpY3MgY2hhcmFjdGVyaXN0aWM9e2NoYXJhY3RlcmlzdGljfSBoYW5kbGVDaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfS8+KX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdyZXZpZXctZm9ybS1zdWItaGVhZGluZyc+UmV2aWV3IHN1bW1hcnk6PC9sYWJlbD48c3BhbiBpZD0ncmV2aWV3LWZvcm0tc3VtbWFyeScgY2xhc3M9J3Jldmlldy1mb3JtLWludmFsaWQtd2FybmluZyc+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nc3VtbWFyeScgdHlwZT0ndGV4dCcgbWF4bGVuZ3RoPSc2MCcgc2l6ZT0nNzAnIHBsYWNlaG9sZGVyPSdFeGFtcGxlOiBCZXN0IHB1cmNoYXNlIGV2ZXIhJyB2YWx1ZT17dGhpcy5zdGF0ZS5zdW1tYXJ5fSBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9PjwvaW5wdXQ+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ncmV2aWV3LWZvcm0tc3ViLWhlYWRpbmcnPlJldmlldyBib2R5OjwvbGFiZWw+PHNwYW4gaWQ9J3Jldmlldy1mb3JtLWJvZHknIGNsYXNzPSdyZXZpZXctZm9ybS1pbnZhbGlkLXdhcm5pbmcnPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgICAgPHRleHRhcmVhIGlkPSdyZXZpZXctZm9ybS1ib2R5JyBuYW1lPSdib2R5JyByb3dzPScxMCcgY29scz0nNzAnIHBsYWNlaG9sZGVyPSdXaHkgZGlkIHlvdSBsaWtlIHRoZSBwcm9kdWN0IG9yIG5vdD8nIHZhbHVlPXt0aGlzLnN0YXRlLmJvZHl9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC90ZXh0YXJlYT5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdyZXZpZXctZm9ybS1zdWItaGVhZGluZyc+WW91ciB1cGxvYWRlZCBwaG90byhzKTo8L2xhYmVsPlxuICAgICAgICAgICAgICAgIHt1cGxvYWRlZEltYWdlUHJldmlld3N9XG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXY+PGlucHV0IHR5cGU9J2ZpbGUnIG5hbWU9J3Bob3RvJyBhY2NlcHQ9J2ltYWdlLyonIHZhbHVlPXt0aGlzLnN0YXRlLnBob3RvfSBpZD0ncmV2aWV3LXVwbG9hZGVkLXBob3RvJyBvbkNoYW5nZT17dGhpcy5oYW5kbGVQaG90b1VwbG9hZH0gaGlkZGVuPXshdGhpcy5zdGF0ZS5zaG93VXBsb2FkUGhvdG9zQnV0dG9ufSBzdHlsZT17eydkaXNwbGF5JzogJ25vbmUnfX0+PC9pbnB1dD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXY+PGxhYmVsIGlkPSdyZXZpZXctZm9ybS11cGxvYWQtcGhvdG8tYnV0dG9uJyBjbGFzcz0ncmV2aWV3LWNsaWNrYWJsZScgdHlwZT0nYnV0dG9uJyBmb3I9J3Jldmlldy11cGxvYWRlZC1waG90byc+VXBsb2FkIFBob3RvPC9sYWJlbD48c3BhbiBpZD0ncmV2aWV3LWZvcm0tdXBsb2FkLXBob3RvJyBjbGFzcz0ncmV2aWV3LWZvcm0taW52YWxpZC13YXJuaW5nJz48L3NwYW4+PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0ncmV2aWV3LWZvcm0tc3ViLWhlYWRpbmcnPllvdXIgbmlja25hbWU6PC9sYWJlbD48c3BhbiBpZD0ncmV2aWV3LWZvcm0tbmFtZScgY2xhc3M9J3Jldmlldy1mb3JtLWludmFsaWQtd2FybmluZyc+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nbmFtZScgdHlwZT0ndGV4dCcgbWF4bGVuZ3RoPSc0MCcgc2l6ZT0nNTAnIHBsYWNlaG9sZGVyPSdFeGFtcGxlOiBqYWNrc29uMTEnIHZhbHVlPXt0aGlzLnN0YXRlLm5hbWV9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSdyZXZpZXctZm9ybS1zdWItaGVhZGluZyc+WW91ciBlbWFpbDo8L2xhYmVsPjxzcGFuIGlkPSdyZXZpZXctZm9ybS1lbWFpbCcgY2xhc3M9J3Jldmlldy1mb3JtLWludmFsaWQtd2FybmluZyc+PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT0nZW1haWwnIHR5cGU9J3RleHQnIG1heGxlbmd0aD0nNDAnIHNpemU9JzUwJyBwbGFjZWhvbGRlcj0nRXhhbXBsZTogamFja3NvbjExQGVtYWlsLmNvbScgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9IG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUNoYW5nZX0+PC9pbnB1dD5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0ncmV2aWV3LWJ1dHRvbic+U1VCTUlUIFJFVklFVzwvYnV0dG9uPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvZm9ybT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld0Zvcm1Nb2RhbDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJldmlld0Zvcm1Nb2RhbCBmcm9tICcuL1Jldmlld0Zvcm1Nb2RhbC5qc3gnO1xuXG5jbGFzcyBSZXZpZXdGb3JtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHNob3c6IGZhbHNlXG4gICAgfTtcbiAgICB0aGlzLnNob3dNb2RhbCA9IHRoaXMuc2hvd01vZGFsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jbG9zZU1vZGFsID0gdGhpcy5jbG9zZU1vZGFsLmJpbmQodGhpcyk7XG4gIH1cblxuICBzaG93TW9kYWwoKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBzaG93OiB0cnVlXG4gICAgfSk7XG4gIH1cblxuICBjbG9zZU1vZGFsKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvdzogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGJ1dHRvbiBpZD0ncmV2aWV3LWZvcm0tYWRkLWJ1dHRvbicgY2xhc3M9J3Jldmlldy1idXR0b24nIG9uQ2xpY2s9e3RoaXMuc2hvd01vZGFsfT5BREQgQSBSRVZJRVcgKzwvYnV0dG9uPlxuICAgICAgICA8UmV2aWV3Rm9ybU1vZGFsIHNob3c9e3RoaXMuc3RhdGUuc2hvd30gY2xvc2VNb2RhbD17dGhpcy5jbG9zZU1vZGFsfSBwcm9kdWN0TmFtZT17dGhpcy5wcm9wcy5wcm9kdWN0TmFtZX0gbWV0YT17dGhpcy5wcm9wcy5tZXRhfS8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJldmlld0Zvcm07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY2xhc3MgU2VhcmNoQmFyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGtleXdvcmQ6ICcnXG4gICAgfTtcbiAgICB0aGlzLmhhbmRsZUNoYW5nZSA9IHRoaXMuaGFuZGxlQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cblxuICBoYW5kbGVDaGFuZ2UoZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAga2V5d29yZDogZS50YXJnZXQudmFsdWVcbiAgICB9LCB0aGlzLnByb3BzLmhhbmRsZVNlYXJjaChlLnRhcmdldC52YWx1ZSkpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctc2VhcmNoLWNvbnRhaW5lcic+XG4gICAgICAgIDxpbnB1dCBjbGFzcz0ncmV2aWV3LXNlYXJjaC1iYXInIHR5cGU9J3NlYXJjaCcgcGxhY2Vob2xkZXI9J1NFQVJDSC4uLicgdmFsdWU9e3RoaXMuc3RhdGUua2V5d29yZH0gb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfT48L2lucHV0PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTZWFyY2hCYXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgUmF0aW5nQnJlYWtkb3duIGZyb20gJy4vY29tcG9uZW50cy9SYXRpbmdCcmVha2Rvd24uanN4JztcbmltcG9ydCBQcm9kdWN0QnJlYWtkb3duIGZyb20gJy4vY29tcG9uZW50cy9Qcm9kdWN0QnJlYWtkb3duLmpzeCc7XG5pbXBvcnQgU29ydGluZ09wdGlvbnMgZnJvbSAnLi9jb21wb25lbnRzL1NvcnRpbmdPcHRpb25zLmpzeCc7XG5pbXBvcnQgUmV2aWV3c0xpc3QgZnJvbSAnLi9jb21wb25lbnRzL1Jldmlld3NMaXN0LmpzeCc7XG5pbXBvcnQgUmV2aWV3Rm9ybSBmcm9tICcuL2NvbXBvbmVudHMvUmV2aWV3Rm9ybS5qc3gnO1xuaW1wb3J0IFNlYXJjaEJhciBmcm9tICcuL2NvbXBvbmVudHMvU2VhcmNoQmFyLmpzeCc7XG5pbXBvcnQgaGVscGVycyBmcm9tICcuL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBSYXRpbmdzUmV2aWV3cyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBtZXRhOiB7fSxcbiAgICAgIHJldmlld3M6IFtdLFxuICAgICAgZmlsdGVyZWRSZXZpZXdzOiBbXSxcbiAgICAgIHNvcnRpbmdPcHRpb246ICdyZWxldmFuY2UnLFxuICAgICAgc3RhckZpbHRlcnM6IFtdLFxuICAgICAga2V5d29yZDogJydcbiAgICB9O1xuICAgIHRoaXMuaW5pdGlhbGl6ZSA9IHRoaXMuaW5pdGlhbGl6ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlcyA9IHRoaXMuaGFuZGxlT3B0aW9uQ2hhbmdlcy5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGFuZGxlU3RhckZpbHRlcnMgPSB0aGlzLmhhbmRsZVN0YXJGaWx0ZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy51cGRhdGVSZXZpZXdzID0gdGhpcy51cGRhdGVSZXZpZXdzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5yZW1vdmVGaWx0ZXJzID0gdGhpcy5yZW1vdmVGaWx0ZXJzLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVTZWFyY2ggPSB0aGlzLmhhbmRsZVNlYXJjaC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMucHJvZHVjdF9pZCAhPT0gcHJldlByb3BzLnByb2R1Y3RfaWQpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgJC5hamF4KHtcbiAgICAgIHVybDogYHJldmlld3MvP3Byb2R1Y3RfaWQ9JHt0aGlzLnByb3BzLnByb2R1Y3RfaWR9JnBhZ2U9MSZjb3VudD0xMDAmc29ydD1yZWxldmFudGAsXG4gICAgICBtZXRob2Q6ICdHRVQnXG4gICAgfSkudGhlbigocmV2aWV3cykgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIG1ldGE6IHRoaXMucHJvcHMubWV0YSxcbiAgICAgICAgcmV2aWV3czogcmV2aWV3cy5yZXN1bHRzLFxuICAgICAgICBmaWx0ZXJlZFJldmlld3M6IGhlbHBlcnMuc29ydFJldmlld3MocmV2aWV3cy5yZXN1bHRzLCB0aGlzLnN0YXRlLnNvcnRpbmdPcHRpb24pXG4gICAgICB9KTtcbiAgICB9KS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICB9KTtcblxuICAgIGlmICghbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2hlbHBmdWxSZXZpZXdzJykpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdoZWxwZnVsUmV2aWV3cycsIEpTT04uc3RyaW5naWZ5KFtdKSk7XG4gICAgfVxuICAgIHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ2hlbHBmdWxSZXZpZXdzJywgSlNPTi5zdHJpbmdpZnkoW10pKTtcbiAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCdyZXBvcnRlZFJldmlld3MnLCBKU09OLnN0cmluZ2lmeShbXSkpO1xuICB9XG5cbiAgaGFuZGxlT3B0aW9uQ2hhbmdlcyhuZXdPcHRpb24pIHtcbiAgICB2YXIgbmV3RmlsdGVyZWRSZXZpZXdzID0gdGhpcy51cGRhdGVSZXZpZXdzKHRoaXMuc3RhdGUucmV2aWV3cywgbmV3T3B0aW9uLCB0aGlzLnN0YXRlLnN0YXJGaWx0ZXJzLCB0aGlzLnN0YXRlLmtleXdvcmQpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc29ydGluZ09wdGlvbjogbmV3T3B0aW9uLFxuICAgICAgZmlsdGVyZWRSZXZpZXdzOiBuZXdGaWx0ZXJlZFJldmlld3NcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVN0YXJGaWx0ZXJzKHN0YXIpIHtcbiAgICB2YXIgbmV3U3RhckZpbHRlcnMgPSB0aGlzLnN0YXRlLnN0YXJGaWx0ZXJzLnNsaWNlKCk7XG4gICAgaWYgKHRoaXMuc3RhdGUuc3RhckZpbHRlcnMuaW5kZXhPZihzdGFyKSA9PT0gLTEpIHtcbiAgICAgIG5ld1N0YXJGaWx0ZXJzLnB1c2goc3Rhcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0YXJGaWx0ZXJzLnNwbGljZSh0aGlzLnN0YXRlLnN0YXJGaWx0ZXJzLmluZGV4T2Yoc3RhciksIDEpO1xuICAgIH1cbiAgICB2YXIgbmV3RmlsdGVyZWRSZXZpZXdzID0gdGhpcy51cGRhdGVSZXZpZXdzKHRoaXMuc3RhdGUucmV2aWV3cywgdGhpcy5zdGF0ZS5zb3J0aW5nT3B0aW9uLCBuZXdTdGFyRmlsdGVycywgdGhpcy5zdGF0ZS5rZXl3b3JkKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHN0YXJGaWx0ZXJzOiBuZXdTdGFyRmlsdGVycyxcbiAgICAgIGZpbHRlcmVkUmV2aWV3czogbmV3RmlsdGVyZWRSZXZpZXdzXG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVGaWx0ZXJzKCkge1xuICAgIHZhciBuZXdGaWx0ZXJlZFJldmlld3MgPSB0aGlzLnVwZGF0ZVJldmlld3ModGhpcy5zdGF0ZS5yZXZpZXdzLCB0aGlzLnN0YXRlLnNvcnRpbmdPcHRpb24sIFtdLCB0aGlzLnN0YXRlLmtleXdvcmQpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc3RhckZpbHRlcnM6IFtdLFxuICAgICAgZmlsdGVyZWRSZXZpZXdzOiBuZXdGaWx0ZXJlZFJldmlld3NcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVNlYXJjaChrZXl3b3JkKSB7XG4gICAgaWYgKGtleXdvcmQubGVuZ3RoIDwgMykge1xuICAgICAga2V5d29yZCA9ICcnO1xuICAgIH1cbiAgICB2YXIgcXVlcmllZFJldmlld3MgPSB0aGlzLnVwZGF0ZVJldmlld3ModGhpcy5zdGF0ZS5yZXZpZXdzLCB0aGlzLnN0YXRlLnNvcnRpbmdPcHRpb24sIHRoaXMuc3RhdGUuc3RhckZpbHRlcnMsIGtleXdvcmQpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAga2V5d29yZDoga2V5d29yZCxcbiAgICAgIGZpbHRlcmVkUmV2aWV3czogcXVlcmllZFJldmlld3NcbiAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZVJldmlld3MocmV2aWV3LCBzb3J0aW5nT3B0aW9uLCBzdGFyRmlsdGVycywga2V5d29yZCkge1xuICAgIHZhciBzb3J0ZWRSZXZpZXdzID0gaGVscGVycy5zb3J0UmV2aWV3cyhyZXZpZXcsIHNvcnRpbmdPcHRpb24pO1xuICAgIHZhciBmaWx0ZXJlZFJldmlld3MgPSBoZWxwZXJzLmFwcGx5U3RhckZpbHRlcnMoc29ydGVkUmV2aWV3cywgc3RhckZpbHRlcnMpO1xuICAgIHZhciBxdWVyaWVkUmV2aWV3cyA9IGhlbHBlcnMuYXBwbHlLZXl3b3JkKGZpbHRlcmVkUmV2aWV3cywga2V5d29yZCk7XG4gICAgcmV0dXJuIHF1ZXJpZWRSZXZpZXdzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGlmICghJC5pc0VtcHR5T2JqZWN0KHRoaXMuc3RhdGUubWV0YSkgJiYgdGhpcy5wcm9wcy5pbmZvICE9PSBudWxsKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzPSdyZXZpZXctb3ZlcmFsbC1jb250YWluZXInPlxuICAgICAgICAgIDxzcGFuPlJBVElOR1MgJiBSRVZJRVdTPC9zcGFuPlxuICAgICAgICAgIDxkaXYgY2xhc3M9J3Jldmlldy1jb250ZW50LWNvbnRhaW5lcic+XG4gICAgICAgICAgICA8ZGl2IGlkPSdyZXZpZXctbGVmdC1jb250YWluZXInIGNsYXNzPSdyZXZpZXctc3ViLWNvbnRhaW5lciBsZWZ0Jz5cbiAgICAgICAgICAgICAgPFJhdGluZ0JyZWFrZG93biBwcm9kdWN0X2lkPXt0aGlzLnByb3BzLnByb2R1Y3RfaWR9IG1ldGE9e3RoaXMuc3RhdGUubWV0YX0gaGFuZGxlU3RhckZpbHRlcnM9e3RoaXMuaGFuZGxlU3RhckZpbHRlcnN9IHN0YXJGaWx0ZXJzPXt0aGlzLnN0YXRlLnN0YXJGaWx0ZXJzfSByZW1vdmVGaWx0ZXJzPXt0aGlzLnJlbW92ZUZpbHRlcnN9Lz5cbiAgICAgICAgICAgICAgPFByb2R1Y3RCcmVha2Rvd24gbWV0YT17dGhpcy5zdGF0ZS5tZXRhfS8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9J3Jldmlldy1yaWdodC1jb250YWluZXInIGNsYXNzPSdyZXZpZXctc3ViLWNvbnRhaW5lciByaWdodCc+XG4gICAgICAgICAgICAgIDxTZWFyY2hCYXIgaGFuZGxlU2VhcmNoPXt0aGlzLmhhbmRsZVNlYXJjaH0vPlxuICAgICAgICAgICAgICA8U29ydGluZ09wdGlvbnMgaGFuZGxlT3B0aW9uQ2hhbmdlcz17dGhpcy5oYW5kbGVPcHRpb25DaGFuZ2VzfSByZXZpZXdzPXt0aGlzLnN0YXRlLmZpbHRlcmVkUmV2aWV3c30vPlxuICAgICAgICAgICAgICA8UmV2aWV3c0xpc3QgcmV2aWV3cz17dGhpcy5zdGF0ZS5maWx0ZXJlZFJldmlld3N9IHNvcnRpbmdPcHRpb249e3RoaXMuc3RhdGUuc29ydGluZ09wdGlvbn0vPlxuICAgICAgICAgICAgICA8UmV2aWV3Rm9ybSBwcm9kdWN0TmFtZT17dGhpcy5wcm9wcy5pbmZvLm5hbWV9IG1ldGE9e3RoaXMuc3RhdGUubWV0YX0vPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5Mb2FkaW5nLi4uPC9kaXY+XG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYXRpbmdzUmV2aWV3cztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBnZXRQcm9kdWN0SW5mbywgZ2V0UHJvZHVjdFN0eWxlcywgZ2V0UHJvZHVjdFJhdGluZ3MsIGZpbmREZWZhdWx0U3R5bGUgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuaW1wb3J0IHsgY29tcHV0ZUF2ZXJhZ2VSYXRpbmcgfSBmcm9tICcuLi9yYXRpbmdzX3Jldmlld3MvaGVscGVycy5qcyc7XG5cbmNsYXNzIEl0ZW1DYXJkIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgdGh1bWJuYWlsVXJsOiAnJyxcbiAgICAgIGNhdGVnb3J5OiAnJyxcbiAgICAgIG5hbWU6ICcnLFxuICAgICAgcHJpY2U6ICcnLFxuICAgICAgcmF0aW5nOiAnJyxcbiAgICAgIGZlYXR1cmVzOiBbXVxuICAgIH07XG5cbiAgICB0aGlzLmhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2sgPSB0aGlzLnByb3BzLmhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGdldFByb2R1Y3RJbmZvKHRoaXMucHJvcHMuaWQpXG4gICAgICAudGhlbihwcm9kdWN0SW5mbyA9PiB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgY2F0ZWdvcnk6IHByb2R1Y3RJbmZvLmNhdGVnb3J5LFxuICAgICAgICBuYW1lOiBwcm9kdWN0SW5mby5uYW1lLFxuICAgICAgICByYXRpbmc6ICc0LjUnLFxuICAgICAgICBmZWF0dXJlczogcHJvZHVjdEluZm8uZmVhdHVyZXNcbiAgICAgIH0pKTtcblxuICAgIGdldFByb2R1Y3RTdHlsZXModGhpcy5wcm9wcy5pZClcbiAgICAgIC50aGVuKHByb2R1Y3RTdHlsZXMgPT4ge1xuICAgICAgICBmaW5kRGVmYXVsdFN0eWxlKHByb2R1Y3RTdHlsZXMucmVzdWx0cylcbiAgICAgICAgICAudGhlbihkZWZhdWx0U3R5bGUgPT4ge1xuICAgICAgICAgICAgbGV0IHByaWNlLCB0aHVtYm5haWxVcmw7XG5cbiAgICAgICAgICAgICFkZWZhdWx0U3R5bGUuc2FsZV9wcmljZVxuICAgICAgICAgICAgICA/IHByaWNlID0gZGVmYXVsdFN0eWxlLm9yaWdpbmFsX3ByaWNlXG4gICAgICAgICAgICAgIDogcHJpY2UgPSBkZWZhdWx0U3R5bGUuc2FsZV9wcmljZTtcblxuICAgICAgICAgICAgIWRlZmF1bHRTdHlsZS5waG90b3NbMF0udGh1bWJuYWlsX3VybFxuICAgICAgICAgICAgICA/IHRodW1ibmFpbFVybCA9ICdodHRwczovL2Nkbi5zaG9waWZ5LmNvbS9zL2ZpbGVzLzEvMDUzMy8yMDg5L2ZpbGVzL3BsYWNlaG9sZGVyLWltYWdlcy1pbWFnZV9sYXJnZS5wbmc/Zm9ybWF0PXdlYnAmdj0xNTMwMTI5MDgxJ1xuICAgICAgICAgICAgICA6IHRodW1ibmFpbFVybCA9IGRlZmF1bHRTdHlsZS5waG90b3NbMF0udGh1bWJuYWlsX3VybDtcblxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICAgIHRodW1ibmFpbFVybDogdGh1bWJuYWlsVXJsLFxuICAgICAgICAgICAgICBwcmljZTogcHJpY2VcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICBnZXRQcm9kdWN0UmF0aW5ncyh0aGlzLnByb3BzLmlkKVxuICAgICAgLnRoZW4ocmF0aW5nc01ldGEgPT4ge1xuICAgICAgICBsZXQgYXZlcmFnZVJhdGluZyA9IGNvbXB1dGVBdmVyYWdlUmF0aW5nKHJhdGluZ3NNZXRhLnJhdGluZ3MpWzFdO1xuICAgICAgICBpZiAoYXZlcmFnZVJhdGluZyA9PT0gJ05hTicpIHsgYXZlcmFnZVJhdGluZyA9ICcwLjAwJzsgfVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICByYXRpbmc6IGF2ZXJhZ2VSYXRpbmdcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgZmVhdHVyZXMgPSB0aGlzLnN0YXRlLmZlYXR1cmVzO1xuICAgIGxldCBuYW1lID0gdGhpcy5zdGF0ZS5uYW1lO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdycC1jYXJkJyBvbkNsaWNrPXsoKSA9PiB0aGlzLmhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2sodGhpcy5wcm9wcy5pZCl9PlxuICAgICAgICA8ZGl2IGlkPSdycC1hY3Rpb24tY29udGFpbmVyJz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0ncnAtY2FyZC1hY3Rpb24nIGlkPSdycC1jYXJkLWNvbXBhcmUnIG9uQ2xpY2s9eyhlKSA9PiB0aGlzLnByb3BzLnRvZ2dsZU1vZGFsKGUsIGZlYXR1cmVzLCBuYW1lKX0+IDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBpZD0ncnAtdGh1bWJuYWlsLWNvbnRhaW5lcic+XG4gICAgICAgICAgPGltZyBpZD0ncnAtdGh1bWJuYWlsLWltYWdlJyBzcmM9e3RoaXMuc3RhdGUudGh1bWJuYWlsVXJsfT48L2ltZz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgaWQ9J3JwLWNvbnRlbnQtY29udGFpbmVyJz5cbiAgICAgICAgICA8cCBpZD0ncnAtY2FyZC1jYXRlZ29yeSc+e3RoaXMuc3RhdGUuY2F0ZWdvcnl9PC9wPlxuICAgICAgICAgIDxwIGlkPSdycC1jYXJkLW5hbWUnPnt0aGlzLnN0YXRlLm5hbWV9PC9wPlxuICAgICAgICAgIDxwIGlkPSdycC1jYXJkLXByaWNlJz4ke3RoaXMuc3RhdGUucHJpY2V9PC9wPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPSdzdGFycycgc3R5bGU9e3snLS1yYXRpbmcnOiB0aGlzLnN0YXRlLnJhdGluZ319Pjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEl0ZW1DYXJkOyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBmaW5kQ29tcGFyaXNvbkZlYXR1cmVzIH0gZnJvbSAnLi9oZWxwZXJzLmpzJztcblxuY29uc3QgQ29tcGFyaXNvbk1vZGFsID0gKHByb3BzKSA9PiB7XG4gIGlmICghcHJvcHMuc2hvd01vZGFsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQga2V5ID0gMDtcbiAgbGV0IG1haW5GZWF0dXJlcyA9IHByb3BzLm1haW5Qcm9kdWN0WzFdO1xuICBsZXQgY29tcGFyaXNvbkZlYXR1cmVzID0gcHJvcHMucHJvZHVjdFRvQ29tcGFyZVsxXTtcblxuICBsZXQgYWxsRmVhdHVyZXMgPSBmaW5kQ29tcGFyaXNvbkZlYXR1cmVzKG1haW5GZWF0dXJlcywgY29tcGFyaXNvbkZlYXR1cmVzKTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgaWQ9J3JwLWNvbXBhcmlzb24tbW9kYWwtYmFja2dyb3VuZCcgb25DbGljaz17KGUpID0+IHByb3BzLnRvZ2dsZU1vZGFsKGUpfT5cbiAgICAgIDxkaXYgaWQ9J3JwLWNvbXBhcmlzb24tbW9kYWwnPlxuICAgICAgICA8aDQ+Q09NUEFSSU5HPC9oND5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JwLW1vZGFsLXByb2R1Y3QtbmFtZXMnPlxuICAgICAgICAgIDxwPntwcm9wcy5tYWluUHJvZHVjdFswXX08L3A+XG4gICAgICAgICAgPHA+e3Byb3BzLnByb2R1Y3RUb0NvbXBhcmVbMF19PC9wPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICB7YWxsRmVhdHVyZXMubWFwKGZlYXR1cmUgPT5cbiAgICAgICAgICBmZWF0dXJlLnByb2R1Y3QgPT09ICdtYWluJ1xuICAgICAgICAgICAgP1xuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J3JwLW1vZGFsLXJvdyc+XG4gICAgICAgICAgICAgIDxkaXYga2V5PXtrZXkrK30gY2xhc3NOYW1lPSdycC1tb2RhbC1jb2wtMSc+e2ZlYXR1cmUudmFsdWV9PC9kaXY+XG4gICAgICAgICAgICAgIDxkaXYga2V5PXtrZXkrK30gY2xhc3NOYW1lPSdycC1tb2RhbC1jb2wtMic+e2ZlYXR1cmUuZmVhdHVyZX08L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2tleSsrfSBjbGFzc05hbWU9J3JwLW1vZGFsLWNvbC0zJz57ZmVhdHVyZS5jb21wVmFsdWV9PC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDpcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdycC1tb2RhbC1yb3cnPlxuICAgICAgICAgICAgICA8ZGl2IGtleT17a2V5Kyt9IGNsYXNzTmFtZT0ncnAtbW9kYWwtY29sLTEnPntmZWF0dXJlLmNvbXBWYWx1ZX08L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBrZXk9e2tleSsrfSBjbGFzc05hbWU9J3JwLW1vZGFsLWNvbC0yJz57ZmVhdHVyZS5mZWF0dXJlfTwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGtleT17a2V5Kyt9IGNsYXNzTmFtZT0ncnAtbW9kYWwtY29sLTMnPntmZWF0dXJlLnZhbHVlfTwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBhcmlzb25Nb2RhbDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEl0ZW1DYXJkIGZyb20gJy4vSXRlbUNhcmQuanN4JztcbmltcG9ydCBDb21wYXJpc29uTW9kYWwgZnJvbSAnLi9Db21wYXJpc29uTW9kYWwuanN4JztcbmltcG9ydCB7IHByZXZlbnRTY3JvbGwgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBJdGVtc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzaG93TW9kYWw6IGZhbHNlLFxuICAgICAgaXRlbVRvQ29tcGFyZTogJycsXG4gICAgICBtYWluUHJvZHVjdEZlYXR1cmVzOiBbXSxcbiAgICAgIGZlYXR1cmVzVG9Db21wYXJlOiBbXSxcbiAgICB9O1xuXG4gICAgdGhpcy50b2dnbGVNb2RhbCA9IHRoaXMudG9nZ2xlTW9kYWwuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHRvZ2dsZU1vZGFsKGUsIGZlYXR1cmVzLCBuYW1lKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgIGlmICghdGhpcy5zdGF0ZS5zaG93TW9kYWwpIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBpdGVtVG9Db21wYXJlOiBuYW1lLFxuICAgICAgICBmZWF0dXJlc1RvQ29tcGFyZTogZmVhdHVyZXNcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgc2hvd01vZGFsOiAhdGhpcy5zdGF0ZS5zaG93TW9kYWxcbiAgICB9LCBwcmV2ZW50U2Nyb2xsKCkpO1xuICB9XG5cbiAgc2Nyb2xsTGVmdChlKSB7XG4gICAgZS50YXJnZXQucGFyZW50Tm9kZS5zY3JvbGxMZWZ0ICs9IDMyMDtcbiAgfVxuXG4gIHNjcm9sbFJpZ2h0KGUpIHtcbiAgICBlLnRhcmdldC5wYXJlbnROb2RlLnNjcm9sbExlZnQgLT0gMzIwO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT0ncnAtc3RyaXAnPlxuICAgICAgICA8ZGl2IGlkPSdycC1sZWZ0LWFycm93JyBvbkNsaWNrPXt0aGlzLnNjcm9sbFJpZ2h0fT5cbiAgICAgICAgICB7JzwnfVxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8Q29tcGFyaXNvbk1vZGFsXG4gICAgICAgICAgc2hvd01vZGFsPXt0aGlzLnN0YXRlLnNob3dNb2RhbH1cbiAgICAgICAgICB0b2dnbGVNb2RhbD17dGhpcy50b2dnbGVNb2RhbH1cbiAgICAgICAgICBtYWluUHJvZHVjdD17W3RoaXMucHJvcHMucHJvZHVjdE5hbWUsIHRoaXMucHJvcHMucHJvZHVjdEZlYXR1cmVzXX1cbiAgICAgICAgICBwcm9kdWN0VG9Db21wYXJlPXtbdGhpcy5zdGF0ZS5pdGVtVG9Db21wYXJlLCB0aGlzLnN0YXRlLmZlYXR1cmVzVG9Db21wYXJlXX0gLz5cblxuICAgICAgICB7dGhpcy5wcm9wcy5pdGVtcy5tYXAoaXRlbUlkID0+XG4gICAgICAgICAgPEl0ZW1DYXJkXG4gICAgICAgICAgICBpZD17aXRlbUlkfVxuICAgICAgICAgICAga2V5PXtpdGVtSWR9XG4gICAgICAgICAgICB0b2dnbGVNb2RhbD17dGhpcy50b2dnbGVNb2RhbH1cbiAgICAgICAgICAgIGhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2s9e3RoaXMucHJvcHMuaGFuZGxlUmVsYXRlZEl0ZW1DbGlja30gLz4pfVxuXG4gICAgICAgIDxkaXYgaWQ9J3JwLXJpZ2h0LWFycm93JyBvbkNsaWNrPXt0aGlzLnNjcm9sbExlZnR9PlxuICAgICAgICAgIHsnPid9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJdGVtc0xpc3Q7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgQWRkVG9PdXRmaXQgPSAocHJvcHMpID0+IChcbiAgPGRpdiBpZD0ncnAtYWRkLXRvLW91dGZpdC1jYXJkJyBvbkNsaWNrPXtwcm9wcy5hZGRUb091dGZpdH0+XG4gICAgPHA+KzwvcD5cbiAgICA8cD5BZGQgdG8gT3V0Zml0PC9wPlxuICA8L2Rpdj5cbik7XG5cbmV4cG9ydCBkZWZhdWx0IEFkZFRvT3V0Zml0OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmNvbnN0IE91dGZpdENhcmQgPSAocHJvcHMpID0+IChcbiAgPGRpdiBjbGFzc05hbWU9J3JwLWNhcmQnIGlkPXtwcm9wcy5wcm9kdWN0SW5mby5pZH0gb25DbGljaz17KCkgPT4gcHJvcHMuaGFuZGxlUmVsYXRlZEl0ZW1DbGljayhwcm9wcy5wcm9kdWN0SW5mby5pZCl9PlxuICAgIDxkaXYgaWQ9J3JwLWFjdGlvbi1jb250YWluZXInPlxuICAgICAgPGRpdiBjbGFzc05hbWU9J3JwLWNhcmQtYWN0aW9uJyBpZD0ncnAtY2FyZC1yZW1vdmUnIG9uQ2xpY2s9eyhlKSA9PiBwcm9wcy5yZW1vdmVGcm9tT3V0Zml0KGUpfT4gPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBpZD0ncnAtdGh1bWJuYWlsLWNvbnRhaW5lcic+XG4gICAgICA8aW1nIGlkPSdycC10aHVtYm5haWwtaW1hZ2UnIHNyYz17cHJvcHMucHJvZHVjdEluZm8udGh1bWJuYWlsVXJsfT48L2ltZz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGlkPSdycC1jb250ZW50LWNvbnRhaW5lcic+XG4gICAgICA8cCBpZD0ncnAtY2FyZC1jYXRlZ29yeSc+e3Byb3BzLnByb2R1Y3RJbmZvLmNhdGVnb3J5fTwvcD5cbiAgICAgIDxwIGlkPSdycC1jYXJkLW5hbWUnPntwcm9wcy5wcm9kdWN0SW5mby5uYW1lfTwvcD5cbiAgICAgIDxwIGlkPSdycC1jYXJkLXByaWNlJz4ke3Byb3BzLnByb2R1Y3RJbmZvLnByaWNlfTwvcD5cbiAgICAgIDxzcGFuIGNsYXNzPSdzdGFycycgc3R5bGU9e3snLS1yYXRpbmcnOiBwcm9wcy5wcm9kdWN0SW5mby5yYXRpbmd9fT48L3NwYW4+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuKTtcblxuZXhwb3J0IGRlZmF1bHQgT3V0Zml0Q2FyZDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEFkZFRvT3V0Zml0IGZyb20gJy4vQWRkVG9PdXRmaXQuanN4JztcbmltcG9ydCBPdXRmaXRDYXJkIGZyb20gJy4vT3V0Zml0Q2FyZC5qc3gnO1xuaW1wb3J0IHsgZGVmaW5lTWFpblByb2R1Y3QgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBPdXRmaXRMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgb3V0Zml0czogW10sXG4gICAgICBtYWluUHJvZHVjdDoge1xuICAgICAgICB0aHVtYm5haWxVcmw6ICcnLFxuICAgICAgICBjYXRlZ29yeTogJycsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICBwcmljZTogJycsXG4gICAgICAgIHJhdGluZzogJycsXG4gICAgICAgIGlkOiAnJ1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmFkZFRvT3V0Zml0ID0gdGhpcy5hZGRUb091dGZpdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVtb3ZlRnJvbU91dGZpdCA9IHRoaXMucmVtb3ZlRnJvbU91dGZpdC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHByZXZQcm9wcy5pbmZvLmlkICE9PSB0aGlzLnByb3BzLmluZm8uaWQpIHsgdGhpcy5pbml0aWFsaXplKCk7IH1cbiAgfVxuXG4gIGluaXRpYWxpemUoKSB7XG4gICAgbGV0IG1haW5Qcm9kdWN0ID0gZGVmaW5lTWFpblByb2R1Y3QodGhpcy5wcm9wcy5pbmZvLCB0aGlzLnByb3BzLmRlZmF1bHRTdHlsZSwgdGhpcy5wcm9wcy5hdmVyYWdlUmF0aW5nKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgbWFpblByb2R1Y3Q6IG1haW5Qcm9kdWN0XG4gICAgfSk7XG5cbiAgICBpZiAoIWxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvdXRmaXRzJykpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdvdXRmaXRzJywgSlNPTi5zdHJpbmdpZnkoW10pKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHN0b3JlZE91dGZpdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvdXRmaXRzJykpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IG91dGZpdHM6IHN0b3JlZE91dGZpdHMgfSk7XG4gICAgfVxuICB9XG5cbiAgYWRkVG9PdXRmaXQoKSB7XG4gICAgbGV0IHN0b3JlZE91dGZpdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvdXRmaXRzJykpO1xuICAgIGxldCBtYWluUHJvZHVjdCA9IHRoaXMuc3RhdGUubWFpblByb2R1Y3Q7XG4gICAgbGV0IGZvdW5kRHVwbGljYXRlID0gZmFsc2U7XG5cbiAgICBzdG9yZWRPdXRmaXRzLmZvckVhY2gob3V0Zml0ID0+IHtcbiAgICAgIGlmIChvdXRmaXQuaWQgPT09IG1haW5Qcm9kdWN0LmlkKSB7XG4gICAgICAgIGZvdW5kRHVwbGljYXRlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghZm91bmREdXBsaWNhdGUpIHtcbiAgICAgIHN0b3JlZE91dGZpdHMucHVzaChtYWluUHJvZHVjdCk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnb3V0Zml0cycsIEpTT04uc3RyaW5naWZ5KHN0b3JlZE91dGZpdHMpKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvdXRmaXRzOiBzdG9yZWRPdXRmaXRzIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZUZyb21PdXRmaXQoZSkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgbGV0IHN0b3JlZE91dGZpdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvdXRmaXRzJykpO1xuICAgIGxldCByZW1vdmVkSXRlbUlkID0gcGFyc2VJbnQoZS50YXJnZXQucGFyZW50Tm9kZS5wYXJlbnROb2RlLmlkKTtcblxuICAgIGlmIChzdG9yZWRPdXRmaXRzKSB7XG4gICAgICBsZXQgY3VycmVudE91dGZpdHMgPSB0aGlzLnN0YXRlLm91dGZpdHM7XG4gICAgICBsZXQgdXBkYXRlZE91dGZpdHMgPSBbXTtcblxuICAgICAgY3VycmVudE91dGZpdHMuZm9yRWFjaChvdXRmaXQgPT4ge1xuICAgICAgICBpZiAob3V0Zml0LmlkICE9PSByZW1vdmVkSXRlbUlkKSB7IHVwZGF0ZWRPdXRmaXRzLnB1c2gob3V0Zml0KTsgfVxuICAgICAgfSk7XG5cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdvdXRmaXRzJywgSlNPTi5zdHJpbmdpZnkodXBkYXRlZE91dGZpdHMpKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBvdXRmaXRzOiB1cGRhdGVkT3V0Zml0cyB9KTtcbiAgICB9XG4gIH1cblxuICBzY3JvbGxMZWZ0KGUpIHtcbiAgICBlLnRhcmdldC5wYXJlbnROb2RlLnNjcm9sbExlZnQgKz0gMzIwO1xuICB9XG5cbiAgc2Nyb2xsUmlnaHQoZSkge1xuICAgIGUudGFyZ2V0LnBhcmVudE5vZGUuc2Nyb2xsTGVmdCAtPSAzMjA7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPSdycC1zdHJpcCc+XG4gICAgICAgIDxkaXYgaWQ9J3JwLWxlZnQtYXJyb3cnIG9uQ2xpY2s9e3RoaXMuc2Nyb2xsUmlnaHR9PlxuICAgICAgICAgIHsnPCd9XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxBZGRUb091dGZpdCBhZGRUb091dGZpdD17dGhpcy5hZGRUb091dGZpdH0gLz5cbiAgICAgICAge3RoaXMuc3RhdGUub3V0Zml0cy5sZW5ndGggIT09IDAgJiYgdGhpcy5zdGF0ZS5vdXRmaXRzLm1hcChvdXRmaXQgPT4gPE91dGZpdENhcmRcbiAgICAgICAgICBrZXk9e291dGZpdC5pZH1cbiAgICAgICAgICBwcm9kdWN0SW5mbz17b3V0Zml0fVxuICAgICAgICAgIHJlbW92ZUZyb21PdXRmaXQ9e3RoaXMucmVtb3ZlRnJvbU91dGZpdH1cbiAgICAgICAgICBoYW5kbGVSZWxhdGVkSXRlbUNsaWNrPXt0aGlzLnByb3BzLmhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2t9IC8+KX1cblxuICAgICAgICA8ZGl2IGlkPSdycC1yaWdodC1hcnJvdycgb25DbGljaz17dGhpcy5zY3JvbGxMZWZ0fT5cbiAgICAgICAgICB7Jz4nfVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgT3V0Zml0TGlzdDsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEl0ZW1zTGlzdCBmcm9tICcuL0l0ZW1zTGlzdC5qc3gnO1xuaW1wb3J0IE91dGZpdExpc3QgZnJvbSAnLi9PdXRmaXRMaXN0LmpzeCc7XG5pbXBvcnQgeyBnZXRSZWxhdGVkSXRlbXMgfSBmcm9tICcuL2hlbHBlcnMuanMnO1xuXG5jbGFzcyBSZWxhdGVkSXRlbXMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICByZWxhdGVkSXRlbXNJZHM6IFtdLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5wcm9kdWN0X2lkICE9PSBwcmV2UHJvcHMucHJvZHVjdF9pZCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICB9XG5cbiAgaW5pdGlhbGl6ZSgpIHtcbiAgICBnZXRSZWxhdGVkSXRlbXModGhpcy5wcm9wcy5wcm9kdWN0X2lkKVxuICAgICAgLnRoZW4ocmVsYXRlZEl0ZW1zID0+IHtcbiAgICAgICAgbGV0IHVuaXF1ZUl0ZW1zID0gWy4uLm5ldyBTZXQocmVsYXRlZEl0ZW1zKV07XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyByZWxhdGVkSXRlbXNJZHM6IHVuaXF1ZUl0ZW1zIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgaWQ9J3JwLXdyYXBwZXInPlxuICAgICAgICA8aDQ+UkVMQVRFRCBQUk9EVUNUUzwvaDQ+XG4gICAgICAgIDxJdGVtc0xpc3RcbiAgICAgICAgICBpdGVtcz17dGhpcy5zdGF0ZS5yZWxhdGVkSXRlbXNJZHN9XG4gICAgICAgICAgcHJvZHVjdE5hbWU9e3RoaXMucHJvcHMuaW5mby5uYW1lfVxuICAgICAgICAgIHByb2R1Y3RGZWF0dXJlcz17dGhpcy5wcm9wcy5pbmZvLmZlYXR1cmVzfVxuICAgICAgICAgIGhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2s9e3RoaXMucHJvcHMuaGFuZGxlUmVsYXRlZEl0ZW1DbGlja30gLz5cblxuICAgICAgICA8aDQ+WU9VUiBPVVRGSVQ8L2g0PlxuICAgICAgICA8T3V0Zml0TGlzdFxuICAgICAgICAgIGluZm89e3RoaXMucHJvcHMuaW5mb31cbiAgICAgICAgICBkZWZhdWx0U3R5bGU9e3RoaXMucHJvcHMuc2VsZWN0ZWRTdHlsZX1cbiAgICAgICAgICBhdmVyYWdlUmF0aW5nPXt0aGlzLnByb3BzLmF2ZXJhZ2VSYXRpbmd9XG4gICAgICAgICAgaGFuZGxlUmVsYXRlZEl0ZW1DbGljaz17dGhpcy5wcm9wcy5oYW5kbGVSZWxhdGVkSXRlbUNsaWNrfSAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZWxhdGVkSXRlbXM7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuY29uc3QgQ2xpY2tXcmFwcGVyID0gKENvbXBvbmVudFRvV3JhcCwgbW9kdWxlTmFtZSkgPT4ge1xuICByZXR1cm4gKHByb3BzKSA9PiAoXG4gICAgPGRpdiBvbkNsaWNrPXsoZSkgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2NsaWNrZWQgZWxlbWVudDonLCBlLnRhcmdldC5vdXRlckhUTUwsICdcXG5jbGlja2VkIG1vZHVsZScsIG1vZHVsZU5hbWUsICdcXG50aW1lc3RhbXA6JywgbmV3IERhdGUpO1xuICAgICAgZmV0Y2goJy9pbnRlcmFjdGlvbnMnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgZWxlbWVudDogZS50YXJnZXQub3V0ZXJIVE1MLFxuICAgICAgICAgIHdpZGdldDogbW9kdWxlTmFtZSxcbiAgICAgICAgICB0aW1lOiBuZXcgRGF0ZVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICAgICAgLy8gLnRoZW4oZGF0YSA9PiBjb25zb2xlLmxvZygnQ2xpY2sgZXZlbnQgcmVjb3JkZWQhJywgZGF0YSkpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpKTtcbiAgICB9fT5cbiAgICAgIDxDb21wb25lbnRUb1dyYXAgey4uLnByb3BzfS8+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDbGlja1dyYXBwZXI7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IFByb2R1Y3REZXRhaWxzIGZyb20gJy4vcHJvZHVjdF9kZXRhaWxzL1Byb2R1Y3REZXRhaWxzLmpzeCc7XG5pbXBvcnQgUXVlc3Rpb25zQW5zd2VycyBmcm9tICcuL3F1ZXN0aW9uc19hbnN3ZXJzL1F1ZXN0aW9uc0Fuc3dlcnMuanN4JztcbmltcG9ydCBSYXRpbmdzUmV2aWV3cyBmcm9tICcuL3JhdGluZ3NfcmV2aWV3cy9SYXRpbmdzUmV2aWV3cy5qc3gnO1xuaW1wb3J0IFJlbGF0ZWRJdGVtcyBmcm9tICcuL3JlbGF0ZWRfaXRlbXMvUmVsYXRlZEl0ZW1zLmpzeCc7XG5pbXBvcnQgQ2xpY2tXcmFwcGVyIGZyb20gJy4vQ2xpY2tXcmFwcGVyLmpzeCc7XG5pbXBvcnQge2NvbXB1dGVBdmVyYWdlUmF0aW5nfSBmcm9tICcuL3JhdGluZ3NfcmV2aWV3cy9oZWxwZXJzLmpzJztcblxuY29uc3QgV3JhcHBlZFByb2R1Y3REZXRhaWxzID0gQ2xpY2tXcmFwcGVyKFByb2R1Y3REZXRhaWxzLCAnUHJvZHVjdCBEZXRhaWxzJyk7XG5jb25zdCBXcmFwcGVkUmVsYXRlZEl0ZW1zID0gQ2xpY2tXcmFwcGVyKFJlbGF0ZWRJdGVtcywgJ1JlbGF0ZWQgSXRlbXMnKTtcbmNvbnN0IFdyYXBwZWRRdWVzdGlvbnNBbnN3ZXJzID0gQ2xpY2tXcmFwcGVyKFF1ZXN0aW9uc0Fuc3dlcnMsICdRdWVzdGlvbnMgYW5kIEFuc3dlcnMnKTtcbmNvbnN0IFdyYXBwZWRSYXRpbmdzUmV2aWV3cyA9IENsaWNrV3JhcHBlcihSYXRpbmdzUmV2aWV3cywgJ1JhdGluZ3MgYW5kIFJldmlld3MnKTtcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgcHJvZHVjdF9pZDogJycsXG4gICAgICBpbmZvOiBudWxsLFxuICAgICAgc2VsZWN0ZWRTdHlsZTogbnVsbCxcbiAgICAgIHN0eWxlSW5mbzogbnVsbCxcbiAgICAgIGluZGV4U3R5bGVTZWxlY3RlZDogbnVsbCxcbiAgICAgIG1ldGE6IG51bGwsXG4gICAgICBhdmVyYWdlUmF0aW5nOiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuaGFuZGxlU3R5bGVTZWxlY3Rpb24gPSB0aGlzLmhhbmRsZVN0eWxlU2VsZWN0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5oYW5kbGVSZWxhdGVkSXRlbUNsaWNrID0gdGhpcy5oYW5kbGVSZWxhdGVkSXRlbUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5pbml0aWFsaXplID0gdGhpcy5pbml0aWFsaXplLmJpbmQodGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgfVxuXG4gIGluaXRpYWxpemUocHJvZHVjdElkID0gJzIyMTIyJykge1xuICAgIFByb21pc2UuYWxsKFtmZXRjaChgL3Byb2R1Y3RzLyR7cHJvZHVjdElkfWApLCBmZXRjaChgL3Byb2R1Y3RzLyR7cHJvZHVjdElkfS9zdHlsZXNgKSwgZmV0Y2goYC9yZXZpZXdzL21ldGE/cHJvZHVjdF9pZD0ke3Byb2R1Y3RJZH1gKV0pXG4gICAgICAudGhlbigocmVzcG9uc2VzKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbChyZXNwb25zZXMubWFwKHJlc3BvbnNlID0+IHJlc3BvbnNlLmpzb24oKSkpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChwYXJzZWRSZXNwb25zZXMpID0+IHtcbiAgICAgICAgdmFyIGRhdGEgPSBwYXJzZWRSZXNwb25zZXNbMV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5yZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGRhdGEucmVzdWx0c1tpXVsnZGVmYXVsdD8nXSkge1xuICAgICAgICAgICAgdmFyIHNlbGVjdGVkU3R5bGUgPSBkYXRhLnJlc3VsdHNbaV07XG4gICAgICAgICAgICB2YXIgaW5kZXhTdHlsZVNlbGVjdGVkID0gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgcHJvZHVjdF9pZDogcHJvZHVjdElkLFxuICAgICAgICAgIGluZm86IHBhcnNlZFJlc3BvbnNlc1swXSxcbiAgICAgICAgICBzZWxlY3RlZFN0eWxlOiBzZWxlY3RlZFN0eWxlIHx8IGRhdGEucmVzdWx0c1swXSxcbiAgICAgICAgICBpbmRleFN0eWxlU2VsZWN0ZWQ6IGluZGV4U3R5bGVTZWxlY3RlZCB8fCAwLFxuICAgICAgICAgIHN0eWxlSW5mbzogZGF0YS5yZXN1bHRzLFxuICAgICAgICAgIG1ldGE6IHBhcnNlZFJlc3BvbnNlc1syXSxcbiAgICAgICAgICBhdmVyYWdlUmF0aW5nOiBjb21wdXRlQXZlcmFnZVJhdGluZyhwYXJzZWRSZXNwb25zZXNbMl0ucmF0aW5ncylbMV1cbiAgICAgICAgfSk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7XG4gICAgICB9KTtcblxuICB9XG5cbiAgaGFuZGxlU3R5bGVTZWxlY3Rpb24oZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgaW5kZXggPSBOdW1iZXIoZS50YXJnZXQuaWQpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW5kZXhTdHlsZVNlbGVjdGVkOiBpbmRleCxcbiAgICAgIHNlbGVjdGVkU3R5bGU6IHRoaXMuc3RhdGUuc3R5bGVJbmZvW2luZGV4XSxcbiAgICB9KTtcbiAgfVxuXG4gIGhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2soaWQpIHtcbiAgICBsZXQgbmV3SWQgPSBpZC50b1N0cmluZygpO1xuICAgIHRoaXMuaW5pdGlhbGl6ZShuZXdJZCk7XG4gIH1cblxuICByZW5kZXIoKSB7XG5cbiAgICBpZiAodGhpcy5zdGF0ZS5wcm9kdWN0X2lkID09PSAnJykge1xuICAgICAgcmV0dXJuICg8ZGl2PmxvYWRpbmcuLi48L2Rpdj4pO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8bmF2PlxuICAgICAgICAgIDxkaXYgaWQ9J25hdi1sb2dvJz5MT0dPPC9kaXY+XG4gICAgICAgICAgPGRpdiBpZD0nbmF2LXNlYXJjaCc+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT0ndGV4dCc+PC9pbnB1dD5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J3NlYXJjaC1pY29uJz4gPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvbmF2PlxuICAgICAgICA8ZGl2IGlkPSdhbm5vdW5jZW1lbnQtYmFubmVyJz48ZW0+U0lURS1XSURFIEFOTk9VTkNFTUVOVCBNRVNTQUdFITwvZW0+ICDigJQgIFNBTEUgLyBESVNDT1VOVCA8c3Ryb25nPk9GRkVSPC9zdHJvbmc+ICDigJQgIDx1Pk5FVyBQUk9EVUNUIEhJR0hMSUdIVDwvdT48L2Rpdj5cblxuICAgICAgICA8V3JhcHBlZFByb2R1Y3REZXRhaWxzXG4gICAgICAgICAgcHJvZHVjdF9pZD17dGhpcy5zdGF0ZS5wcm9kdWN0X2lkfVxuICAgICAgICAgIGluZm89e3RoaXMuc3RhdGUuaW5mb31cbiAgICAgICAgICBzZWxlY3RlZFN0eWxlPXt0aGlzLnN0YXRlLnNlbGVjdGVkU3R5bGV9XG4gICAgICAgICAgc3R5bGVJbmZvPXt0aGlzLnN0YXRlLnN0eWxlSW5mb31cbiAgICAgICAgICBpbmRleFN0eWxlU2VsZWN0ZWQ9e3RoaXMuc3RhdGUuaW5kZXhTdHlsZVNlbGVjdGVkfVxuICAgICAgICAgIGhhbmRsZVN0eWxlU2VsZWN0aW9uPXt0aGlzLmhhbmRsZVN0eWxlU2VsZWN0aW9ufVxuICAgICAgICAgIGF2ZXJhZ2VSYXRpbmc9e3RoaXMuc3RhdGUuYXZlcmFnZVJhdGluZ30vPlxuICAgICAgICA8V3JhcHBlZFJlbGF0ZWRJdGVtc1xuICAgICAgICAgIHByb2R1Y3RfaWQ9e3RoaXMuc3RhdGUucHJvZHVjdF9pZH1cbiAgICAgICAgICBpbmZvPXt0aGlzLnN0YXRlLmluZm99XG4gICAgICAgICAgc2VsZWN0ZWRTdHlsZT17dGhpcy5zdGF0ZS5zZWxlY3RlZFN0eWxlfVxuICAgICAgICAgIGF2ZXJhZ2VSYXRpbmc9e3RoaXMuc3RhdGUuYXZlcmFnZVJhdGluZ31cbiAgICAgICAgICBoYW5kbGVSZWxhdGVkSXRlbUNsaWNrPXt0aGlzLmhhbmRsZVJlbGF0ZWRJdGVtQ2xpY2t9Lz5cbiAgICAgICAgPFdyYXBwZWRRdWVzdGlvbnNBbnN3ZXJzXG4gICAgICAgICAgcHJvZHVjdF9pZD17dGhpcy5zdGF0ZS5wcm9kdWN0X2lkfVxuICAgICAgICAgIG5hbWU9e3RoaXMuc3RhdGUuaW5mby5uYW1lfS8+XG4gICAgICAgIDxXcmFwcGVkUmF0aW5nc1Jldmlld3NcbiAgICAgICAgICBwcm9kdWN0X2lkPXt0aGlzLnN0YXRlLnByb2R1Y3RfaWR9XG4gICAgICAgICAgaW5mbz17dGhpcy5zdGF0ZS5pbmZvfVxuICAgICAgICAgIG1ldGE9e3RoaXMuc3RhdGUubWV0YX0vPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuXG59XG5cblJlYWN0RE9NLnJlbmRlcig8QXBwIC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnYXBwJykpOyJdLCJzb3VyY2VSb290IjoiIn0=